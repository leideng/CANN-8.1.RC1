#!/usr/bin/env python
# coding=utf-8

# Copyright (c) Huawei Technologies Co., Ltd. 2017-2019. All rights reserved.
# description: HCCL profiling解析工具总入口文件?
# Create: 2021-5-5

import os
import sys
from . import hwts_about, export_trace, list_file, hccl_about


# 功能描述：以op类去匹配迭代轮次。匹配ar的500，ar的501，可能是ar1和ar2
def get_iter_serverdatas(device_id, local_rank, hwts_trace, \
                         stid_list, begin, num, ops, online_mode):
    max_range = begin + num
    server_datas = []
    hwts_first_index_list = export_trace.find_first_time_list(hwts_trace, stid_list, max_range, online_mode)

    # 取最大op数目（1500）和实际op数目的最小值
    max_range = min(len(hwts_first_index_list), max_range)

    while begin < max_range:
        # step2: 反匹配，寻找sid，tid对应的op，具体是ar1 or ar2
        ret_ops = export_trace.get_op_from_ops(hwts_first_index_list[begin], ops)
        devicedata = hccl_about.ops_process(device_id, \
                                                       local_rank, ret_ops)
        export_trace.hccl_relate_hwts_mode_b(devicedata,\
                                             hwts_trace, hwts_first_index_list[begin][-2])
        server_datas.append(devicedata)
        begin += 1
    return server_datas

def get_op_slice_num(elem):
    filename = elem.split(os.sep)[-1]
    return filename.split('_')[1] + filename.split('_')[2] + filename.split('_')[-1]

# 检查使用的hwts版本还是stars的profiling数据
def check_data_version(profiling_data_path):
    flag = set()
    for path, dir_list, file_list in os.walk(profiling_data_path):
        for file_name in file_list:
            if 'stars_soc.data' in file_name:
                flag.add('stars_soc.data')
            elif 'hwts.data' in file_name:
                flag.add('hwts.data')

    if len(flag) > 1:
        print("[ERROR]Version Inconsistency")
        flag = set()
    elif not flag:
        print("[ERROR]No data")
    return flag

def check_stid_and_op_type(ops):
    sid_set = set()
    tag = set()
    for op in ops:
        for sid in op['stream_ids']:
            sid_set.add(sid)
        tag.add(op['tag'].strip('hcom_').split('_')[0].lower())
    return sid_set, tag

# 对外暴露API
# 注：op以实际的hccl prof中tag名为准，包括：\
# broadcast/allRduce/allGather/reduceScatter/reduce/all/send/recv
def hccl_parse_op(device_id, profiling_data_path, output_path,\
                  op_type='all', begin=0, num=100000000):

    if not os.path.isdir(profiling_data_path):
        print('[ERROR] profiling_data_path is not a dir, it shoule be a dir')
        return

    if not os.path.isdir(output_path):
        print('[ERROR] output_path is not a dir, it shoule be a dir')
        return

    profiling_data_path = os.path.abspath(profiling_data_path)
    output_path = os.path.abspath(output_path)
    if profiling_data_path.find(output_path) != -1:
        print('[ERROR] output_path is not allow to the same or belong to input_path')
        return
    flags = check_data_version(profiling_data_path)
    if not flags:
        return

    online_mode = 0  # 单算子标志
    local_rank = 0   # 存储本device id在全局网络中的 rank id编号
    # step 1: 遍历目录，寻找到hccl prof文件所在路径
    if os.path.exists(profiling_data_path):
        filelist = list_file.get_filelist_hccl(profiling_data_path)
        for file_elem in filelist:
            if 'trans' in file_elem:
                if ('dev' + device_id) in file_elem:
                    os.remove(file_elem)
        devfile_list = list_file.sel_devfile_from_filelist_hccl(device_id, filelist)
        if not devfile_list:
            print("[ERROR] Failed to parser HCCL profiling data on device [{}]. No HCCL profiling file "
                  "in the target directory[{}]".format(device_id, profiling_data_path))
            return
        devfile_list.sort(key=get_op_slice_num)

        local_rank, online_mode = hccl_about.get_localrank_and_workflow_mode(devfile_list[0])

    print('step1 done')

    # step 2: 数据预处理，对hccl prof文件进行加载，按需合并生成bin_list
    file_dir = os.path.dirname(os.path.abspath(devfile_list[0]))
    bin_list = hccl_about.bin_parser(file_dir)

    # step 3: 对step 2 生成的文件按op-stream-task 三级关系进行整理
    ops = hccl_about.hccl_process(bin_list)
    print('len of ops = ', len(ops))  # check了数据正确性
    print('step3 done')

    # 拿到所有的hccl相关的所有stream id在hwts/stars解析时作为入参
    sid_set, tag = check_stid_and_op_type(ops)

    if op_type != 'all' and op_type.lower() not in tag:
        print("[ERROR]No '{}' HCCL op profiling data.".format(op_type))
        return

    # step 4: 根据给定的op获取 sid + tid的列表
    stid_list, end_stid_list= hccl_about.get_sidtid_from_ops(ops, op_type)

    # step 5: 对hwts日志进行解析
    path = list_file.get_dir_hwts(device_id, profiling_data_path, list(flags)[0])
    print('step5 start')
    hwts_trace = hwts_about.hwts_parser(path, sid_set, end_stid_list, list(flags)[0], begin+num)

    if not hwts_trace:
        print("[ERROR] The result of parsing profiling data is null")
        return

    print('step5 done')
    server_data = get_iter_serverdatas(device_id, local_rank,\
                                       hwts_trace, stid_list, \
                                       begin, num, ops, online_mode)

    # step 6: 生成trace
    print('step6 start')
    export_trace.export_result(device_id, server_data, output_path)
    print('step6 done')
    return


if __name__ == '__main__':
    deviceID = sys.argv[1]
    profilingDataPath = sys.argv[2]
    outputPath = sys.argv[3]
    hccl_parse_op(deviceID, profilingDataPath, outputPath)
