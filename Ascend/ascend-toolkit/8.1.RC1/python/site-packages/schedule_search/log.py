#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import inspect
import logging
import os
import sys
import math

from te.utils.AscendLog import LOGGER

FILE_PATH = os.path.dirname(os.path.realpath(__file__))
# debug, info, warning, error
LOG_LEVELS = {
    '0' : logging.DEBUG,
    '1' : logging.INFO,
    '2' : logging.WARNING,
    '3' : logging.ERROR
}
MODULE_NAME = "auto_tune"
LOG_SLICE_LEN = 512
RUN_LOG_MASK = 0x01000000


def get_log_location() -> str:
    """
    get auto tune log called location, contains the lines and file name
    return: file name and line number and module name
    """
    line = inspect.currentframe().f_back.f_back.f_lineno
    co_filename = inspect.currentframe().f_back.f_back.f_code.co_filename
    filename = os.path.relpath(co_filename, FILE_PATH)
    log_str = "[%s:%d][%s] " % (filename, line, MODULE_NAME)
    return log_str


def info(log_msg: object, *log_paras: object) -> None:
    """

    :param log_msg:
    :param log_paras:
    """
    log_str = get_log_location()
    log_str += log_msg % log_paras
    # Slog会做截断，每LOG_SLICE_LEN个字符打印一条
    for i in range(int(math.ceil(len(log_str) / LOG_SLICE_LEN))):
        LOGGER.info(LOGGER.module.tbe, log_str[i * LOG_SLICE_LEN: (i + 1) * LOG_SLICE_LEN])


def dbg(log_msg: object, *log_paras: object) -> None:
    """

    :param log_msg:
    :param log_paras:
    """
    log_str = get_log_location()
    log_str += log_msg % log_paras
    # Slog会做截断，每LOG_SLICE_LEN个字符打印一条
    for i in range(int(math.ceil(len(log_str) / LOG_SLICE_LEN))):
        LOGGER.debug(LOGGER.module.tbe, log_str[i * LOG_SLICE_LEN: (i + 1) * LOG_SLICE_LEN])


def warn(log_msg: object, *log_paras: object) -> None:
    """

    :param log_msg:
    :param log_paras:
    """
    log_str = get_log_location()
    log_str += log_msg % log_paras
    # Slog会做截断，每LOG_SLICE_LEN个字符打印一条
    for i in range(int(math.ceil(len(log_str) / LOG_SLICE_LEN))):
        LOGGER.warn(LOGGER.module.tbe, log_str[i * LOG_SLICE_LEN: (i + 1) * LOG_SLICE_LEN])


def err(log_msg: object, *log_paras: object) -> None:
    """

    :param log_msg:
    :param log_paras:
    """
    log_str = get_log_location()
    log_str += log_msg % log_paras
    # Slog会做截断，每LOG_SLICE_LEN个字符打印一条
    for i in range(int(math.ceil(len(log_str) / LOG_SLICE_LEN))):
        LOGGER.error(LOGGER.module.tbe, log_str[i * LOG_SLICE_LEN: (i + 1) * LOG_SLICE_LEN])


def event(log_msg: object, *log_paras: object) -> None:
    """

    :param log_msg:
    :param log_paras:
    """
    log_str = get_log_location()
    log_str += log_msg % log_paras
    # Slog会做截断，每LOG_SLICE_LEN个字符打印一条
    for i in range(int(math.ceil(len(log_str) / LOG_SLICE_LEN))):
        LOGGER.info(LOGGER.module.tbe | RUN_LOG_MASK, log_str[i * LOG_SLICE_LEN: (i + 1) * LOG_SLICE_LEN])


class RLTuneLogging:
    """
    Logger for Auto tune progress, only for RL tune
    """

    logger_level = logging.INFO

    def __init__(self) -> None:
        self.logger = logging.getLogger("SCHEDULE_SEARCH")
        self.logger.propagate = 0
        self.logger_level = RLTuneLogging.logger_level
        self.logger.setLevel(self.logger_level)
        self.file_handler = None
        self.file_level = None
        self.formatter = logging.Formatter(
            '[%(levelname)s] [%(asctime)s] '
            '[auto_tune, %(process)d] : %(message)s')
        self.console_handler = logging.StreamHandler(stream=sys.stdout)
        self.console_level = RLTuneLogging.logger_level
        self.console_handler.setLevel(self.console_level)
        self.console_handler.setFormatter(self.formatter)
        self.logger.addHandler(self.console_handler)

    def info(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        Auto tune pregress info
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        self.logger.info(msg, *args, **kwargs)

    def debug(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        debug msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        self.logger.debug(msg, *args, **kwargs)

    def error(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        error msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        self.logger.error(msg, *args, **kwargs)

    def warning(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        warning msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        self.logger.warning(msg, *args, **kwargs)

    def set_log_level(self, level: int = 1, event_enable: int = 0) -> None:
        """
        set log level in atc rl_tune_init
        :param level:
        :param event_enable:
        :return:
        """
        LOGGER.set_level(LOGGER.module.tbe, level, event_enable)
        RLTuneLogging.log_level = LOG_LEVELS.get(str(level), '1')
        self.log_level = RLTuneLogging.log_level
        self.logger.setLevel(self.log_level)
        self.console_handler.setLevel(self.log_level)

LOGGING_INSTANCE = RLTuneLogging()
