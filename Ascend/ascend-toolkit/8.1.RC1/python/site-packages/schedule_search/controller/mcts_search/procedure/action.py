#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from typing import Optional
from typing import NoReturn

import numpy as np


class ActionType:
    """
    mcts中action的类别
    """
    split = 0
    at_axis = 1
    reorder = 2
    choose_axis = 3
    need_split_l0 = 4
    at_stage = 5
    decide_dbuff = 6
    choose_axis_type = 7
    emit_insn = 8

    def useless_func1(self):
        """
        vector
        :return:
        """
        return self.split

    def useless_func2(self):
        """
        vector
        :return:
        """
        return self.at_axis


class SearcherAction:  # pylint: disable=R0913
    """
    SearcherAction
    """
    def __init__(
            self,
            stage_index,
            action_type,
            cache_layer=0,
            sub_action_index=0,
            axis_index=0,
            action_value: Optional[int] = None,
            choose_axis_and_split_map: Optional[dict] = None,
            reorder_times: int = 0) -> NoReturn:
        self.stage_index = stage_index
        self.axis_index = axis_index
        self.action_type = action_type
        self.cache_layer = cache_layer
        self.sub_action_index = sub_action_index
        self.action_value = action_value
        # some op need to choose axis multiply times
        self.choose_axis_and_split_map = \
            choose_axis_and_split_map if choose_axis_and_split_map is not None else {"times": 1, "chosen_axes": []}
        # reorder times
        self.reorder_times = reorder_times

    def __str__(self):  # pylint: disable=R0912
        if self.action_type == ActionType.choose_axis:
            action_info = 'stage_%d_%d_times_choose_axis' % (self.stage_index,
                                                             self.choose_axis_and_split_map.get("times"))
        elif self.action_type == ActionType.choose_axis_type:
            action_info = 'stage_%d_choose_axis_type' % self.stage_index
        elif self.action_type == ActionType.need_split_l0:
            action_info = 'stage_%d_need_split_l0' % self.stage_index
        elif self.action_type == ActionType.at_axis:
            action_info = 'stage_%d_at_axis' % self.stage_index
        elif self.action_type == ActionType.reorder:
            action_info = 'stage_%d_layer_%d_%d_times_reorder_sub_%d' % (
                self.stage_index, self.cache_layer, self.reorder_times, self.sub_action_index)
        elif self.action_type == ActionType.split:
            action_info = 'stage_%d_layer_%d_axis_%d_split_sub_%d' % (
                self.stage_index, self.cache_layer, self.axis_index,
                self.sub_action_index)
        elif self.action_type == ActionType.at_stage:
            action_info = 'stage_%d_workspace_sub_%d' % (
                self.stage_index, self.sub_action_index)
        elif self.action_type == ActionType.decide_dbuff:
            action_info = 'stage_%d_double_buffer' % self.stage_index
        elif self.action_type == ActionType.emit_insn:
            action_info = 'stage_%d_emit_insn' % self.stage_index
        else:
            raise Exception("Unknown action type")

        if self.action_value is not None:
            action_info = action_info + "_move_%d" % self.action_value

        return action_info

    def vector(self):
        """
        vector
        :return:
        """
        return np.array([
            self.stage_index, self.axis_index, self.cache_layer,
            self.action_type, self.sub_action_index
        ], np.float32)

    def useless_func1(self):
        """
        vector
        :return:
        """
        return self.axis_index
