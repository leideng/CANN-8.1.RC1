#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from numpy import ndarray

from schedule_search import log
from schedule_search.controller.search_comm import get_trs_ub_size
from schedule_search.controller.mcts_search.features import SEARCH_N
from schedule_search.controller.mcts_search.schedule import Progress
from schedule_search.ts_env.tensor_cfg import AXIS_CNT
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.op_cfg import TIK_TO_DSL_OP_LIST


def proc(progress: Progress, action_mask: ndarray) -> ndarray:
    """
    规则内容：若factor取值与其后面的轴长相乘大于UB大小，则该factor需要mask掉
    :param progress: Progress
    :param action_mask: action mask
    :return: action mask
    """
    if progress.op_schedule_info.option.get('op_type') not in TIK_TO_DSL_OP_LIST.keys():
        return action_mask

    total_factor_size = 1
    stage_index = progress.todo.stage_index
    nonzero_axis = progress.get_nonzero_axes(stage_index)
    split_factor_list = progress.action_tensor[stage_index][
                        ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]

    # 选第一根轴时切分不做掩码处理
    if progress.todo.choose_axis_and_split_map.get("times") > 1:
        return action_mask

    # 选后面的切分轴时，需要计算factor
    for index, factor in enumerate(split_factor_list[:len(nonzero_axis)]):
        if index == progress.todo.axis_index:
            continue
        total_factor_size *= factor

    # 获取切分轴已有factor
    factor_index = \
        ActionTensorCfg.split_factor_s + \
        progress.todo.cache_layer * AXIS_CNT + \
        progress.todo.axis_index
    factor = progress.action_tensor[progress.todo.stage_index][factor_index]

    # 获取trs的ub_size，适当合理缩小，以减少解空间
    trs_ub_size = get_trs_ub_size(progress.op_schedule_info, stage_index)

    for i in range(SEARCH_N):
        next_factor \
            = factor + pow(SEARCH_N, progress.todo.sub_action_index) * i
        if total_factor_size * next_factor > trs_ub_size:
            action_mask[i] = 0

    # 全0的场景，保留第一位
    if sum(action_mask) == 0:
        action_mask[0] = 1
    log.dbg("r14 action_mask:%s", action_mask)

    return action_mask
