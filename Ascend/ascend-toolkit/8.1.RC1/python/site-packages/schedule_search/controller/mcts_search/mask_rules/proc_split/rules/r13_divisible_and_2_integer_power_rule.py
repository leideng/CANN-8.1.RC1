#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.tensor_cfg import AXIS_CNT
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.controller.mcts_search.features import SEARCH_N


def condition_check(progress):
    '''
    :param progress:
    :return:
    '''
    # 加option控制一下
    if progress.op_schedule_info.option.get('gemm_strict_mask') is not True:
        return False

    return True


def get_max_index(action_mask):
    '''
    :param action_mask:
    :return:
    '''
    max_index = len(action_mask) - 1
    if sum(action_mask) != 0:
        max_index = len(action_mask) - 1 - list(reversed(action_mask)).index(1)
    return max_index


def need_mask(progress, axis_len, factor, idx):  # pylint: disable=R0912
    '''
    :param progress:
    :param axis_len:
    :param factor:
    :param idx:
    :return:
    '''
    # 考虑sub_action
    # factor没有采样完成，看其下的所有可能factor是否有满足条件的
    sub_factor = pow(SEARCH_N, progress.todo.sub_action_index)
    if progress.todo.sub_action_index > 0:
        min_new_factor = factor + sub_factor * idx
        max_new_factor = min_new_factor + sub_factor
        new_factor_list = list(range(min_new_factor, max_new_factor))
    # factor全部采样完成，看自己是否满足条件
    else:
        new_factor_list = [factor + sub_factor * idx]

    mask_flag = True
    for new_factor in new_factor_list:
        if axis_len % new_factor == 0:
            mask_flag = False
            break
        if new_factor & (new_factor - 1) == 0:
            mask_flag = False
            break

    return mask_flag


def proc(progress, action_mask):
    '''
    规则内容：
    轴比较长的时候，比较难搜，限制切分因子只取可整除轴长的或2的整数次幂
    '''
    if not condition_check(progress):
        return action_mask

    # 记录一下mask之前的最大值
    max_index = get_max_index(action_mask)

    factor_index = ActionTensorCfg.split_factor_s + \
                   progress.todo.cache_layer * AXIS_CNT + \
                   progress.todo.axis_index
    factor = progress.action_tensor[progress.todo.stage_index][factor_index]
    axis_len = progress.get_nonzero_axes(progress.todo.stage_index)[
        progress.todo.axis_index]

    for idx in range(SEARCH_N):
        if need_mask(progress, axis_len, factor, idx):
            action_mask[idx] = 0

    # 不能全部都mask掉
    if sum(action_mask) == 0:
        action_mask[max_index] = 1

    log.dbg('r13_divisible_and_2_integer_power_rule: %s', action_mask)
    return action_mask
