#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import datetime
import os
from collections import namedtuple

from schedule_search import log
from schedule_search import util
from schedule_search.controller.mcts_search import preprocessing as pp
from schedule_search.controller.mcts_search.infer import sample_once

ValidationRes = namedtuple("ValidationRes", [
                           "op_name", "shape_list_str", "base_tick", "tick", "values", "start_time", "end_time"])


def _save_tick_to_filename(validation_res: namedtuple, val_dir: str) -> None:
    op_name = validation_res.op_name
    shape_list_str = validation_res.shape_list_str
    base_tick = validation_res.base_tick
    tick = validation_res.tick
    if isinstance(validation_res.values[0], list):
        value = validation_res.values[0][0]
    else:
        value = validation_res.values[0]
    # 把base_tick、tick记录到文件名中，方便获取
    tick_dir = os.path.join(val_dir, 'raw_tick')
    log.dbg('%s %s base_tick:%s tick:%s validation value: %s', op_name,
            shape_list_str, base_tick, tick, value)

    log.info("RL tune info: The validation process of op %s@%s costs %s seconds", op_name, shape_list_str,
             (validation_res.end_time - validation_res.start_time).total_seconds())
    util.ensure_dir_exists(tick_dir, reset=False)
    output_name = '{}@{}_{}_{}_{}_{}_{}.pk'.format(
        op_name, shape_list_str, os.getpid(),
        validation_res.end_time.strftime('%Y%m%d_%H%M%S_%f'), value, base_tick, tick)
    fname = os.path.join(tick_dir, output_name)
    os.mknod(fname)


def validation(sample_para: object) -> object:
    """

    :param sample_para:
    :return:
    """
    start_time = datetime.datetime.now()
    op_name = sample_para.op_schedule_infos[0].op_name
    shape_list_str = sample_para.op_schedule_infos[0].shape_list_str
    # 在Valid的时候，打开oom开关
    sample_para.op_schedule_infos[0].option['enable_oom'] = True
    log.info("RL tune info: The validation process of op %s@%s start.", op_name, shape_list_str)
    base_tick = sample_para.op_schedule_infos[0].base_tick
    val_dir = os.path.join(sample_para.infer_dir, "valid", op_name, shape_list_str)
    util.ensure_dir_exists(os.path.join(val_dir, 'raw'), reset=True)
    err_res = None
    try:
        sample_once(sample_para, valid=True)
        ticks, values = pp.get_val_tick_value(val_dir)
        if not ticks:
            return err_res
    except Exception as exception:  # pylint: disable=broad-except
        log.warn("RL exception occur: validation of sample_once meet problem, raise exception: %s", repr(exception))
        return err_res
    finally:
        pass

    tick = ticks[0]
    end_time = datetime.datetime.now()
    validation_res = ValidationRes(op_name, shape_list_str, base_tick, tick, values, start_time, end_time)
    _save_tick_to_filename(validation_res, val_dir)
    sample_para.post_proc()
    log.info("RL tune info: The validation process of op %s@%s end.", op_name, shape_list_str)
    return tick
