#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import ctypes
import inspect
from threading import Thread

from tbe.tvm._ffi.base import TVMError
from tbe.common.buildcfg import build_config
from tbe.tvm.error_mgr.tbe_python_error_mgr import TBEPythonError

from schedule_search import log


class FuncTimeout(Thread):
    """
    FuncTimeout
    """
    def __init__(self, func: object, args: object, kwargs: object, context: object) -> None:
        Thread.__init__(self)
        self.result = None
        self.exception = None
        self.func = func
        self.args = args
        self.kwargs = kwargs
        self.context = context

    def run(self) -> None:
        """
        run
        """
        try:
            if self.context:
                with build_config(self.context):
                    self.result = self.func(*self.args, **self.kwargs)
            else:
                with build_config(apply_tbe_pass=True):
                    self.result = self.func(*self.args, **self.kwargs)
        except (OSError, AttributeError, ValueError, LookupError, TVMError, TBEPythonError) as exception:
            self.exception = exception
        finally:
            pass

    def stop(self) -> None:
        """
        stop
        """
        # noinspection PyBroadException
        try:
            tid = self.ident
            exctype = SystemExit
            if not inspect.isclass(exctype):
                exctype = type(exctype)
            res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), ctypes.py_object(exctype))
            if res == 0:
                raise ValueError("invalid thread id")
            if res != 1:
                # """if it returns a number greater than one,
                # you're in trouble, and you should call it again with exc=NULL to revert the effect"""
                ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)
                raise SystemError("PyThreadState_SetAsyncExc failed")
        except (OSError, AttributeError, ValueError, TypeError) as exception:
            log.dbg('exception occur!\n%s', str(exception))
        finally:
            pass


def get_print_log(cmd: str, ret_str: str) -> str:
    """
    get_print_log for run_cmd_comm
    """
    if "sshpass -p " in cmd:
        print_log = "run cmd: sshpass -p ... %s!" % ret_str
    else:
        print_log = "run cmd: %s %s!" % (cmd, ret_str)
    return print_log


def print_log_proc(log_params: object) -> None:
    """
    print_log_proc for run_cmd_comm
    """
    if log_params.quiet:
        return
    print_log = ""
    if not log_params.ret or log_params.print_output:
        print_log = get_print_log(log_params.cmd, log_params.ret_str)
    if log_params.print_output:
        print_log += "output: " + log_params.output
    if print_log:
        if log_params.ret:
            log.dbg("%s", print_log)
        else:
            log.info("%s", print_log)
