#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.

rl schedule search, tss
"""

import datetime

from schedule_search import log
from schedule_search import tune_util
from schedule_search.log import LOGGING_INSTANCE
from schedule_search.atc_rl_manager import atc_rl_search
from tbe.common.rl_bank.rl_bank import get_bank_name


def msoptune(res_list: list, option: dict, op_config_list: list) -> tuple:
    """
    msoptune 调优，只搜索调用ATC接口
    :param res_list: 算子输出tensor列表
    :param option: 推理选项
    :param op_config_list: 每个算子独有的一些配置
    :return: T/F, best_path_list
    """
    LOGGING_INSTANCE.info("RL tune info: msoptune tune start.")
    log.info("RL tune info: msoptune tune start, output_tensor_list: %s, option: %s.", res_list, option)
    atc_rl_search.infer(res_list, option, op_config_list)
    # search
    ret, best_path_list, op_schedule_infos_list = atc_rl_search.search(res_list, option, op_config_list)
    if not ret:
        LOGGING_INSTANCE.warning("RL tune info: msoptune tune exit.")
        log.warn("RL tune info: msoptune tune exit.")
        return False, best_path_list

    # 检查更新bank
    op_mode = option.get("op_mode", "")
    update_msoptune_bank(best_path_list, op_config_list, op_schedule_infos_list, op_mode)
    LOGGING_INSTANCE.info("RL tune info: msoptune tune end.")
    log.info("RL tune info: msoptune tune end.")
    return True, best_path_list


def update_msoptune_bank(best_path_list: list,
                         op_config_list: list,
                         op_schedule_infos_list: list,
                         op_mode: str) -> None:
    """
    msoptune检查最优调度更新到bank
    :param best_path_list: 最优调度路径列表
    :param op_config_list: 每个算子独有的一些配置
    :param op_schedule_infos_list: op schedule info class
    :param op_mode: op mode
    :return:
    """
    log.info("RL tune info: update_msoptune_bank begin, best_path_list: %s.", best_path_list)
    for idx, best_path in enumerate(best_path_list):
        kernel_name = op_config_list[idx].get("kernel_name", "default")
        best_tick, best_sch_path, base_tick = tune_util.get_best_from_infer_search(best_path, None)
        bank_name = get_bank_name(op_mode)
        custom_bank_file = '{}_{}'.format(bank_name, datetime.datetime.now().strftime('%Y%m%d_%H%M%S_%f'))
        op_schedule_info = op_schedule_infos_list[idx][0]
        op_info_str = "{}@{}@{}".format(kernel_name, op_schedule_info.op_name, op_schedule_info.shape_list_str)
        bank_info = tune_util.BankInfo(custom_bank_file, 'custom', op_mode)
        msg_info = "best tick: %s, base tick: %s, bank file: %s" % (best_tick, base_tick, custom_bank_file)

        if tune_util.add_best_to_bank((best_tick, base_tick), best_sch_path, op_info_str, bank_info):
            LOGGING_INSTANCE.info("RL tune info: %s rl tune succ, %s.", kernel_name, msg_info)
            log.info("RL tune info: %s rl tune succ, %s.", kernel_name, msg_info)
        else:
            log.info("RL tune info: no better strategy found, kernel_name: %s, %s.", kernel_name, msg_info)
