#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import os
import sys
import subprocess


# Merger模块入口统一配置在这里
MERGERS = ["rl_bank_merge.py",
           "../auto_tune/repo_merge_ga.py",
           "../optune_utils/repository_manager_merge.py"]


def check_merge_src_path(src_path: str) -> str:
    """

    :return:
    """
    src_path_list = src_path.split(":")
    valid_path_list = []
    for each_src_path in src_path_list:
        if not os.path.isdir(each_src_path) \
                or not os.access(each_src_path, os.R_OK | os.X_OK):
            print("Invalid src_path:%s, please make sure src_path exists and "
                  "check the permissions" % each_src_path)
            continue

        valid_path_list.append(each_src_path)

    return ":".join(valid_path_list)


def merge() -> int:
    """
    离线知识库合并
    :return:
    """
    if len(sys.argv) < 4:
        print("Src path and dst path are both required!")
        print_help()
        return -1

    ori_src_path = sys.argv[2]
    src_path = check_merge_src_path(ori_src_path)
    if not src_path:
        print("No valid path in src_path: %s" % ori_src_path)
        print_help()
        return -1

    sys.argv[2] = src_path
    dst_path = os.path.realpath(sys.argv[3])
    if not os.path.isdir(dst_path) or \
            not os.access(dst_path, os.R_OK | os.W_OK | os.X_OK):
        print("Invalid dst_path:%s, please make sure dst_path exists and "
              "check the permissions" % dst_path)
        print_help()
        return -1

    pipes = []
    curr_file_path = os.path.dirname(os.path.realpath(__file__))
    for merger in MERGERS:
        merger_path = os.path.join(curr_file_path, merger)
        pipe = subprocess.Popen(["python3", merger_path, *sys.argv[2:]],
                                shell=False)
        pipes.append(pipe)

    for pipe in pipes:
        pipe.communicate()
    return 0


def print_help():
    """
    使用方式打印
    :return:
    """
    print('')
    print('Usage: python msoptune.py [options] <args>')
    print('')
    print(' Welcome to use msoptune tool.')
    print('')
    print(' --merge          Merge src bank with built-in bank, dump the '
          'result to dst bank. You should figure out src and dst.')
    print('')
    return 0


def print_help_tip():
    """
    print help tip
    """
    print('')
    print('Try "python msoptune.py --help" for more information.')
    print('')


def main():
    """
    离线模式总入口
    :return:
    """
    if len(sys.argv) < 2:
        print('Invalid msoptune cmd. Missing parameters.')
        print_help_tip()
        return -1

    func_dict = {
                 '--merge': merge,
                 '--help': print_help,
                 }
    if sys.argv[1] in func_dict:
        return func_dict[sys.argv[1]]()

    expired_func_list = ['--start', '--stop', '--summary']
    if sys.argv[1] in expired_func_list:
        print('[WARNING][%s] is expired function, please use AOE tool instead.' % sys.argv[1])
    else:
        print('[ERROR]Unknown msoptune cmd: [%s]' % sys.argv[1])
    print_help_tip()
    return -1


if __name__ == '__main__':
    sys.exit(main())
