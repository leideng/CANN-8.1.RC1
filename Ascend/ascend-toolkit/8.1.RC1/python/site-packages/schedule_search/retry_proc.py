#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""

from schedule_search import log


def get_all_choice(input_data, ret_list, y_idx=0, tmp_list=None):
    """

    :param input_data:
    :param ret_list:
    :param y_idx:
    :param tmp_list:
    :return:
    """
    if not input_data:
        return []

    if tmp_list is None:
        tmp_list = []
    max_y_idx = len(input_data) - 1
    for x_value in input_data[y_idx]:
        tmp_list.append(x_value)
        if y_idx == max_y_idx:
            ret_list.append([*tmp_list])
        else:
            get_all_choice(input_data, ret_list, y_idx + 1, tmp_list)
        tmp_list.pop()

    return ret_list


def get_retry_option(retry_t2c_rules):
    """

    :param option:
    :return:
    """
    option_list = []
    if not retry_t2c_rules:
        return option_list
    retry_rule_list = list(retry_t2c_rules.values())
    all_choice_list = []
    get_all_choice(retry_rule_list, all_choice_list)
    for choice_list in all_choice_list:
        curr_option = {}
        for choice_dict in choice_list:
            for key, value in choice_dict.items():
                curr_option[key] = value
        # 全为False的情况属于正常流程，不需要再retry
        if curr_option and set(curr_option.values()) == set([False]):
            continue
        option_list.append(curr_option)
    log.dbg("option_list: %s", option_list)
    return option_list


def add_retry_option(retry_t2c_rules, retry_type, retry_options):
    """

    :param option:
    :param retry_type:
    :param retry_options:
    :return:
    """
    if retry_type in retry_t2c_rules:
        log.dbg("retry_type: %s already in retry_t2c_rules", retry_type)
        return False
    if not isinstance(retry_options, list):
        log.warn("type of retry_options must be list!")
        return False
    retry_t2c_rules[retry_type] = retry_options
    return True
