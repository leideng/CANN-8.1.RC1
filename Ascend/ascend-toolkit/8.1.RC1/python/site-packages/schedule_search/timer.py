#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import datetime
import os
import sys
import time
from functools import wraps
from logging import DEBUG
from logging import Formatter
from logging import getLogger
from logging.handlers import RotatingFileHandler
from absl import flags

from schedule_search.config import WORKSPACE
from schedule_search.util import create_dir

FLAGS = flags.FLAGS

USE_TIMER = False
TIMMER_LOGGER = getLogger(datetime.datetime.now().strftime('%Y%m%d_%H%M%S%f'))
TIMMER_FORMAT = '{}\t{:<20}\t{}\t{}'


def set_timer_logger():
    """

    :return:
    """
    workspace = WORKSPACE
    if 'workspace' in FLAGS:
        workspace = FLAGS.workspace
    try:
        log_path = os.path.join(workspace, "timer",
                                "%s.log" % TIMMER_LOGGER.name)
        create_dir(os.path.dirname(log_path))
        TIMMER_LOGGER.propagate = False
        TIMMER_LOGGER.setLevel(DEBUG)
        # 暂时不回滚
        time_hander = RotatingFileHandler(log_path, maxBytes=0, backupCount=10)
        formatter_str = '%(message)s'
        formatter = Formatter(formatter_str)
        time_hander.setFormatter(formatter)
        TIMMER_LOGGER.handlers = []
        TIMMER_LOGGER.addHandler(time_hander)
    except (OSError, AttributeError):
        return


def get_sample_id() -> str:
    """
    get sample_id
    """
    sample_id = 'timer'
    if USE_TIMER:
        # 当前函数调用栈顶部
        frame = sys._getframe(1)
        while frame:
            if 'sample_id' in frame.f_locals:
                sample_id = frame.f_locals['sample_id']
                break
            # 当前函数没有sample_id，再看父函数
            frame = frame.f_back
    return sample_id


def timer(timer_name=""):  # pylint: disable=W0613
    """

    :param timer_name:
    :return:
    """
    def decorate(func):
        """

        :param func:
        :return:
        """
        @wraps(func)
        def wrapper(*args, **kwargs):
            """

            :param args:
            :param kwargs:
            :return:
            """
            # 1、每一个采样进程一个id，进而可以分析一次sample的耗时
            sample_id = get_sample_id()

            # 2、打印耗时
            start_time = time.time()
            output = func(*args, **kwargs)
            end_time = time.time()
            nonlocal timer_name
            if not timer_name:
                timer_name = getattr(func, '__name__', 'unknown')
            TIMMER_LOGGER.debug(
                TIMMER_FORMAT.format(sample_id, timer_name, start_time,
                                     end_time - start_time))
            return output

        return wrapper

    return decorate
