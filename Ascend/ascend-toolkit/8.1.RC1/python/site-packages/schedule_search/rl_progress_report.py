#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the base class for tuners
"""
import re
from schedule_search import log

SCHEDULE = "Schedule"


def report_rl_tune_progress(progress_q: object, cbkey: str, time_out: int, state: str) -> None:
    """
    report rl tune state to progress
    :param progress_q: communicate que for multi thread
    :param cbkey: operator cbkey string
    :param state: tuning state: start, skip, end
    """
    if progress_q:
        tmp_tune_msg = {}
        tmp_tune_msg["RL"] = (cbkey, time_out, state)
        progress_q.put(tmp_tune_msg)
        log.dbg("RL tune info: cbkey:%s, time_out:%s, state:%s", cbkey, time_out, state)


def report_rl_tune_result(op_schedule_info: object,
                          tune_report_info_q: object,
                          update_bank : bool,
                          tune_op_succ: bool,
                          job_id: str) -> None:
    """
    report rl tune result after tune
    :param progress_q: communicate que for multi thread
    :param single_op_schedule_infos
    :param update_bank
    :param tune_op_succ
    :param job_id
    """
    status_data = {}
    res_data = {}
    report_info = {}
    hit_bank = op_schedule_info.option.get("hit_bank", False)
    op_type = op_schedule_info.option.get("op_type", "").split("__")
    op_type_print = op_type[0] if len(op_type) == 1 else op_type
    build_op_name = op_schedule_info.option.get("profiling_name", "")

    status_data["bank_hit"] = hit_bank
    status_data["bank_update"] = False
    status_data["bank_append"] = False
    status_data["bank_reserved"] = hit_bank
    status_data["bank_unsatisfied"] = False

    if update_bank:
        res_data["performance_after_tune(us)"] = op_schedule_info.best_tick
        res_data["performance_before_tune(us)"] = op_schedule_info.base_tick
        res_data["performance_improvement"] = "{:.2%}".format( \
                        (op_schedule_info.base_tick - op_schedule_info.best_tick) / op_schedule_info.best_tick)
        if hit_bank:
            status_data["bank_update"] = True
            status_data["bank_reserved"] = False
        else:
            status_data["bank_append"] = True
        res_data["update_mode"] = "update" if status_data.get("bank_update", False) else "add"
    if not update_bank and not hit_bank and tune_op_succ:
        status_data["bank_unsatisfied"] = True

    if tune_report_info_q:
        report_info = {"job_id": job_id,
                       "tune_mode": SCHEDULE,
                       "op_type": op_type_print,
                       "op_name": build_op_name,
                       "tune_op_succ": tune_op_succ,
                       "status_data": status_data,
                       "result_data": res_data
                      }
        tune_report_info_q.put(report_info)
