#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from dataclasses import make_dataclass

# vector的规格
VECTOR_BLOCK_NUM = 16

# 每个stage最多8根轴
AXIS_CNT = 8
# op len
OP_LEN = 1
# data type长度
DTYPE_LEN = 3
# depend的个数
DEPEND_LEN = 50
# 每个depend代表的依赖位数
DEPEND_BITS = 8
# Factor最大定为256*1024
MAX_FACTOR = 256 * 1024
# RL搜索支持最大stage个数
MAX_ORIGIN_STAGE_CNT = DEPEND_LEN * DEPEND_BITS // 2
# 无效的at axis
INVALID_AT_AXIS = 65535
# default insn index
DEFAULT_INSN_INDEX = 0


class ActionTensorCfg:
    """
    ActionTensorCfg
    """
    # 每个stage要采样的action序列长度：5根轴两轮split，两次reorder，一次at,
    # one emit_insn, two trs_reorder
    action_len = AXIS_CNT * 2 + AXIS_CNT * 2 + 1 + 1 + AXIS_CNT * 2
    split_factor_s = 0
    split_factor_e = AXIS_CNT * 2 - 1
    reorder_s = AXIS_CNT * 2
    reorder_e = AXIS_CNT * 4 - 1
    at_s = AXIS_CNT * 4
    at_e = AXIS_CNT * 4
    emit_insn_s = AXIS_CNT * 4 + 1
    emit_insn_e = AXIS_CNT * 4 + 1
    # reorder for trs-class op,
    # this reorder has an effect on input/output tensor,
    # so apply for an independent axis_len
    trs_reorder_s = AXIS_CNT * 4 + 1 + 1
    trs_reorder_e = AXIS_CNT * 4 + 1 + 1 + AXIS_CNT * 2 - 1

    def useless_func1(self):
        """
        useless_func1
        :return:
        """
        return self.action_len

    def useless_func2(self):
        """
        useless_func2
        :return:
        """
        return self.at_e


class FeatureTensorCfg:
    """
    FeatureTensorCfg
    """
    # 每个stage的feature序列的长度
    featurn_len = AXIS_CNT * 2 + DTYPE_LEN * 2 + OP_LEN + DEPEND_LEN
    axis_s = 0
    axis_e = AXIS_CNT - 1
    reduce_axis_s = AXIS_CNT
    reduce_axis_e = AXIS_CNT * 2 - 1
    compute_s = AXIS_CNT * 2
    compute_e = AXIS_CNT * 2
    input_dtype_s = AXIS_CNT * 2 + OP_LEN
    input_dtype_e = AXIS_CNT * 2 + OP_LEN + DTYPE_LEN - 1
    output_dtpye_s = AXIS_CNT * 2 + OP_LEN + DTYPE_LEN
    output_dtpye_e = AXIS_CNT * 2 + OP_LEN + DTYPE_LEN * 2 - 1
    deps_s = AXIS_CNT * 2 + OP_LEN + DTYPE_LEN * 2
    deps_e = AXIS_CNT * 2 + OP_LEN + DTYPE_LEN * 2 + DEPEND_LEN - 1

    def useless_func1(self):
        """
        useless_func1
        :return:
        """
        return self.featurn_len

    def useless_func2(self):
        """
        useless_func2
        :return:
        """
        return self.deps_s


class AxisInfo:  # pylint: disable=R0902
    """
    AxisInfo
    """
    def __init__(  # pylint: disable=R0913
            self,
            axis_name,
            axis_len,
            axis_type,
            axis_index,
            axis_attr,
            axis_body=None,
            sub_axis_split=None,
            sub_axis_factor=None):
        self.name = axis_name  # axis的名字
        self.len = axis_len  # axis的长度
        self.type = axis_type  # axis类型
        self.index = axis_index  # axis原始index信息
        self.attr = axis_attr  # axis属性，比如o/i/io/ii
        self.body = axis_body  # axis 实体类，用于runtime时操作stage时使用
        self.sub_axis_split = sub_axis_split  # 切分子轴的tag，如N, C, H, W等
        self.sub_axis_factor = sub_axis_factor  # 切分子轴的切分因子

    def __str__(self):
        print_str = "name: %s, len: %s, type: %s, index: %s, attr: %s, " \
                    "body: %s, sub_axis_split: %s, " \
                    "sub_axis_factor: %s" % (self.name, self.len, self.type,
                                             self.index, self.attr, self.body,
                                             self.sub_axis_split,
                                             self.sub_axis_factor)
        return print_str

    def useless_func1(self):
        """
        useless_func1
        :return:
        """
        return self.name

    def useless_func2(self):
        """
        useless_func2
        :return:
        """
        return self.type


SplitInfo = make_dataclass("SplitInfo", ["split_stage_axis", "split_stage_name", "split_stage_axis_index"])
