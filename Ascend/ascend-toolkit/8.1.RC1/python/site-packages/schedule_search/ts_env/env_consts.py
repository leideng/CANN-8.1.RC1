#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.estimator.evb import evb_host

DEFAULT_INPUT_DATA_HEADER = "default_input@" \
                            + evb_host.DEFAULT_INPUT_DATA_VERSION
COMM_REDUCE_TAG = 'comm_reduce_idx'
MODE_RUNTIME = "runtime"
MODE_OFFLINE = "offline"

# 数据比对的模式
CHECK_OUTPUT_TYPE_NONE = 0
CHECK_OUTPUT_TYPE_MEMCMP = 1
CHECK_OUTPUT_TYPE_ELEMENT_CHECK = 2
CHECK_OUTPUT_TYPE_SUM_CHECK = 3

RETRY_TIMES = 3
VIRTUAL_LEAF_OUT_TAG = "elewise_empty_intrin"
OP_IMPLEMENT_IMPORT_HEADER = '''\
# -*- coding: UTF-8 -*-
import tbe
from tbe import tvm
from tbe.common.platform.platform_info import set_current_compile_soc_info
from tbe.common.buildcfg import dynamic_build_config_dict
from tbe.common.buildcfg import build_config

{set_product}
'''
OP_IMPLEMENT_FUNC_HEADER = '''\
def op_cce({api_def_args}, kernel_name="{kernel_name}", 
           need_build=False, need_print=False):
'''
OP_IMPLEMENT_HEADER = OP_IMPLEMENT_IMPORT_HEADER + OP_IMPLEMENT_FUNC_HEADER

OP_IMPLEMENT_TAIL = '''
    config = dict()
    config["print_ir"] = need_print
    config["need_build"] = need_build,
    config["name"] = kernel_name
    config["tensor_list"] = {tensor_list}
    config["bool_storage_as_1bit"] = False
    with build_config(kernel_meta_parent_dir=kmp_dir):
        tbe.dsl.build(sch, config)
'''

OP_DYNAMIC_COMPILE_TAIL = '''
    with build_config(**dynamic_build_config_dict):
        tvm.build(sch, 
                  {tensor_list}, 
                  target="cce", 
                  name=kernel_name, )
'''

OP_FUNC_CALL = '''
op_cce({api_run_args}, kernel_name="{kernel_name}", 
       need_build={need_build}, need_print={need_print})
'''

TIK_DSL_CALL = '''
    from impl.{op_name} import {op_name}
    from tbe.common.rl_bank import bank_manager
    import os
    import inspect
    if os.getenv("schedule_debug", "false").lower() == "true":
        from tbe.common.rl_bank.cheque import gen_cheque_by_code
        with open(__file__, "r") as file_handler:
            file_content = file_handler.read()
        code_lines = file_content.split("\\n")
        schedule_codes_list = []
        for i, code_line in enumerate(code_lines):
            if code_line.startswith("def dsl_func_"):
                start = i
            elif code_line == "    return sch":
                end = i
                schedule_codes_list.append(code_lines[start: end + 1])
        print("===========build from schedule==============")
        for schedule_codes in schedule_codes_list:
            cheque_list = gen_cheque_by_code(schedule_codes, kernel_name)
            bank_manager.set_cheque_list(cheque_list)
    else:
        for cheque_list in CHEQUE_LISTS:
            bank_manager.set_cheque_list(cheque_list)

    func_args_len = len(inspect.signature({op_name}).parameters)
    op_args = list({input})
    if len(op_args) >= func_args_len:
        op_args = op_args[:func_args_len - 1]
    op_args.append(kernel_name)
    {op_name}(*op_args)
'''

TIK_DSL_GOLDEN_HEADER = '''import sys
import numpy as np
sys.path.append('{opp_path}')
from impl.{op_name} import {op_name}_np

if __name__ == '__main__':
'''
