#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque
from schedule_search.ts_env.cheque_generator import get_reuseby_cheque


def is_phony_insn(t2c_params, stages_info, stage_index):
    '''
    判断是否是空指令
    '''
    if t2c_params.stage.op.tag == "phony_insn":
        return True

    # virtual_leaf_out需要映射为空指令
    fanout_stage_indices = t2c_params.op_schedule_info.real_fanout_dict[
        stage_index]
    phony_insn = False
    for fanout_stage_index in fanout_stage_indices:
        try:
            stage_types = stages_info[fanout_stage_index].get('type', [])
            if 'virtual_leaf_out' in stage_types:
                phony_insn = True
                break
        # PlaceHolder
        except ValueError:
            continue
        finally:
            pass
    return phony_insn


def proc(t2c_params): # pylint: disable=R0912
    """

    :param t2c_params:
    :return:
    """
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    stages_info = t2c_params.stages_info
    axis_info_list = t2c_params.axis_info_list

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    phony_insn = is_phony_insn(t2c_params, stages_info, stage_index)
    if not phony_insn:
        return True

    axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage, stage_index, axis_info_list, stages_info[stage_index])
    # virtual_leaf_out需要映射为空指令
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, 'phony_insn')
    t2c_params.code_lines.append("sch[%s].emit_insn(%s, 'phony_insn')" %
                                 (stage_name, emit_insn_axis))

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, 'phony_insn',
                         (emit_insn_axis, axis_num))
    # 添加resued_by
    if t2c_params.stage.op.tag == "phony_insn":
        fanin_list = t2c_params.op_schedule_info.real_fanin_dict[
            stage_index]
        # WTODO: 这里只针对了rnnv3做了特殊处理，不具备通用性
        reuse_src_index = fanin_list[1]
        reuse_src_stage = t2c_params.schedule.stages[reuse_src_index]
        reuse_src_stage_name = t2c_params.stages_info[reuse_src_index]['name']
        if proc_sch:
            reuse_src_stage.reused_by(stage.op.output(0))
            stage.reused_by(reuse_data=True)
        t2c_params.code_lines.append(
            "sch[%s].reused_by(%s)" %
            (reuse_src_stage_name, stage_name))
        t2c_params.code_lines.append("sch[%s].reused_by(reuse_data=True)" %
                                     (stage_name))
        # 生成reused_by对应的cheque
        get_reuseby_cheque(t2c_params,
                           reuse_src_index,
                           dst_stage_index=stage_index)
        get_reuseby_cheque(t2c_params, stage_index, reuse_data=True)
    t2c_params.proc_flag_dict[stage_index] = True
    return True
