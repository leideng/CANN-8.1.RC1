#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg
from schedule_search.ts_env.tensor_to_code import t2c_util as util
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque
from schedule_search.ts_env.cheque_generator import get_axis_index


def is_with_bias(t2c_params, stage_index):
    '''

    :param t2c_params:
    :param stage_index:
    :return:
    '''
    op_schedule_info = t2c_params.op_schedule_info
    real_fanouts = op_schedule_info.real_fanout_dict[stage_index]
    stages_info = t2c_params.op_schedule_info.stages_info
    for fanout_index in real_fanouts:
        stage_info = stages_info[fanout_index]
        if stage_info.get('tag') == 'mad_add_bias':
            return True
    return False


def get_mad_emit_insn_axis(stage_axis_info_list):
    '''
    mad stage对应的轴
    '''
    # mad只支持6根轴做指令映射，无脑取倒数第六根轴做映射即可
    axis_info = stage_axis_info_list[-6]
    emit_insn_axis = axis_info.name
    emit_insn_axis_obj = axis_info.body
    axis_num = len(stage_axis_info_list) - 6
    return axis_num, emit_insn_axis, emit_insn_axis_obj


def proc(t2c_params):  # pylint: disable=R0914, R0912
    """

    :param t2c_params:
    :return:
    """
    features = t2c_params.features
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    axis_info_list = t2c_params.axis_info_list
    proc_sch = bool(mode == MODE_RUNTIME)

    intrin = t2c_params.op_schedule_info.op_intrin_key_index[
        features[stage_index][FeatureTensorCfg.compute_s]].intrin
    if intrin != 'mad':
        return True

    axis_num, emit_insn_axis, emit_insn_axis_obj = get_mad_emit_insn_axis(
        axis_info_list[stage_index])

    compute = t2c_params.op_schedule_info.op_intrin_key_index[
        features[stage_index][FeatureTensorCfg.compute_s]].op_tag
    if compute == "conv_mad":
        mad_pattern = 2
    elif compute == "gemv_mad":
        mad_pattern = 1
    else:
        mad_pattern = 0
    kout_axis_name_list = []
    kout_axis_list = []
    # mad指令要求标记k轴的o轴
    stage_axes = t2c_params.leveled_axis_for_reorder[stage_index]
    axes = t2c_params.outer_axis_infos[stage_name]
    axes += stage_axes[util.AXIS_LEVEL_IIO_INDEX]
    kout_axis_obj_list = []
    for axis_info in axes:
        if axis_info.type == "reduce_axis":
            kout_axis_obj_list.append(axis_info)
            kout_axis_name_list.append(axis_info.name)
            kout_axis_list.append(axis_info.body)
    mad_dict_str = """mad_dict = {"mad_pattern": %d, "k_outer": [%s]}"""\
                   % (mad_pattern, ", ".join(kout_axis_name_list))

    mad_dict = {"mad_pattern": mad_pattern, "k_outer": kout_axis_list}
    if is_with_bias(t2c_params, stage_index):
        mad_dict_str = mad_dict_str.replace("}", ''', "init_bias": 1}''')
        mad_dict["init_bias"] = 1

    t2c_params.code_lines.append(mad_dict_str)
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, "mad", mad_dict)

    log.dbg("mad axis for %s: %s, axis_num:%s", stage.op.name, emit_insn_axis, axis_num)
    t2c_params.code_lines.append("sch[%s].emit_insn(%s, 'mad', mad_dict)" %
                                 (stage_name, emit_insn_axis))

    # 生成emit_insn对应的cheque
    extra_info = {"kout_axis_obj_list": kout_axis_obj_list, "init_bias": 0}
    extra_info.update(mad_dict)
    axis_index = get_axis_index(axis_info_list[stage_index], emit_insn_axis)
    get_emit_insn_cheque(t2c_params, stage_index, 'mad', (emit_insn_axis, axis_index), extra_info)

    t2c_params.proc_flag_dict[stage_index] = True
    return True
