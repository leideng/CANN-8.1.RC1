#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque


def proc(t2c_params):  # pylint: disable=R0914
    """

    :param t2c_params:
    :return:
    """
    features = t2c_params.features
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    stages_info = t2c_params.stages_info
    axis_info_list = t2c_params.axis_info_list
    proc_sch = bool(mode == MODE_RUNTIME)

    intrin = t2c_params.op_schedule_info.op_intrin_key_index[
        features[stage_index][FeatureTensorCfg.compute_s]].intrin
    if intrin != 'set_fmatrix':
        return True

    attr_dict = t2c_params.op_schedule_info.conv_param_dict[stage_index]

    setfmatrix_dict = {
        'conv_kernel_h': attr_dict['conv_kernel_h'],
        'conv_kernel_w': attr_dict['conv_kernel_w'],
        'conv_padding_top': attr_dict['conv_padding_top'],
        'conv_padding_bottom': attr_dict['conv_padding_bottom'],
        'conv_padding_left': attr_dict['conv_padding_left'],
        'conv_padding_right': attr_dict['conv_padding_right'],
        'conv_stride_h': attr_dict['conv_stride_h'],
        'conv_stride_w': attr_dict['conv_stride_w'],
        'conv_dilation_h': attr_dict['conv_dilation_h'],
        'conv_dilation_w': attr_dict['conv_dilation_w'],
        'conv_fm_c': attr_dict['conv_fm_c'],
        'conv_fm_h': attr_dict['conv_fm_h'],
        'conv_fm_w': attr_dict['conv_fm_w']
    }
    setfmatrix_dict_str = "setfmatrix_dict = {}".format(str(setfmatrix_dict))
    t2c_params.code_lines.append(setfmatrix_dict_str)

    axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage, stage_index, axis_info_list, stages_info[stage_index])
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, "set_fmatrix", setfmatrix_dict)

    log.dbg("set_fmatrix axis for %s: %s, axis_num:%s", stage.op.name,
            emit_insn_axis, axis_num)
    t2c_params.code_lines.append("sch[%s].emit_insn(%s, 'set_fmatrix', "
                                 "setfmatrix_dict)" %
                                 (stage_name, emit_insn_axis))

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, 'set_fmatrix',
                         (emit_insn_axis, axis_num))

    t2c_params.proc_flag_dict[stage_index] = True
    return True
