#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque


def proc(t2c_params):  # pylint: disable=R0914,R0912
    """
    conv_l1fuse_reshape上一级目录不是L1 scope时，需要映射为dma指令
    """
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage_name = t2c_params.stage_name
    stage = t2c_params.stage
    axis_info_list = t2c_params.axis_info_list

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    stage_tag = t2c_params.stages_info[stage_index]["tag"]
    if stage_tag != "conv_l1fuse_reshape":
        return True

    fanin_list = t2c_params.op_schedule_info.real_fanin_dict[stage_index]
    if t2c_params.stages_info[fanin_list[0]].get("scope") == "local.L1":
        return True

    intrinsic_func_name = "dma_copy"

    insn_axis_idx, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage,
        stage_index,
        axis_info_list,
        t2c_params.stages_info[stage_index])

    tsrz_line = "sch[%s].emit_insn(%s, '%s')" % (stage_name, emit_insn_axis,
                                                 intrinsic_func_name)
    t2c_params.code_lines.append(tsrz_line)

    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, intrinsic_func_name)

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, intrinsic_func_name,
                         (emit_insn_axis, insn_axis_idx))

    t2c_params.proc_flag_dict[stage_index] = True
    return True
