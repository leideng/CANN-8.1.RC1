#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import copy
from schedule_search import log
from schedule_search.ts_env.cheque_generator import get_tbe_compile_para_cheque
from schedule_search.retry_proc import add_retry_option
from schedule_search import op_cfg


# tbe compile parameters which need to retry, there are three parameters:
# pipline_opt, read_write_bank_conflict, out_of_order
# currently, only 'out_of_order' is enabled.
DEFAULT_TBE_COMPILE_PARA = {
    "out_of_order": False
}


def get_all_options(key_num):
    """
    Given option counts, return all possible choices
    """
    if key_num <= 1:
        return [[True], [False]]
    res = get_all_options(key_num - 1)
    res2 = copy.deepcopy(res)
    for ele in res:
        ele.append(True)
    for ele in res2:
        ele.append(False)
    res.extend(res2)
    return res


def get_tbe_para_option(options):
    """
    Get tbe para options, set to default if not found
    """
    opt = {}
    for key, value in DEFAULT_TBE_COMPILE_PARA.items():
        opt[key] = options.get(key, value)
    return opt


def proc(t2c_params):  # pylint: disable=R0914,R0912
    """
    sch.tbe_compile_para
    """
    tbe_compile_para = t2c_params.op_schedule_info.option.get(
        'tbe_compile_para')
    if not tbe_compile_para:
        return True
    if t2c_params.op_schedule_info.op_name not in op_cfg.RNN_OP_LIST:
        return True
    sch = t2c_params.schedule
    tbe_para = get_tbe_para_option(t2c_params.op_schedule_info.option)
    log.dbg("@@@@ tbe_compile_para: %s", tbe_para)
    get_tbe_compile_para_cheque(t2c_params, tbe_para)

    retry_options = []
    all_opt = get_all_options(len(DEFAULT_TBE_COMPILE_PARA))
    for opt in all_opt:
        para = {}
        for idx, key in enumerate(DEFAULT_TBE_COMPILE_PARA.keys()):
            para[key] = opt[idx]
        log.dbg("tb_para: %s", para)
        retry_options.append(para)

    add_retry_option(t2c_params.retry_t2c_rules, "tbe_compile_para",
                     retry_options)

    sch.tbe_compile_para = tbe_para

    t2c_params.code_lines.append('')
    tbe_compile_para_code = '''
    # tbe_compile_para code
    sch.tbe_compile_para = {tbe_para}
    '''
    code_str = tbe_compile_para_code.format(tbe_para=tbe_para)
    t2c_params.code_lines.append('%s' % code_str)
    log.dbg("#### code_str: %s", code_str)

    return True
