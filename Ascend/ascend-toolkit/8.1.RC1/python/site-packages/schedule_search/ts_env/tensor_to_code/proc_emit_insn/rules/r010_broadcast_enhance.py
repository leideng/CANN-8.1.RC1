#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env import broadcast_analysis
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque


def _is_special_broadcast_nist(stage,  # pylint: disable=R0912
                               op_schedule_info):
    # (1,1,1,3)->(32,224,224,3)
    if not stage.op.input_tensors:
        return False
    broadcast_flag = False
    broadcast_tensor = None
    for in_tensor in list(stage.op.input_tensors):
        if in_tensor.op.tag == "broadcast_for_tensor":
            broadcast_flag = True
            broadcast_tensor = in_tensor
            break
    if not broadcast_flag:
        return False
    if not broadcast_analysis.is_special_broadcast_nist([broadcast_tensor],
                                                        op_schedule_info):
        return False

    return True


def proc(t2c_params):  # pylint: disable=R0912
    """

    :param t2c_params:
    :return:
    """
    features = t2c_params.features
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    axis_info_list = t2c_params.axis_info_list

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    op_intrin_key_index = t2c_params.op_schedule_info.op_intrin_key_index
    intrinsic_func_name = op_intrin_key_index[features[stage_index][
        FeatureTensorCfg.compute_s]].intrin
    if intrinsic_func_name \
            not in broadcast_analysis.BROADCAST_ENHANCE_INSN_MAP.keys():
        return True

    # 特殊的broadcast nist需要映射为broadcast_enhance
    special_broadcast = t2c_params.op_schedule_info.broadcast_dict.get(
        'special_broadcast', None)
    if special_broadcast != 'special_broadcast_nist':
        return True

    if not _is_special_broadcast_nist(stage, t2c_params.op_schedule_info):
        return True

    intrinsic_func_name = broadcast_analysis.BROADCAST_ENHANCE_INSN_MAP.get(
        intrinsic_func_name)
    log.dbg("intrinsic_func_name: %s", intrinsic_func_name)
    axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage, stage_index, axis_info_list,
        t2c_params.stages_info[stage_index])
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, intrinsic_func_name)
    t2c_params.code_lines.append(
        "sch[%s].emit_insn(%s, '%s')" %
        (stage_name, emit_insn_axis, intrinsic_func_name))

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, intrinsic_func_name,
                         (emit_insn_axis, axis_num))

    t2c_params.proc_flag_dict[stage_index] = True
    return True
