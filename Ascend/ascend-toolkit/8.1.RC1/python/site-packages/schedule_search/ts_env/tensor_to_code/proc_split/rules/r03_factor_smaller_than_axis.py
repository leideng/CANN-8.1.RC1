#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import numpy as np

from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.ts_env.tensor_to_code import t2c_util
from schedule_search.timer import timer


def get_axis_len_list(op_schedule_info, stage_index):  # pylint: disable=R0912
    """

    :param op_schedule_info:
    :param stage_index:
    :return:
    """
    nonzero_axes = []
    stage_types = op_schedule_info.stages_info[stage_index].get('type', [])
    axis_num = t2c_util.max_axis()
    if 'reduce_atomic' in stage_types:
        split_axis_type = op_schedule_info.stages_info[stage_index].get(
            'split_axis_type', 'reduce_axis')
        shape_before_reduce = op_schedule_info.stages_info[stage_index].get(
            "shape_before_reduce", [])
        reduce_axis_indexs = op_schedule_info.stages_info[stage_index].get(
            "reduce_axis_indexs", [])
        is_keepdims = op_schedule_info.stages_info[stage_index].get(
            'is_keepdims', False)
        if split_axis_type == 'reduce_axis':
            for i, axis_len in enumerate(shape_before_reduce):
                if i in reduce_axis_indexs:
                    nonzero_axes.append(axis_len)
        else:
            for i, axis_len in enumerate(shape_before_reduce):
                if i not in reduce_axis_indexs:
                    nonzero_axes.append(axis_len)
                if i in reduce_axis_indexs:
                    if is_keepdims:
                        nonzero_axes.append(1)
    else:
        stage_fea = op_schedule_info.feature_tensor[stage_index]
        axis_list = stage_fea[:axis_num]
        if np.sum(stage_fea[axis_num:2 * axis_num]) > 0:
            axis_list = stage_fea[axis_num:2 * axis_num]
        for axis_len in axis_list:
            if axis_len > 0:
                nonzero_axes.append(axis_len)
            else:
                break
    axis_len_list = nonzero_axes + [0] * (axis_num - len(nonzero_axes))
    return axis_len_list


@timer('r03')
def proc(t2c_params):
    """
    规则内容：Factor应该不大于对应的轴长，否则将Factor置为轴长
    """
    # 输入
    sch = t2c_params.schedule
    for stage_index, stage in enumerate(sch.stages):
        if str(stage.op).startswith("placeholder"):
            continue
        # 先拿到轴长
        axis_len_list = get_axis_len_list(t2c_params.op_schedule_info,
                                          stage_index)

        # Reduce Stage的Split
        factor_num = ActionTensorCfg.split_factor_e + 1
        factor_num -= ActionTensorCfg.split_factor_s
        axis_num = t2c_util.max_axis()
        for buffer_depth in range(factor_num // axis_num):
            for axis_index in range(axis_num):
                axis_len = axis_len_list[axis_index]
                factor_index = buffer_depth * axis_num + axis_index
                factor_in_actions = t2c_params.cleaned_actions[stage_index][
                    factor_index]
                t2c_params.cleaned_actions[stage_index][factor_index] = min(
                    factor_in_actions, axis_len)
