#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.cheque_generator import get_bind_cheque
from schedule_search.ts_env.tensor_to_code.t2c_util import \
    gn_training_update_nchw
from tbe import tvm


def proc(t2c_params):  # pylint: disable=R0912
    """

    :param t2c_params:
    :return:
    """
    # lx fusion不使能多核
    if not gn_training_update_nchw(t2c_params.op_schedule_info):
        return True

    l1_fusion_dict = t2c_params.op_schedule_info.l1_fusion_dict
    if l1_fusion_dict["l1_fusion_type"] in [0, 1]:
        return True

    mode = t2c_params.mode
    # 1, 对第一根切分轴前面的轴进行fuse操作
    # 目前来看，一个算子有且只会有一个Bind的Stage，多了的话就会有问题，少了也不对
    stage, stage_index = t2c_params.bind_stages[0]
    stage_name = stage.op.name

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        log.dbg('Stage processed.')
        return True

    if stage_index in t2c_params.bind_axis:
        bind_axis_info = t2c_params.bind_axis[stage_index]
    else:
        bind_axis_info = t2c_params.axis_info_list[stage_index][0]

    # 4，进行Bind操作
    t2c_params.code_lines.append("block = tvm.te.thread_axis('blockIdx.x')")
    code_line = "sch[%s].bind(%s, block)" % (stage_name, bind_axis_info.name)
    t2c_params.code_lines.append(code_line)
    t2c_params.proc_flag_dict[stage_index] = True

    if mode == MODE_RUNTIME:
        block = tvm.te.thread_axis('blockIdx.x')
        stage.bind(bind_axis_info.body, block)

    # 生成bind操作对应的cheque
    get_bind_cheque(t2c_params, stage_index)

    return True
