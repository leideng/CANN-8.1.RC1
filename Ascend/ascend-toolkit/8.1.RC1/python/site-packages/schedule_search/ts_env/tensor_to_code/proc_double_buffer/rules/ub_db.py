#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.cheque_generator import get_double_buffer_cheque
from tbe import tvm


def is_need_db(stages_info, stage, stage_index, real_fanins):
    """

    :param stages_info:
    :param stage:
    :param stage_index:
    :return:
    """
    if not stage.op.name.endswith(".local.UB"):
        return False

    # 对cache read后的stage做double buffer
    if "CacheRead" in stages_info[stage_index].get('type', []):
        return True

    if "CacheWrite" in stages_info[stage_index].get('type', []):
        if not stage.op.input_tensors:
            return False
        if isinstance(stage.op.input_tensors[0].op, tvm.PlaceholderOp):
            return True
        # L0C往UB搬移也开启double buffer
        for real_fanin in real_fanins:
            if stages_info[real_fanin].get("scope") == "local.L0C":
                return True

    return False


def proc(t2c_params):
    """

    :param t2c_params:
    :return:
    """
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    stage_index = t2c_params.stage_index
    stages_info = t2c_params.stages_info
    real_fanins = t2c_params.op_schedule_info.real_fanin_dict[stage_index]
    if not is_need_db(stages_info, stage, stage_index, real_fanins):
        return True

    log.dbg('double_buffer stage_name: %s', stage_name)
    t2c_params.code_lines.append('sch[%s].double_buffer()' % stage_name)
    # 生成double_buffer对应的cheque
    get_double_buffer_cheque(t2c_params, stage_index)

    t2c_params.double_buffer_list.append(stage_name)

    if t2c_params.mode == MODE_RUNTIME:
        stage.double_buffer()
    return True
