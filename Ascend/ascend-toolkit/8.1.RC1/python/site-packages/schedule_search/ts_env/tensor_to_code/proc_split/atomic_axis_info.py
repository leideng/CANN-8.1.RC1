#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env import env_util
from schedule_search.ts_env.tensor_cfg import AxisInfo
from schedule_search.timer import timer


@timer()
def gen_ub_o_i_axis_info(t2c_params,
                         stage_axis_info,
                         rfactor_stage_index,
                         block_split_axis_index,
                         ub_split_info):
    '''
    获取o和i的axis_info
    '''
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    ub_split_axis_type = t2c_params.stages_info[rfactor_stage_index + 1].get(
        'split_axis_type', 'reduce_axis')
    if ub_split_axis_type == 'axis':
        axis_index = ub_split_info.axis_index
    elif block_split_axis_index == ub_split_info.axis_index:
        axis_index = len(rfactor_stage.op.reduce_axis) - 1
    else:
        axis_index = ub_split_info.axis_index - block_split_axis_index - 1
    outer_axis_info = AxisInfo(ub_split_info.outer_axis_name,
                               ub_split_info.axis_obj.dom.extent.value //
                               ub_split_info.factor,
                               ub_split_axis_type,
                               axis_index,
                               'o',
                               ub_split_info.outer_axis_obj)
    stage_axis_info.append(outer_axis_info)
    inner_axis_info = AxisInfo(ub_split_info.inner_axis_name,
                               ub_split_info.factor,
                               ub_split_axis_type,
                               axis_index,
                               'i',
                               ub_split_info.inner_axis_obj)
    stage_axis_info.append(inner_axis_info)


@timer()
def gen_axis_info(t2c_params,
                  code_lines,
                  stage_axis_info,
                  rfactor_stage_index,
                  axis_info):
    '''
    普通轴
    '''
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    rfactor_stage_name = t2c_params.stages_info[rfactor_stage_index].get(
        'name')
    axis_type, axis_index, axis_attr = axis_info
    axis_name = '%s_%s_%d' % (rfactor_stage_name, axis_type, axis_index)
    if axis_type == 'axis':
        axis_obj = rfactor_stage.op.axis[axis_index]
    else:
        axis_obj = rfactor_stage.op.reduce_axis[axis_index]
    code_lines.append('%s = sch[%s].op.%s[%d]' %
                      (axis_name, rfactor_stage_name, axis_type, axis_index))
    stage_axis_info.append(
        AxisInfo(axis_name,
                 axis_obj.dom.extent.value,
                 axis_type,
                 axis_index,
                 axis_attr,
                 axis_obj))


@timer()
def non_reduce_last_axis(t2c_params,
                         rfactor_stage_index,
                         block_split_axis_index,
                         ub_split_axis_index,
                         reduce_axis_info):
    '''
    处理非reduce last：reduce all、reduce nist，且ub切普通axis
    reorder顺序：(rbo_fused,ak,..,a2,rbi,rb-1,..,r1,a1_s,..,uo,ui,..,a1_e)
    '''
    # 入参
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    last_non_reduce_axis_s, last_non_reduce_axis_e = \
        env_util.find_last_none_reduce_axis(
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs)
    is_keepdims = len(reduce_axis_info.shape_before_reduce) == len(
        rfactor_stage.op.axis) - 1
    last_non_reduce_axis = env_util.find_none_reduce_axis_index(
        last_non_reduce_axis_s,
        reduce_axis_info.shape_before_reduce,
        reduce_axis_info.reduce_axis_indexs,
        is_keepdims=is_keepdims)

    # 记录axis的index和type，后续统一生成axis_info
    axis_list = []

    # rbo_fused，为普通轴的最后一个
    axis_list.append(('axis', len(rfactor_stage.op.axis) - 1, 'all'))

    # ak,..,a2，只需要添加ak
    if len(rfactor_stage.op.axis) > 2 and last_non_reduce_axis > 0:
        axis_list.append(('axis', 0, 'all'))

    # rbi，为reduce轴的最后一个
    axis_list.append(('reduce_axis',
                      len(rfactor_stage.op.reduce_axis) - 1,
                      'c'))

    # rb-1,..,r1
    for index in range(block_split_axis_index,
                       len(rfactor_stage.op.reduce_axis) +
                       block_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # a1_s,..,uo,ui,..,a1_e
    for index in range(last_non_reduce_axis_s, last_non_reduce_axis_e + 1):
        axis_index = env_util.find_none_reduce_axis_index(
            index,
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs,
            is_keepdims=is_keepdims)
        if axis_index == ub_split_axis_index:
            axis_list.append(('outer_inner', None, None))
            continue
        axis_list.append(('axis', axis_index, 'all'))

    return axis_list


@timer()
def non_reduce_last_reduce_axis(t2c_params,
                                rfactor_stage_index,
                                block_split_axis_index,
                                ub_split_axis_index,
                                reduce_axis_info):
    '''
    处理非reduce last：reduce all、reduce nist，且ub切reduce axis
    reorder顺序：(rbo_fused,ak,..,a2,rbi,rb-1,..,ru+1,(ruo,rui),ru-1,..,r1,a1)
    '''
    # 入参
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    last_non_reduce_axis_s, last_non_reduce_axis_e = \
        env_util.find_last_none_reduce_axis(
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs)
    is_keepdims = len(reduce_axis_info.shape_before_reduce) == len(
        rfactor_stage.op.axis) - 1
    last_non_reduce_axis = env_util.find_none_reduce_axis_index(
        last_non_reduce_axis_s,
        reduce_axis_info.shape_before_reduce,
        reduce_axis_info.reduce_axis_indexs,
        is_keepdims=is_keepdims)

    # 记录axis的index和type，后续统一生成axis_info
    axis_list = []

    # rbo_fused，为普通轴的最后一个
    axis_list.append(('axis', len(rfactor_stage.op.axis) - 1, 'all'))

    # ak,..,a2，只需要添加ak
    if len(rfactor_stage.op.axis) > 2 and last_non_reduce_axis > 0:
        axis_list.append(('axis', 0, 'all'))

    # rbi，为reduce轴的最后一个
    if block_split_axis_index != ub_split_axis_index:
        axis_list.append(('reduce_axis',
                          len(rfactor_stage.op.reduce_axis) - 1,
                          'c'))

    # rb-1,..,ru+1
    for index in range(block_split_axis_index, ub_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # ruo,rui
    axis_list.append(('outer_inner', None, None))

    # ru-1,..,r1
    for index in range(ub_split_axis_index,
                       len(rfactor_stage.op.reduce_axis) +
                       block_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # a1
    for index in range(last_non_reduce_axis_s, last_non_reduce_axis_e + 1):
        axis_index = env_util.find_none_reduce_axis_index(
            index,
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs,
            is_keepdims=is_keepdims)
        axis_list.append(('axis', axis_index, 'all'))

    return axis_list


@timer()
def non_reduce_last_proc(t2c_params,
                         rfactor_stage_index,
                         block_split_axis_index,
                         ub_split_axis_index,
                         reduce_axis_info):
    '''
    处理非reduce last：reduce all、reduce nist
    '''
    ub_split_axis_type = t2c_params.stages_info[rfactor_stage_index + 1].get(
        'split_axis_type', 'reduce_axis')
    log.dbg('non_reduce_last & %s', ub_split_axis_type)
    if ub_split_axis_type == 'axis':
        axis_list = non_reduce_last_axis(t2c_params,
                                         rfactor_stage_index,
                                         block_split_axis_index,
                                         ub_split_axis_index,
                                         reduce_axis_info)
    else:
        axis_list = non_reduce_last_reduce_axis(t2c_params,
                                                rfactor_stage_index,
                                                block_split_axis_index,
                                                ub_split_axis_index,
                                                reduce_axis_info)
    return axis_list


@timer()
def reduce_last_axis(t2c_params,  # pylint: disable=R0912
                     rfactor_stage_index,
                     block_split_axis_index,
                     ub_split_axis_index,
                     reduce_axis_info):
    '''
    处理reduce last，且ub切普通axis
    reorder顺序：(rbo_fused,ak,..,a2,rbi,rb-1,..,r2,a1_s,..,uo,ui,..,a1_e,r1)
    '''
    # 入参
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    last_non_reduce_axis_s, last_non_reduce_axis_e = \
        env_util.find_last_none_reduce_axis(reduce_axis_info.shape_before_reduce,
                                            reduce_axis_info.reduce_axis_indexs)
    is_keepdims = len(reduce_axis_info.shape_before_reduce) == len(rfactor_stage.op.axis) - 1
    last_non_reduce_axis = env_util.find_none_reduce_axis_index(
        last_non_reduce_axis_s, reduce_axis_info.shape_before_reduce,
        reduce_axis_info.reduce_axis_indexs, is_keepdims=is_keepdims)
    if last_non_reduce_axis_s == 0:
        # a1 r1，没有r2
        second_last_reduce_axis_index = block_split_axis_index
    else:
        second_last_reduce_axis_index = \
            reduce_axis_info.reduce_axis_indexs.index(last_non_reduce_axis_s - 1)

    # 记录axis的index和type，后续统一生成axis_info
    axis_list = []

    # rbo_fused，为普通轴的最后一个
    axis_list.append(('axis', len(rfactor_stage.op.axis) - 1, 'all'))

    # ak,..a2，只需要添加ak
    if len(rfactor_stage.op.axis) > 3 and last_non_reduce_axis > 0:
        axis_list.append(('axis', 0, 'all'))

    # rbi，为reduce轴的最后一个
    axis_list.append(('reduce_axis', len(rfactor_stage.op.reduce_axis) - 1, 'c'))

    # rb-1,..,r2
    for index in range(block_split_axis_index, second_last_reduce_axis_index):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    if last_non_reduce_axis > ub_split_axis_index:
        axis_list.append(('outer_inner', None, None))

    # a1_s,..,uo,ui,..,a1_e
    for index in range(last_non_reduce_axis_s, last_non_reduce_axis_e + 1):
        axis_index = env_util.find_none_reduce_axis_index(
            index, reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs, is_keepdims=is_keepdims)
        if axis_index == ub_split_axis_index:
            axis_list.append(('outer_inner', None, None))
            continue
        axis_list.append(('axis', axis_index, 'all'))

    if ('outer_inner', None, None) not in axis_list:
        axis_list.append(('outer_inner', None, None))

    # r1
    for index in range(second_last_reduce_axis_index,
                       len(rfactor_stage.op.reduce_axis) + block_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    return axis_list


@timer()
def _block_ub_a1_r1(axis_list,  # pylint: disable=R0913
                    block_split_axis_index, ub_split_axis_index,
                    second_last_reduce_axis_index, last_non_reduce_axis_s,
                    last_non_reduce_axis_e, reduce_axis_info, is_keepdims,
                    rfactor_stage):
    # rb-1,..,ru+1
    for index in range(block_split_axis_index, ub_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # ruo,rui
    axis_list.append(('outer_inner', None, None))

    # ru-1,..,r2
    for index in range(ub_split_axis_index,
                       second_last_reduce_axis_index):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # a1
    for index in range(last_non_reduce_axis_s,
                       last_non_reduce_axis_e + 1):
        axis_index = env_util.find_none_reduce_axis_index(
            index,
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs,
            is_keepdims=is_keepdims)
        axis_list.append(('axis', axis_index, 'all'))

    # r1
    for index in range(second_last_reduce_axis_index,
                       len(rfactor_stage.op.reduce_axis) +
                       block_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))


@timer()
def _block_a1_ub(axis_list,  # pylint: disable=R0913
                 block_split_axis_index, ub_split_axis_index,
                 second_last_reduce_axis_index, last_non_reduce_axis_s,
                 last_non_reduce_axis_e, reduce_axis_info, is_keepdims,
                 rfactor_stage):
    # rb-1,..,r2
    for index in range(block_split_axis_index,
                       second_last_reduce_axis_index):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # a1
    for index in range(last_non_reduce_axis_s,
                       last_non_reduce_axis_e + 1):
        axis_index = env_util.find_none_reduce_axis_index(
            index,
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs,
            is_keepdims=is_keepdims)
        axis_list.append(('axis', axis_index, 'all'))

    # r1.k,..,ru+1
    for index in range(second_last_reduce_axis_index,
                       ub_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))

    # ruo,rui
    axis_list.append(('outer_inner', None, None))

    # ru-1,..,r1.1
    for index in range(
            ub_split_axis_index,
            len(rfactor_stage.op.reduce_axis) +
            block_split_axis_index - 1):
        axis_index = index - block_split_axis_index
        axis_list.append(('reduce_axis', axis_index, 'c'))


@timer()
def reduce_last_reduce_axis(t2c_params,
                            rfactor_stage_index,
                            block_split_axis_index,
                            ub_split_axis_index,
                            reduce_axis_info):
    '''
    处理reduce last，且ub切reduce axis
    reorder顺序：(rbo_fused,ak,..,a2,rbi,rb-1,..,(ruo,rui),..,a1,r1)
    '''
    # 入参
    rfactor_stage = t2c_params.schedule.stages[rfactor_stage_index]
    last_non_reduce_axis_s, last_non_reduce_axis_e = \
        env_util.find_last_none_reduce_axis(
            reduce_axis_info.shape_before_reduce,
            reduce_axis_info.reduce_axis_indexs)
    is_keepdims = len(reduce_axis_info.shape_before_reduce) == len(
        rfactor_stage.op.axis) - 1
    last_non_reduce_axis = env_util.find_none_reduce_axis_index(
        last_non_reduce_axis_s,
        reduce_axis_info.shape_before_reduce,
        reduce_axis_info.reduce_axis_indexs,
        is_keepdims=is_keepdims)
    if last_non_reduce_axis_s == 0:
        # a1 r1，没有r2
        second_last_reduce_axis_index = block_split_axis_index
    else:
        second_last_reduce_axis_index = \
            reduce_axis_info.reduce_axis_indexs.index(
                last_non_reduce_axis_s - 1)

    # 记录axis的index和type，后续统一生成axis_info
    axis_list = []

    # rbo_fused，为普通轴的最后一个
    axis_list.append(('axis', len(rfactor_stage.op.axis) - 1, 'all'))

    # ak,..a2，只需要添加ak
    if len(rfactor_stage.op.axis) > 3 and last_non_reduce_axis > 0:
        axis_list.append(('axis', 0, 'all'))

    # rbi，为reduce轴的最后一个
    if block_split_axis_index != ub_split_axis_index:
        axis_list.append(('reduce_axis',
                          len(rfactor_stage.op.reduce_axis) - 1,
                          'c'))

    # block ub a1 r1
    if second_last_reduce_axis_index >= ub_split_axis_index:
        _block_ub_a1_r1(axis_list, block_split_axis_index, ub_split_axis_index,
                        second_last_reduce_axis_index, last_non_reduce_axis_s,
                        last_non_reduce_axis_e, reduce_axis_info, is_keepdims,
                        rfactor_stage)
    # block a1 ub
    else:
        _block_a1_ub(axis_list, block_split_axis_index, ub_split_axis_index,
                     second_last_reduce_axis_index, last_non_reduce_axis_s,
                     last_non_reduce_axis_e, reduce_axis_info, is_keepdims,
                     rfactor_stage)
    return axis_list


@timer()
def reduce_last_proc(t2c_params,
                     rfactor_stage_index,
                     block_split_axis_index,
                     ub_split_axis_index,
                     reduce_axis_info):
    '''
    处理reduce last
    '''
    ub_split_axis_type = t2c_params.stages_info[rfactor_stage_index + 1].get(
        'split_axis_type', 'reduce_axis')
    log.dbg('reduce_last & %s', ub_split_axis_type)
    if ub_split_axis_type == 'axis':
        axis_list = reduce_last_axis(t2c_params,
                                     rfactor_stage_index,
                                     block_split_axis_index,
                                     ub_split_axis_index,
                                     reduce_axis_info)
    else:
        axis_list = reduce_last_reduce_axis(t2c_params,
                                            rfactor_stage_index,
                                            block_split_axis_index,
                                            ub_split_axis_index,
                                            reduce_axis_info)
    return axis_list


@timer()
def get_rfactor_stage_axis_info(t2c_params,  # pylint: disable=R0913
                                code_lines,
                                rfactor_stage_index,
                                block_split_axis_index,
                                ub_split_info,
                                reduce_axis_info):
    '''
    获取rfactor_stage的axis_info，注意顺序是最终reorder的顺序，不要随便调整
    普通轴：(ak,..a2,a1,rbo_fused)
    reduce轴：(rb-1,.. ,(ruo,rui),..,r2,r1,rbi))
    '''
    # reduce all、reduce nist
    if len(reduce_axis_info.shape_before_reduce) == len(
            reduce_axis_info.reduce_axis_indexs) or \
            len(reduce_axis_info.shape_before_reduce) - 1 not in \
            reduce_axis_info.reduce_axis_indexs:
        axis_list = non_reduce_last_proc(t2c_params,
                                         rfactor_stage_index,
                                         block_split_axis_index,
                                         ub_split_info.axis_index,
                                         reduce_axis_info)
    # reduce last
    else:
        axis_list = reduce_last_proc(t2c_params,
                                     rfactor_stage_index,
                                     block_split_axis_index,
                                     ub_split_info.axis_index,
                                     reduce_axis_info)
    log.dbg('axis_list: %s', axis_list)

    stage_axis_info = []
    for axis in axis_list:
        if axis[0] == 'outer_inner':
            gen_ub_o_i_axis_info(t2c_params,
                                 stage_axis_info,
                                 rfactor_stage_index,
                                 block_split_axis_index,
                                 ub_split_info)
        else:
            gen_axis_info(t2c_params,
                          code_lines,
                          stage_axis_info,
                          rfactor_stage_index,
                          axis)

    return stage_axis_info


@timer()
def get_write_stage_axis_info(t2c_params,
                              code_lines,
                              reduce_write_stage_index):
    '''
    获取gm cache write stage的axis_info，注意顺序是最终reorder的顺序，不要随便调整
    # 普通轴：(ak,..,a2,a1)
    # reduce轴：(rbo_fused)
    # reorder顺序：(rbo_fused,ak,..,a2,a1)
    '''
    stage_axis_info = []

    reduce_write_stage = t2c_params.schedule.stages[reduce_write_stage_index]
    reduce_write_stage_name = t2c_params.stages_info[
        reduce_write_stage_index].get('name')

    # rbo_fused
    for axis_index, axis_obj in enumerate(reduce_write_stage.op.reduce_axis):
        axis_name = '%s_reduce_axis_%d' % (reduce_write_stage_name, axis_index)
        code_lines.append('%s = sch[%s].op.reduce_axis[%d]' %
                          (axis_name, reduce_write_stage_name, axis_index))
        stage_axis_info.append(
            AxisInfo(axis_name,
                     axis_obj.dom.extent.value,
                     'reduce_axis',
                     axis_index,
                     'all',
                     axis_obj))

    # ak,..,a2,a1
    for axis_index, axis_obj in enumerate(reduce_write_stage.op.axis):
        axis_name = '%s_axis_%d' % (reduce_write_stage_name, axis_index)
        code_lines.append('%s = sch[%s].op.axis[%d]' %
                          (axis_name, reduce_write_stage_name, axis_index))
        stage_axis_info.append(
            AxisInfo(axis_name,
                     axis_obj.dom.extent.value,
                     'axis',
                     axis_index,
                     'all',
                     axis_obj))

    return stage_axis_info
