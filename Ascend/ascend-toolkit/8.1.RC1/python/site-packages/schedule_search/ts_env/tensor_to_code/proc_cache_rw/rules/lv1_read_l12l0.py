#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.tensor_to_code import t2c_util as util
from schedule_search.ts_env.tensor_to_code.proc_cache_rw.main import \
    gen_cache_rw_info
from tbe.common.platform import platform_info


def condition_check(input_dict):
    """

    :param input_dict:
    :param output_tensors:
    :return:
    """
    cache_level = input_dict["cache_level"]
    tensor = input_dict["tensor"]
    tensor_name = tensor.op.name
    stage_info = input_dict["stage_info"]
    stage_tag = stage_info.get("tag")
    consumer_stages_info = input_dict["consumer_stages_info"]

    if cache_level != 1:
        log.dbg("Op name:%s, Cache Level:%s not 1, no need read L1->L0!",
                tensor_name, cache_level)
        return False

    if not tensor_name.endswith(platform_info.scope_cbuf):
        log.dbg("Cache Level 2, Only Do Cache Read From L1, Tensor Name:%s",
                tensor_name)
        return False

    if not consumer_stages_info:
        log.dbg("tensor:%s has No output tensor", tensor_name)
        return False

    if consumer_stages_info[0].get('tag') not in util.NEED_READ_L1_TO_L0_TAGS:
        log.dbg("cache_level: %s, op_name: %s, tag: %s, need read L1->L0, "
                "consumer_tag: %s!", cache_level, tensor_name, stage_tag,
                consumer_stages_info[0].get('tag'))
        return False

    return True


def get_scope(input_dict):
    """
    从L1 cache read L0，需要确认是L0A,还是L0B
    :param tensor:
    :param output_tensors:
    :return:
    """
    stage_info = input_dict['stage_info']
    all_tensors = input_dict["all_tensors"]
    output_tensors = [
        all_tensors[consumer.index]
        for consumer in stage_info["at_info"].consumers
    ]

    tensor = input_dict['tensor']
    tensor_name = tensor.op.name
    index = 0
    for index in range(len(output_tensors[0].op.input_tensors)):
        if tensor_name == output_tensors[0].op.input_tensors[index].op.name:
            break

    # tensor是其输出的第一个输入，则是L0A，否则是L0B
    if index == 0:
        buf = platform_info.scope_ca
    else:
        buf = platform_info.scope_cb

    return buf


def proc(input_dict):
    """
    进行cache read操作
    :param input_dict:
    :return:
    """
    if not condition_check(input_dict):
        return False

    # 获取cache read buf
    scope = get_scope(input_dict)

    return gen_cache_rw_info(input_dict["tensor"], input_dict["all_tensors"],
                             "CacheRead", scope, input_dict['stage_info'])
