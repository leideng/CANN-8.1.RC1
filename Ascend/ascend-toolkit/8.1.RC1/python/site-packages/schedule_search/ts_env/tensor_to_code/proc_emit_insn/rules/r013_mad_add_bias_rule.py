#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import comm
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.\
    r02_mad_axis import get_mad_emit_insn_axis
from schedule_search.ts_env.tensor_to_code.proc_reuse.rules.\
    comm import get_reuse_index
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque
from schedule_search.ts_env.cheque_generator import get_pragma_cheque
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg


def stage_pragma_proc(stage_index, pragma_type, pragma_value, t2c_params):
    '''
    :param stage_index:
    :param pragma_type:
    :param pragma_value:
    :param t2c_params:
    :return:
    '''
    stage = t2c_params.schedule.stages[stage_index]
    stage_name = t2c_params.op_schedule_info.stages_info[stage_index]['name']
    axis_info_list = t2c_params.axis_info_list

    intrin = t2c_params.op_schedule_info.op_intrin_key_index[
        t2c_params.features[stage_index][FeatureTensorCfg.compute_s]].intrin
    if intrin == 'mad':
        axis_num, emit_insn_axis, emit_insn_axis_obj = get_mad_emit_insn_axis(
            axis_info_list[stage_index])
    else:
        axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
            stage, stage_index, axis_info_list,
            t2c_params.stages_info[stage_index])

    t2c_params.code_lines.append("sch[%s].pragma(%s, '%s', %s)" % (
        stage_name, emit_insn_axis, pragma_type, pragma_value))

    if t2c_params.mode == MODE_RUNTIME:
        stage.pragma(emit_insn_axis_obj, pragma_type, pragma_value)

    # 生成pragma对应的cheque
    get_pragma_cheque(t2c_params, stage_index, pragma_type,
                      (emit_insn_axis, axis_num), pragma_value)


def pragma_proc(t2c_params, stage_index): # pylint: disable=R0912
    '''
    :param t2c_params:
    :return:
    '''
    stages_info = t2c_params.op_schedule_info.stages_info
    reuse_index = get_reuse_index(t2c_params, stage_index)
    fanin_list = t2c_params.op_schedule_info.real_fanin_dict[stage_index]
    for idx in fanin_list + [stage_index]:
        info = stages_info[idx]
        if idx in t2c_params.inlined_stages:
            continue
        # tensor_bias_l0c_l pragma reuse_output
        if info.get('tag') == 'ub_to_l0':
            pragma_type = 'reuse_output'
        # subtensor_c pragma replace_output
        elif info.get('tag') in comm.MAD_TAG_LIST:
            pragma_type = 'replace_output'
        # tensor_c_add_bias_l pragma replace_output
        elif info.get('tag') == 'mad_add_bias':
            pragma_type = 'replace_output'
        stage_pragma_proc(idx, pragma_type, reuse_index, t2c_params)


def proc(t2c_params):
    """
    gemm_add_bias的一些处理
    """
    stages_info = t2c_params.op_schedule_info.stages_info
    stage_index = t2c_params.stage_index
    c_op = t2c_params.op_schedule_info.c_op

    # 前面规则处理过的stage直接跳过
    # 只处理gemm
    # 只处理tensor_c_add_bias_l
    if t2c_params.proc_flag_dict.get(t2c_params.stage_index, False) or \
            c_op not in comm.MAD_OP_ID_LIST or \
            stages_info[t2c_params.stage_index].get('tag') != 'mad_add_bias':
        return True

    # tensor_c_add_bias_l映射为phony_insn
    intrin = 'phony_insn'
    axis_num, emit_insn_axis, emit_insn_axis_obj = \
        get_emit_insn_axis(t2c_params.stage, t2c_params.stage_index,
                           t2c_params.axis_info_list, stages_info[stage_index])
    t2c_params.code_lines.append("sch[%s].emit_insn(%s, '%s')" % (
        t2c_params.stage_name, emit_insn_axis, intrin))
    if t2c_params.mode == MODE_RUNTIME:
        t2c_params.stage.emit_insn(emit_insn_axis_obj, intrin)
    get_emit_insn_cheque(t2c_params, t2c_params.stage_index, intrin,
                         (emit_insn_axis, axis_num))
    t2c_params.proc_flag_dict[t2c_params.stage_index] = True

    pragma_proc(t2c_params, t2c_params.stage_index)

    return True
