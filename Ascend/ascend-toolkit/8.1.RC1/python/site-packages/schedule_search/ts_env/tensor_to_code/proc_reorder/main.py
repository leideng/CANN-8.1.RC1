#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import copy
from schedule_search import log
from schedule_search.timer import timer
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.ts_env.tensor_to_code import t2c_util
from schedule_search.ts_env.cheque_generator import get_axis_index
from schedule_search.ts_env.cheque_generator import get_reorder_cheque


def update_outer_axis_infos(sub_axis_info_list, axis_info, outer_axis_infos,
                            code_line):
    """

    :param sub_axis_info_list:
    :param axis_info:
    :param outer_axis_infos:
    :param code_line:
    :return:
    """
    for sub_axis_info in sub_axis_info_list:
        if axis_info.type == sub_axis_info.type and \
                axis_info.index == sub_axis_info.index and \
                sub_axis_info not in outer_axis_infos:
            code_line.append("%s, " % sub_axis_info.name)
            outer_axis_infos.append(sub_axis_info)
    return code_line


@timer('reorder')
def proc(t2c_params, rules): # pylint: disable=R0912,R0914,R0915
    """
    处理Reorder操作
    """
    sch = t2c_params.schedule
    mode = t2c_params.mode
    stages_info = t2c_params.stages_info
    outer_axis_infos = t2c_params.outer_axis_infos

    t2c_params.code_lines.extend(['\n', '# reorder code'])
    code_lines = []
    new_axis_info_list = copy.deepcopy(t2c_params.axis_info_list)

    # 轴数
    axis_num = t2c_util.max_axis()
    # 层数
    layer_num = (ActionTensorCfg.reorder_e + 1 -
                 ActionTensorCfg.reorder_s) // axis_num

    # 调用各个Rule，对Action进行清洗
    for rule in rules:
        module = __import__(rule, fromlist=['1'])
        module.proc(t2c_params)

    # reorder
    stages = list(sch.stages)
    for stage_index, stage in enumerate(stages):
        if t2c_params.axis_info_list[stage_index] is None:
            continue

        # 1、没有需要reoder的axis跳过
        leveled_axis = t2c_params.leveled_axis_for_reorder[stage_index]
        need_reorder = False
        for each_level in leveled_axis:
            if each_level:
                need_reorder = True
                break
        if not need_reorder:
            continue

        stage_name = stages_info[stage_index]['name']
        code_line = ['sch[%s].reorder(' % stage_name]
        new_stage_axis_list = []

        # 2、oo轴
        for axis_info in leveled_axis[t2c_util.AXIS_LEVEL_OO_INDEX]:
            code_line.append("%s, " % axis_info.name)
            new_stage_axis_list.append(axis_info)

        # 3、逐层做reorder动作
        axis_order = t2c_params.cleaned_actions[stage_index][
            ActionTensorCfg.reorder_s:ActionTensorCfg.reorder_e + 1]
        sub_axis_info_list = leveled_axis[t2c_util.AXIS_LEVEL_SUB_AXIS_INDEX]
        outer_axis_infos.setdefault(stage_name, [])
        for layer_index in range(layer_num):
            for axis_index in axis_order[layer_index *
                                         axis_num:(layer_index + 1) *
                                         axis_num]:
                # 注意：action tensor中的reorder顺序是指leveled_axis中各成员的顺序，
                # 不是轴的index顺序
                if axis_index < len(leveled_axis[layer_index]):
                    axis_info = leveled_axis[layer_index][axis_index]
                    code_line = update_outer_axis_infos(
                        sub_axis_info_list, axis_info,
                        outer_axis_infos[stage_name], code_line)
                    outer_axis_infos[stage_name].append(axis_info)
                    code_line.append("%s, " % axis_info.name)
                    new_stage_axis_list.append(axis_info)

        # 4、把后续的轴层顺序加上
        for leveled_axis_info_list in \
                leveled_axis[layer_num:t2c_util.AXIS_LEVEL_SUB_AXIS_INDEX]:
            for axis_info in leveled_axis_info_list:
                code_line.append("%s, " % axis_info.name)
                new_stage_axis_list.append(axis_info)

        code_line.append('%s' % ')')
        code_lines.append(''.join(code_line))
        new_axis_info_list[stage_index] = new_stage_axis_list

        # 5、runtime模式
        if mode == MODE_RUNTIME:
            axis_reorder_list = [
                axis_info.body
                for axis_info in new_stage_axis_list
            ]
            stage.reorder(*axis_reorder_list)

        # 6、生成reorder操作对应的cheque
        order = []
        stage_axis_list = t2c_params.axis_info_list[stage_index]
        ori_order_axis_list = t2c_util.get_ori_order(stage_axis_list)
        for tmp_axis_info in new_stage_axis_list:
            axis_index = get_axis_index(ori_order_axis_list,
                                        tmp_axis_info.name)
            order.append(axis_index)
        get_reorder_cheque(t2c_params, stage_index, order)

    t2c_params.code_lines.extend(code_lines)
    t2c_params.ori_axis_info_list = t2c_params.axis_info_list
    t2c_params.axis_info_list = new_axis_info_list
    log.dbg("proc reorder end.")

    return True
