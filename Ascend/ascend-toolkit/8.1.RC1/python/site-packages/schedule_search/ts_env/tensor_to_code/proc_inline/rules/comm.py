#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""


def is_special_stage(t2c_params, stage_index):
    """
    特殊节点不需要inline
    """
    stage_info = t2c_params.stages_info[stage_index]
    special_types = {'leaf', 'inter_out', 'origin_leaf_out', 'workspace'}
    special_stage = len(set(stage_info.get('type', [])) & special_types) > 0
    if special_stage:
        return True
    return False


def add_fanin_proc(stage, fanins, input_tensors, ori_stage_tensors, index):
    '''
    判断fanin的处理逻辑
    '''
    for idx in range(stage.op.num_outputs):
        if stage.op.output(idx) in ori_stage_tensors:
            fanins.append(index)
            break
        if stage.op.output(idx) in input_tensors:
            if ".local." in stage.op.name:
                fanins.append(index)
                break
            for input_tensor in stage.op.input_tensors:
                ori_stage_tensors.append(input_tensor)
            break


def add_fanout_proc(stage, fanouts, stage_tensors, ori_stage_tensors, index):
    '''
    判断fanout的处理逻辑
    '''
    for input_tensor in stage.op.input_tensors:
        if input_tensor in ori_stage_tensors:
            fanouts.append(index)
            break
        # 跳过cache_write之前的自己
        if input_tensor in stage_tensors:
            if ".local." in stage.op.name:
                fanouts.append(index)
                break
            for idx in range(stage.op.num_outputs):
                ori_stage_tensors.append(stage.op.output(idx))
            break


def get_real_fanin_fanout(sch, stage_index):
    """
    获取非cache_read/write出来的原始的父子节点
    :param sch:
    :param stage_index:
    :return:
    """
    stages = list(sch.stages)
    stage = stages[stage_index]
    stage_tensors = []
    for idx in range(stage.op.num_outputs):
        stage_tensors.append(stage.op.output(idx))
    ori_stage_tensors = []
    ori_fanin_stage_tensors = []
    input_tensors = []
    for input_tensor in stage.op.input_tensors:
        input_tensors.append(input_tensor)

    fanouts = []
    fanins = []
    for i in range(stage_index - 1, -1, -1):
        each_stage = stages[i]
        add_fanin_proc(each_stage, fanins, input_tensors,
                       ori_fanin_stage_tensors, i)
    for i in range(stage_index + 1, len(stages)):
        each_stage = stages[i]
        add_fanout_proc(each_stage, fanouts, stage_tensors, ori_stage_tensors,
                        i)

    return fanins, fanouts
