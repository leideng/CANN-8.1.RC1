#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.timer import timer


@timer('bind')
def proc(t2c_params, rules):  # pylint: disable=R0912
    """

    :param t2c_params:
    :param rules:
    :return:
    """
    sch = t2c_params.schedule
    stages_info = t2c_params.stages_info
    tiling_case = t2c_params.op_schedule_info.tiling_case
    stages = list(sch.stages)
    t2c_params.code_lines.extend(['\n', '# bind code'])
    proc_ret = True
    if not t2c_params.proc_flag_dict:
        t2c_params.proc_flag_dict = {}

    if tiling_case > 0:
        # bind reduce轴时，仅reduce输出的的cache_write需要bind
        for stage_index, stage in enumerate(stages):
            stage_info = stages_info[stage_index]
            special_stage = set(stage_info.get('type',
                                               [])) & {'reduce_atomic_write'}
            if special_stage:
                t2c_params.bind_stages.append((stage, stage_index))
                # 只能有一个stage绑定多核
                break
    else:
        # 所有的叶子stage、叶子分叉stage都需要bind
        for stage_index, stage in enumerate(stages):
            stage_info = stages_info[stage_index]
            special_stage = set(stage_info.get('type', [])) & {'leaf'}
            if special_stage:
                t2c_params.bind_stages.append((stage, stage_index))

    log.dbg('bind_stages: %s', t2c_params.bind_stages)

    for rule in rules:
        rule_module = __import__(rule, fromlist=['1'])
        ret = rule_module.proc(t2c_params)
        if not ret:
            proc_ret = False

    log.dbg('bind done!')
    log.dbg('code_lines: %s' % ("\n".join(t2c_params.code_lines)))
    return proc_ret
