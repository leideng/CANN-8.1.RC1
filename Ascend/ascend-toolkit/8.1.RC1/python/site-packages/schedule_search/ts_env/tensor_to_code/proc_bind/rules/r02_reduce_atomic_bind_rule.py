#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.cheque_generator import get_bind_cheque
from tbe import tvm


def proc(t2c_params):
    """
    reduce atomic的多核规则
    :param t2c_params:
    :return:
    """
    tiling_case = t2c_params.op_schedule_info.tiling_case
    if not tiling_case > 0:
        return True

    # 只能有一个stage绑定多核
    bind_stage, bind_stage_index = t2c_params.bind_stages[0]

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(bind_stage_index, False):
        return True

    bind_stage_name = t2c_params.stages_info[bind_stage_index]['name']
    log.dbg("bind_stage: %s, bind_stage_index: %s, bind_stage_name: %s",
            bind_stage, bind_stage_index, bind_stage_name)
    mode = t2c_params.mode

    t2c_params.code_lines.append("block = tvm.te.thread_axis('blockIdx.x')")
    # 绑定到唯一的一根reduce轴上
    t2c_params.code_lines.append(
        "sch[%s].bind(%s.op.reduce_axis[0], block)" %
        (bind_stage_name, bind_stage_name))

    t2c_params.proc_flag_dict[bind_stage_index] = True

    if mode == MODE_RUNTIME:
        block = tvm.te.thread_axis('blockIdx.x')
        bind_stage.bind(bind_stage.op.reduce_axis[0], block)

    # 生成bind操作对应的cheque
    get_bind_cheque(t2c_params, bind_stage_index)

    return True
