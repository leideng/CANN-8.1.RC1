#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque


def proc(t2c_params):  # pylint: disable=R0912
    """
    softmax_cross_entropy_with_logits
    1、reduce_sum -> reduce_last_axis_reduce_sum_2
    2、reduce_max -> reduce_last_axis_reduce_max_2
    """
    features = t2c_params.features
    mode = t2c_params.mode
    stage = t2c_params.stage
    stage_index = t2c_params.stage_index
    stage_name = t2c_params.stage_name
    axis_info_list = t2c_params.axis_info_list
    op_intrin_key_index = t2c_params.op_schedule_info.op_intrin_key_index
    op_name = t2c_params.op_schedule_info.op_name

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    # 只处理softmax_cross_entropy_with_logits
    if op_name != 'softmax_cross_entropy_with_logits':
        return True

    # 只处理reduce_sum_last、reduce_max_last的stage
    compute = op_intrin_key_index[features[stage_index][
        FeatureTensorCfg.compute_s]].op_tag
    if not compute.startswith('reduce_sum_last') \
            and not compute.startswith('reduce_max_last'):
        return True

    # 轴被切了会报错
    if axis_info_list[stage_index]:
        return True

    if compute.startswith('reduce_sum_last'):
        intrin = 'reduce_last_axis_reduce_sum_2'
    if compute.startswith('reduce_max_last'):
        intrin = 'reduce_last_axis_reduce_max_2'

    axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage, stage_index, axis_info_list,
        t2c_params.stages_info[stage_index])

    t2c_params.code_lines.append("sch[%s].emit_insn(%s, '%s')" %
                                 (stage_name, emit_insn_axis, intrin))
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, intrin)

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, intrin,
                         (emit_insn_axis, axis_num))
    t2c_params.proc_flag_dict[stage_index] = True
    return True
