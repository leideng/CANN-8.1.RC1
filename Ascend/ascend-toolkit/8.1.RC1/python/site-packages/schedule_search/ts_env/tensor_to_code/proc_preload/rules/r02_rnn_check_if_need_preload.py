#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import op_cfg
from schedule_search import log
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.cheque_generator import get_preload_cheque
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg


def get_fanin_list(t2c_params, stage_index, all_fanin_list, history_set):
    """
    :param t2c_params:
    :param stage_index:
    :param all_fanin_list:
    :return:
    """
    fanin_list = t2c_params.op_schedule_info.all_fanin_dict[stage_index]
    all_fanin_list.extend(fanin_list)
    all_fanin_list = list(set(all_fanin_list))
    for idx in fanin_list:
        if idx in history_set:
            continue
        history_set.add(idx)
        get_fanin_list(t2c_params, idx, all_fanin_list, history_set)


def proc(t2c_params):  # pylint: disable=R0912
    """
    :param t2c_params:
    :return:
    """
    stage = t2c_params.stage
    stage_index = t2c_params.stage_index
    stage_name = t2c_params.stage_name

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    op_name = t2c_params.op_schedule_info.op_name
    intrin = t2c_params.op_schedule_info.op_intrin_key_index[
        t2c_params.features[stage_index][FeatureTensorCfg.compute_s]].intrin
    if op_name in op_cfg.RNN_OP_LIST and intrin == 'mad' \
            and stage.op.name.endswith(".local.L0C"):
        all_fanin_list = []
        history_set = {stage_index}
        get_fanin_list(t2c_params, stage_index, all_fanin_list, history_set)
        need_preload = True
        for fanin_index in all_fanin_list:
            stage = t2c_params.schedule.stages[fanin_index]
            if stage.op.name.endswith(".local.UB"):
                need_preload = False
                break

        if need_preload:
            log.dbg("%s enable preload. %s", stage_name, stage.op.name)
            code_line = 'sch[%s].preload()' % stage_name
            t2c_params.code_lines.append(code_line)
            # 生成preload对应的cheque
            get_preload_cheque(t2c_params, stage_index)
            if t2c_params.mode == MODE_RUNTIME:
                stage.preload()
        else:
            # do not turn on preload if there's ub dependency, as tbe pass
            # will not turn on out_or_order
            log.dbg("%s do not preload", stage_name)

        t2c_params.proc_flag_dict[stage_index] = True

    return True
