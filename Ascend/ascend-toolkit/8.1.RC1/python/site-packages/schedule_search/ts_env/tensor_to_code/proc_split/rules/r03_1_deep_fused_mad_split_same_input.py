#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.timer import timer
from schedule_search import comm
from schedule_search import log
import schedule_search.ts_env.tensor_to_code.t2c_util as t2c_util


def get_input_from_output(t2c_params, set_fmatrix_index, stage_index,
                          m_axis_index):    # pylint: disable=R0914
    '''
    根据输出howo的factor，计算输入的factor
    '''
    op_schedule_info = t2c_params.op_schedule_info
    at_target = op_schedule_info.at_dict[stage_index]
    m_factor = t2c_params.cleaned_actions[at_target][
        ActionTensorCfg.split_factor_s + m_axis_index]
    if set_fmatrix_index is None:
        return m_factor

    conv_param_dict = op_schedule_info.conv_param_dict[set_fmatrix_index]
    pad_h = conv_param_dict["conv_padding_top"] + conv_param_dict[
        "conv_padding_bottom"]
    kernel_h = conv_param_dict["conv_kernel_h"]
    dilation_h = conv_param_dict["conv_dilation_h"]
    stride_h = conv_param_dict["conv_stride_h"]

    # wo不切分，因此只考虑切Ho
    ho_factor = int(m_factor / conv_param_dict["wo"].value)
    hi_factor = (ho_factor - 1) * stride_h + (kernel_h -
                                              1) * dilation_h + 1 - pad_h
    log.dbg("ho_factor: %s, hi_factor: %s", ho_factor, hi_factor)
    return (hi_factor * conv_param_dict["conv_fm_w"]).value


@timer('r3_1')
def proc(t2c_params):
    '''
    规则内容：多个mad深度融合场景下，L1层的M轴切分有关联，以最后一个stage为准
    '''
    # 输入
    sch = t2c_params.schedule
    op_schedule_info = t2c_params.op_schedule_info
    if op_schedule_info.c_op not in comm.MAD_OP_ID_MAP.values():
        return
    if not op_schedule_info.overflow_l1size_flag:
        log.dbg("not overflow l1 size, no need clean")
        return
    _, m_axis_index = t2c_util.get_nm_axis_index(op_schedule_info)
    stages_info = op_schedule_info.stages_info
    set_fmatrix_index = None
    for stage_index in range(len(sch.stages) - 1, -1, -1):
        stage_info = stages_info[stage_index]
        stages_type = stage_info.get("type", [])
        if stage_info["tag"] == "set_fmatrix":
            set_fmatrix_index = stage_index
        elif "l1fuse_leaf" in stages_type:
            m_factor = get_input_from_output(t2c_params, set_fmatrix_index,
                                             stage_index, m_axis_index)
            t2c_params.cleaned_actions[stage_index][
                ActionTensorCfg.split_factor_s + m_axis_index] = m_factor
            log.dbg("l1fuse_leaf %s update m axis factor: %s",
                    stage_info["name"], m_factor)
