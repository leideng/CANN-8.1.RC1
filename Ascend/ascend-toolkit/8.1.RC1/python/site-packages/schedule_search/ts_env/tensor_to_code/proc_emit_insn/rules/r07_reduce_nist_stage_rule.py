#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_cfg import FeatureTensorCfg
from schedule_search.ts_env.tensor_to_code import t2c_util
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    get_emit_insn_axis
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque


def proc(t2c_params):  # pylint: disable=R0914, R0912
    """
    reduce_nist的schedule方式在后端指令无法支持多行数据一起处理，因此加上这个规则
    若后续后端指令支持了，则可以删除该规则
    """
    features = t2c_params.features
    mode = t2c_params.mode
    stage_index = t2c_params.stage_index
    stage_name = t2c_params.stage_name
    stage = t2c_params.stage
    axis_info_list = t2c_params.axis_info_list

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    tag_idx = features[stage_index][FeatureTensorCfg.compute_s]
    compute = t2c_params.op_schedule_info.op_intrin_key_index[tag_idx].op_tag
    # 只处理reduce_nist的stage
    if not compute.endswith(t2c_util.REDUCE_NIST_KEYWORD):
        return True

    # 如果是第一根轴做reduce，则无需将其拉齐为axis的第一根轴
    reduce_axis_dict = t2c_params.op_schedule_info.reduce_axis_dict
    reduce_axis_index = max(reduce_axis_dict[stage_index]["axis"])
    if reduce_axis_index == 0:
        return True

    # 需要判断是否使用二分法
    if compute.startswith('reduce_sum') \
            or compute.startswith('tuple_reduce_sum'):
        return True

    axis_num, emit_insn_axis, emit_insn_axis_obj = get_emit_insn_axis(
        stage, stage_index, axis_info_list,
        t2c_params.stages_info[stage_index])

    intrinsic_func_name = t2c_params.op_schedule_info.op_intrin_key_index[
        features[stage_index][FeatureTensorCfg.compute_s]].intrin
    tsrz_line = "sch[%s].emit_insn(%s, '%s')" % (stage_name, emit_insn_axis,
                                                 intrinsic_func_name)
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, intrinsic_func_name)
    t2c_params.code_lines.append(tsrz_line)

    # 生成emit_insn对应的cheque
    get_emit_insn_cheque(t2c_params, stage_index, intrinsic_func_name,
                         (emit_insn_axis, axis_num))

    t2c_params.proc_flag_dict[stage_index] = True
    return True
