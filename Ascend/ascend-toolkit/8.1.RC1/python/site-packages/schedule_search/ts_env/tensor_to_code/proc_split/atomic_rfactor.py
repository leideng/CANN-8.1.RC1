#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.tensor_to_code import t2c_util
from schedule_search.ts_env.cheque_generator import get_axis_cheque
from schedule_search.ts_env.cheque_generator import get_fuse_cheque
from schedule_search.ts_env.cheque_generator import get_rfactor_cheque
from schedule_search.ts_env.cheque_generator import get_set_scope_cheque
from schedule_search.timer import timer
from tbe import tvm
from tbe.common.platform import platform_info


@timer()
def fuse_proc(t2c_params, code_lines, reduce_stage_index, block_split_info):
    '''
    把block_split_axis之前的轴全部fuse起来
    '''
    reduce_stage = t2c_params.schedule.stages[reduce_stage_index]
    reduce_stage_name = t2c_params.stages_info[reduce_stage_index].get('name')
    stage_reduce_axis_objs = reduce_stage.op.reduce_axis
    fused_axis_name = '%s_reduce_axis_fused' % reduce_stage_name
    fuse_code = ['%s = sch[%s].fuse(' % (fused_axis_name, reduce_stage_name)]
    fused_list = []
    fuse_axis_name_list = []
    fuse_len = 1

    for axis_index in range(block_split_info.axis_index):
        axis_name = '%s_reduce_axis_%s' % (reduce_stage_name, axis_index)
        code_lines.append('%s = sch[%s].op.reduce_axis[%d]' %
                          (axis_name, reduce_stage_name, axis_index))
        fuse_code.append('%s, ' % axis_name)
        fused_list.append(stage_reduce_axis_objs[axis_index])
        fuse_axis_name_list.append(axis_name)
        fuse_len *= stage_reduce_axis_objs[axis_index].dom.extent.value
    fuse_code.append('%s)' % block_split_info.outer_axis_name)
    fused_list.append(block_split_info.outer_axis_obj)
    fuse_axis_name_list.append(block_split_info.outer_axis_name)

    fused_axis_obj = reduce_stage.fuse(*fused_list)
    code_lines.append(''.join(fuse_code))

    # 实现fuse操作对应的cheque
    log.dbg("fuse_axis_name_list: %s", fuse_axis_name_list)
    get_fuse_cheque(t2c_params, reduce_stage_index,
                    range(block_split_info.axis_index + 1))

    return fused_axis_name, fused_axis_obj


@timer()
def get_reduce_tag(reduce_stage):
    '''
    获取reduce信息，需要将reduce的tag打到rfactor的stage
    '''
    # 获取reduce的type
    reduce_type = t2c_util.REDUCE_NIST_KEYWORD
    source_axis_vars = reduce_stage.op.body[0].source[0].indices
    for reduce_axis in reduce_stage.op.reduce_axis:
        if reduce_axis.var.same_as(source_axis_vars[-1]):
            reduce_type = t2c_util.REDUCE_LAST_KEYWORD
            break
    # 获取reduce的tag
    reduce_op_tag = reduce_stage.op.tag + reduce_type
    return reduce_type, reduce_op_tag


@timer()
def rfactor_proc(t2c_params,
                 code_lines,
                 reduce_stage_index,
                 reduce_tensors,
                 fused_axis_info):
    '''
    fuse后进行rfactor，tuple_reduce_sum rfactor会返回多个tensor，只需要取第一个
    '''
    # rfactor前先获取reduce tag
    reduce_type, reduce_op_tag = \
        get_reduce_tag(t2c_params.schedule.stages[reduce_stage_index])

    # rfactor的code_lines
    fused_axis_name, fused_axis_obj = fused_axis_info
    reduce_stage_name = t2c_params.stages_info[reduce_stage_index].get('name')
    rfactor_stage_name = "%s_rfactor" % reduce_stage_name
    rfactor_codes = 'sch.rfactor(%s, %s, factor_axis=-1)' % (reduce_stage_name,
                                                             fused_axis_name)
    if len(reduce_tensors) > 1:
        rfactor_codes = '%s, *_ = %s' % (rfactor_stage_name, rfactor_codes)
    else:
        rfactor_codes = '%s = %s' % (rfactor_stage_name, rfactor_codes)
    code_lines.append(rfactor_codes)
    code_lines.append(
        "sch[%s].set_scope('%s')" % (rfactor_stage_name,
                                     platform_info.scope_ubuf))

    # rfactor的runtime
    rfactor_tensor = t2c_params.schedule.rfactor(reduce_tensors[0],
                                                 fused_axis_obj,
                                                 factor_axis=-1)
    log.dbg("rfactor_tensor: %s, %s", rfactor_tensor, type(rfactor_tensor))
    if not isinstance(rfactor_tensor, tvm.Tensor):
        rfactor_tensor = rfactor_tensor[0]
    t2c_params.schedule[rfactor_tensor].set_scope(platform_info.scope_ubuf)

    # 进行rfactor后会生成一个新的stage，添加其stage_info到stages_info
    t2c_params.stages_info.insert(
        reduce_stage_index,
        {
            'name': rfactor_stage_name,
            'type': ['reduce_atomic_rfactor'],
            'scope': platform_info.scope_ubuf,
            'op_tag': reduce_op_tag,
            'reduce_type': reduce_type
        }
    )


@timer()
def do_rfactor(t2c_params,
               code_lines,
               reduce_stage_index,
               block_split_info,
               reduce_tensors):
    """
    进行rfactor
    """
    # 把block_split_axis之前的轴全部fuse起来
    fused_axis_name, fused_axis_obj = fuse_proc(t2c_params,
                                                code_lines,
                                                reduce_stage_index,
                                                block_split_info)

    # 进行rfactor
    rfactor_proc(t2c_params, code_lines, reduce_stage_index,
                 reduce_tensors, [fused_axis_name, fused_axis_obj])

    # 生成rfactor对应的cheque
    get_rfactor_cheque(t2c_params, reduce_stage_index, 0, -1)

    # 生成set_scope对应的cheque
    get_set_scope_cheque(t2c_params, reduce_stage_index,
                         platform_info.scope_ubuf)

    # rfactor之后，增加了一个rfactor的stage，在split之前，
    # 生成该stage的所有普通轴和reduce轴的cheque
    get_axis_cheque(t2c_params, reduce_stage_index)
