#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env.tensor_to_code.proc_storage_align.rules import comm


def proc(input_dict, output_dict):  # pylint: disable=R0914,R0912
    """
    规则内容：reduce_last的align规则
            只对src有对齐要求，对齐轴是数据连续的reduce起始轴axis
            这个轴要在src都连续
    """
    expr_type = input_dict["expr_type"]
    expr_info = input_dict["expr_info"]
    name_fanin_list, index_fanin_list = input_dict["fanin_list"]
    dst_stage_index = input_dict["stage_index"]
    align_stage_list = input_dict["align_stage_list"]
    update_align_dict = output_dict["update_align_dict"]

    if expr_type in ["reduce_last"]:
        dst_tensor_name = expr_info["dst"][0]["stage_name"]
        if dst_tensor_name not in align_stage_list:
            return
        # 连续的reduce起始轴axis，即与最后一根reduce连续的reduce轴
        # 要在所有src tensor中都连续才叫连续
        all_upper_axis_list = []
        for tensor in expr_info["src"]:
            # 不考虑表达式右边的dst
            if tensor["stage_name"] == dst_tensor_name:
                continue
            # 根据表达式信息的stride，并计算得到数据连续的reduce起始轴axis（从后往前）
            upper_align_reduce_axis = comm.get_upper_align_axis(
                expr_info, tensor, expr_type, reduce_flag=True)
            log.dbg("upper_align_reduce_axis:%s", upper_align_reduce_axis)
            all_upper_axis_list.append(upper_align_reduce_axis)

        # 得到最靠里的axis
        final_upper_align_reduce_axis = max(all_upper_axis_list)
        if not final_upper_align_reduce_axis:
            return
        # reduce_last只对src有对齐要求，对dst没有要求
        for src_tensor in expr_info["src"]:
            src_stage_name = src_tensor["stage_name"]
            # 不需要做align的stage
            if src_stage_name not in align_stage_list \
                    or src_stage_name == dst_tensor_name:
                continue
            stage_index = index_fanin_list[name_fanin_list.index(
                src_stage_name)]
            update_align_dict.setdefault(stage_index, []).append({
                "tensor_name":
                dst_tensor_name,
                "stage_index":
                dst_stage_index,
                "axis_var":
                final_upper_align_reduce_axis
            })

            log.dbg(
                "r02 stage:%s expr_type:%s need stage:%s align to %s, "
                "stage_index: %s", dst_tensor_name, expr_type, src_stage_name,
                final_upper_align_reduce_axis, stage_index)
