#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env import env_util
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.ts_env.tensor_to_code import atomic_comm
from schedule_search.ts_env.tensor_to_code.proc_bind.rules import comm
from schedule_search.timer import timer
from schedule_search.retry_proc import add_retry_option


@timer()
def get_ub_tiling(t2c_params, code_lines, reduce_stage_index):
    '''
    获取ub的切分信息
    '''
    reduce_stage_info = t2c_params.stages_info[reduce_stage_index]
    reduce_stage_name = reduce_stage_info.get('name')
    ub_split_axis_type = reduce_stage_info.get('split_axis_type',
                                               'reduce_axis')
    split_vector = t2c_params.cleaned_actions[reduce_stage_index][
        ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]
    split_axis_obj = t2c_params.schedule.stages[
        reduce_stage_index].op.reduce_axis
    if ub_split_axis_type == 'axis':
        split_axis_obj = t2c_params.schedule.stages[reduce_stage_index].op.axis
    ub_split_axis_index = len(split_axis_obj) - 1
    ub_split_factor = 1
    for axis_index in range(len(split_axis_obj)):
        factor = split_vector[axis_index]
        # factor在碰到第一个非1的factor之前，都不会实际做split动作
        if factor != 1:
            ub_split_axis_index = axis_index
            ub_split_factor = factor
            break

    # stage的reduce axis会变化，先记录一下ub_split_axis
    prefix = "reduce_axis"
    if ub_split_axis_type == 'axis':
        prefix = "axis"
    ub_split_axis_name = "ub_split_%s" % prefix
    code_lines.append(
        '%s = sch[%s].op.%s[%d]' %
        (ub_split_axis_name, reduce_stage_name, prefix, ub_split_axis_index))

    ub_split_info = atomic_comm.gen_split_info(
        factor=ub_split_factor,
        axis_index=ub_split_axis_index,
        axis_name=ub_split_axis_name,
        axis_obj=split_axis_obj[ub_split_axis_index])
    log.dbg('ub_split_info: %s', ub_split_info)
    return ub_split_info


@timer()
def adjust_block_tiling(block_split_axis_index,
                        block_split_outer_size,
                        stage_reduce_axis_objs,
                        reduce_info):
    '''
    如果有r2，reduce last的block tiling不切r1，切r1比较复杂
    '''
    # 不是reduce last不处理
    shape_before_reduce = reduce_info.shape_before_reduce
    reduce_axis_indexs = reduce_info.reduce_axis_indexs
    if not (len(shape_before_reduce) > len(reduce_axis_indexs) \
            and len(shape_before_reduce) - 1 in reduce_axis_indexs):
        log.dbg('not reduce last, no need adjust_block_tiling')
        return block_split_axis_index, block_split_outer_size

    # 没有切到r1不处理
    last_none_reduce_axis_s, _ = env_util.find_last_none_reduce_axis(
        shape_before_reduce, reduce_axis_indexs)
    if last_none_reduce_axis_s == 0 or reduce_axis_indexs[
            block_split_axis_index] <= last_none_reduce_axis_s:
        log.dbg('not split r1, no need adjust_block_tiling')
        return block_split_axis_index, block_split_outer_size

    block_split_shape = [
        stage_reduce_axis_objs[axis_index].dom.extent.value
        for axis_index in range(
            reduce_axis_indexs.index(last_none_reduce_axis_s - 1))
    ]
    block_dim = comm.get_block_dim(sum(block_split_shape))
    block_split_axis_index, block_split_outer_size \
        = atomic_comm.find_split_axis(block_split_shape,
                                      0,
                                      len(block_split_shape) - 1,
                                      block_dim)
    return block_split_axis_index, block_split_outer_size


def atomic_retry_proc(t2c_params, block_split_factor, block_split_axis_len,
                      block_split_outer_size):
    '''
    atomic场景切分因子retry
    '''
    if block_split_axis_len % block_split_outer_size == 0:
        return block_split_factor

    retry_options = [{"atomic_factor": False}]
    if block_split_factor - 1 > 0:
        retry_options.append({"atomic_factor": -1})
    if block_split_factor + 1 <= block_split_axis_len:
        retry_options.append({"atomic_factor": 1})
    add_retry_option(t2c_params.retry_t2c_rules, "atomic_split", retry_options)
    atomic_factor = t2c_params.op_schedule_info.option.get("atomic_factor", 0)
    if atomic_factor is False:
        return block_split_factor
    return block_split_factor + atomic_factor


@timer()
def get_block_tiling(t2c_params,  # pylint: disable=R0914
                     reduce_stage_index,
                     ub_split_info,
                     reduce_info):
    '''
    获取多核切分信息，切出一部分reduce轴绑定多核
    '''
    reduce_stage = t2c_params.schedule.stages[reduce_stage_index]
    reduce_stage_info = t2c_params.stages_info[reduce_stage_index]
    stage_reduce_axis_objs = reduce_stage.op.reduce_axis
    ub_split_axis_type = reduce_stage_info.get('split_axis_type', 'reduce_axis')
    ub_split_axis_index = ub_split_info.axis_index
    ub_split_factor = ub_split_info.factor

    # 如果ub切了普通轴，所有的reduce轴都可用于绑定多核
    if ub_split_axis_type == 'axis':
        block_split_shape = [
            stage_reduce_axis_obj.dom.extent.value
            for stage_reduce_axis_obj in stage_reduce_axis_objs
        ]
    # 如果切了reduce轴，只有切分轴外的reduce轴可用于绑定多核
    else:
        block_split_shape = [
            stage_reduce_axis_objs[axis_index].dom.extent.value
            for axis_index in range(ub_split_axis_index)
        ]
        ub_split_axis_len = stage_reduce_axis_objs[ub_split_axis_index].dom.extent.value
        block_split_shape.append((ub_split_axis_len + ub_split_factor - 1) // ub_split_factor)
    log.dbg('block_split_shape: %s', block_split_shape)

    block_dim = comm.get_block_dim(sum(block_split_shape))
    block_split_axis_index, block_split_outer_size \
        = atomic_comm.find_split_axis(block_split_shape,
                                      0,
                                      len(block_split_shape) - 1,
                                      block_dim)
    log.dbg('%s, %s', block_split_axis_index, block_split_outer_size)

    # reduce last的block tiling不切r1
    block_split_axis_index, block_split_outer_size \
        = adjust_block_tiling(block_split_axis_index,
                              block_split_outer_size,
                              stage_reduce_axis_objs,
                              reduce_info)
    log.dbg('%s, %s', block_split_axis_index, block_split_outer_size)

    # 获取切分因子
    block_split_axis_len = stage_reduce_axis_objs[
        block_split_axis_index].dom.extent.value
    block_split_factor = block_split_axis_len // block_split_outer_size
    if ub_split_axis_type != 'axis' and block_split_axis_index == ub_split_axis_index:
        block_split_factor = max(block_split_factor, ub_split_factor)
    block_split_factor = atomic_retry_proc(t2c_params, block_split_factor, block_split_axis_len,
                                           block_split_outer_size)
    block_split_info = atomic_comm.gen_split_info(
        factor=block_split_factor,
        axis_index=block_split_axis_index,
        axis_name='%s_reduce_axis_%d' % (reduce_stage_info.get('name'),
                                         block_split_axis_index),
        axis_obj=stage_reduce_axis_objs[block_split_axis_index])
    return block_split_info


@timer()
def get_tiling(t2c_params,
               code_lines,
               reduce_stage_index,
               reduce_info):
    """
    获取切分轴和切分因子
    """
    # 1、获取ub切分的ub_split_axis、ub_split_factor等，由mcts采样获得
    ub_split_info = get_ub_tiling(t2c_params,
                                  code_lines,
                                  reduce_stage_index)

    # 2、获取block_split_axis、block_split_factor等，根据ub的切分和core_num获取
    block_split_info = get_block_tiling(t2c_params,
                                        reduce_stage_index,
                                        ub_split_info,
                                        reduce_info)

    log.dbg("ub_split_axis_index: %s, ub_split_factor: %s, "
            "block_split_axis_index: %s, block_split_factor: %s",
            ub_split_info.axis_index, ub_split_info.factor,
            block_split_info.axis_index, block_split_info.factor)

    return ub_split_info, block_split_info
