#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from functools import reduce as functools_reduce
from typing import NoReturn

from schedule_search import log
from schedule_search.timer import timer
from schedule_search.controller.mcts_search.features import sch_to_stmt
from schedule_search.controller.mcts_search.features import FeatureExtraction
from schedule_search.ts_env.cheque_generator import get_set_buffer_size_cheque
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_to_code.t2c_util import T2cParams


def _do_set_buffer_size(t2c_params: T2cParams, need_set_tensors_dict: dict, tensor_name: str,
                      code_lines: list, buffer_size: int) -> NoReturn:
    """
    do set_buffer_size
    :param t2c_params:
    :param need_set_tensors_dict:
    :param tensor_name:
    :param code_lines:
    :param buffer_size:
    :return:
    """
    for stage_index, need_set_stage in need_set_tensors_dict.items():
        stage_name = t2c_params.schedule.stages[stage_index].op.name
        if tensor_name == stage_name:
            # 1.generate code
            code_lines.append('sch[%s].set_buffer_size(%s)' % (need_set_stage, buffer_size))

            # 2.do set_buffer_size
            if t2c_params.mode == MODE_RUNTIME:
                stage = t2c_params.schedule.stages[stage_index]
                stage.set_buffer_size(buffer_size)

            # 3.generate cheque
            get_set_buffer_size_cheque(t2c_params, stage_index, buffer_size)


def _gen_code_and_do_set_buffer_size(t2c_params: T2cParams, code_lines: list,
                                   need_set_tensors_dict: dict) -> NoReturn:
    """
    generate code and do set_buffer_size
    :param t2c_params:
    :param code_lines:
    :param need_set_tensors_dict:
    :return:
    """
    # lower to get IR
    sch = t2c_params.schedule
    stmt = sch_to_stmt(sch)
    worker = FeatureExtraction()
    worker.analyse_stmt(stmt, -1, 1)

    # get allocate info
    for (tensor_name, allocate_info) in worker.info.get('allocate').items():
        extents = allocate_info['extents']
        buffer_size = functools_reduce(lambda x, y: x * y, extents)

        _do_set_buffer_size(t2c_params, need_set_tensors_dict, tensor_name,
                          code_lines, buffer_size)


@timer('set_buffer_size')
def proc(t2c_params: T2cParams, rules: list) -> bool:
    """
    set buffer_size
    :param t2c_params:
    :param rules:
    :return:
    """
    # set_buffer_size只针对动态shape算子和动静合一算子进行设置
    static_flag = t2c_params.op_schedule_info.option.get('op_mode', '') in ['static']
    dynamic = t2c_params.op_schedule_info.option.get('dynamic', False)
    if not dynamic and not static_flag:
        return True

    for rule in rules:
        rule_module = __import__(rule, fromlist=['1'])
        rule_module.proc(t2c_params)

    schedule_obj = t2c_params.schedule
    inlined_stages = t2c_params.inlined_stages
    stages_info = t2c_params.stages_info

    code_lines = ['\n', '# set_buffer_size code']
    t2c_params.proc_flag_dict = {}
    proc_ret = True

    # no need set_buffer_size tensors
    need_set_tensors_dict = {}
    for stage_index, stage in enumerate(schedule_obj.stages):
        # 该stage已经Inline掉了
        if stage_index in inlined_stages:
            continue

        # placeholder不做set_buffer_size
        if (str(stage.op).startswith("placeholder")) or \
                'placeholder' in stages_info[stage_index].get('type', []):
            continue

        # 涉及gm的不做set_buffer_size
        gm_type_set = {'leaf', 'inter_out', 'origin_leaf_out', 'workspace'}
        if gm_type_set.intersection(set(t2c_params.stages_info[stage_index].get('type', []))):
            continue

        need_set_tensors_dict[stage_index] = stages_info[stage_index].get('name', [])

    _gen_code_and_do_set_buffer_size(t2c_params, code_lines, need_set_tensors_dict)

    t2c_params.code_lines.extend(code_lines)
    log.dbg('code_lines: %s' % ("\n".join(t2c_params.code_lines)))
    return proc_ret
