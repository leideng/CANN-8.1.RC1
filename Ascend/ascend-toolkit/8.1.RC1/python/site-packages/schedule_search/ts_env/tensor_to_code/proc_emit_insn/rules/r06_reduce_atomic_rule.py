#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from schedule_search import log
from schedule_search.ts_env import env_util
from schedule_search.ts_env.env_consts import MODE_RUNTIME
from schedule_search.ts_env.tensor_to_code import t2c_util
from schedule_search.ts_env.cheque_generator import get_emit_insn_cheque
from schedule_search.ts_env.cheque_generator import get_axis_index
from schedule_search.ts_env.tensor_to_code.proc_emit_insn.rules.comm import \
    need_dichotomy_add


def _need_dichotomy_add(t2c_params):  # pylint: disable=R0914,R0912
    tiling_case = t2c_params.op_schedule_info.tiling_case
    if tiling_case == 0:
        return False

    reduce_op_tag = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "reduce_op_tag", "")
    if t2c_util.REDUCE_NIST_KEYWORD not in reduce_op_tag:
        return False

    split_axis_type = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "ub_split_axis_type", None)
    if split_axis_type != "reduce_axis":
        return False

    shape_before_reduce = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "shape_before_reduce", [])
    reduce_axis_indexs = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "reduce_axis_indexs", [])
    ub_split_axis_index = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "ub_split_axis_index", 0)
    ub_split_factor = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "ub_split_factor", 1)
    reduce_dtype = t2c_params.op_schedule_info.reduce_atomic_dict.get(
        "reduce_dtype", 1)

    # last_non_reduce_axis_size
    last_non_reduce_axis_size = 1
    last_non_reduce_axis_s, last_non_reduce_axis_e = \
        env_util.find_last_none_reduce_axis(shape_before_reduce,
                                            reduce_axis_indexs)
    for i in range(last_non_reduce_axis_s, last_non_reduce_axis_e + 1):
        last_non_reduce_axis_size *= shape_before_reduce[i]

    # loop_size
    loop_size = last_non_reduce_axis_size
    reduce_axis_len_list = []
    for i, axis_len in enumerate(shape_before_reduce):
        if i in reduce_axis_indexs:
            reduce_axis_len_list.append(axis_len)
    for i in range(ub_split_axis_index + 1, len(reduce_axis_len_list)):
        loop_size *= reduce_axis_len_list[i]
    loop_size *= ub_split_factor

    log.dbg("loop_size: %s, last_non_reduce_axis_size: %s", loop_size,
            last_non_reduce_axis_size)

    return need_dichotomy_add(loop_size, last_non_reduce_axis_size,
                              reduce_dtype)


def proc(t2c_params):  # pylint: disable=R0912
    """
    reduce atomic rfactor emit_insn的轴为inner轴
    """
    mode = t2c_params.mode
    stage = t2c_params.stage
    stage_name = t2c_params.stage_name
    stage_index = t2c_params.stage_index
    stage_info = t2c_params.stages_info[stage_index]

    proc_sch = bool(mode == MODE_RUNTIME)

    # 前面规则处理过的stage直接跳过
    if t2c_params.proc_flag_dict.get(stage_index, False):
        return True

    # 非reduce_atomic_rfactor跳过
    if 'reduce_atomic_rfactor' not in stage_info.get('type', []):
        return True

    # 取_i的axis
    ub_inner_axis_info = t2c_params.op_schedule_info.reduce_atomic_dict[
        "ub_inner_axis_info"]
    emit_insn_axis = ub_inner_axis_info.name
    emit_insn_axis_obj = ub_inner_axis_info.body

    if _need_dichotomy_add(t2c_params):
        # 针对bn_training_reduce
        if stage.op.num_outputs == 2:
            intrinsic_func_name = "vector_dichotomy_add_for_bn_reduce"
        else:
            intrinsic_func_name = "vector_dichotomy_add"
    else:
        intrinsic_func_name = "vector_reduce_sum"

    tsrz_line = "sch[%s].emit_insn(%s, '%s')" % (stage_name, emit_insn_axis,
                                                 intrinsic_func_name)
    if proc_sch:
        stage.emit_insn(emit_insn_axis_obj, intrinsic_func_name)
    t2c_params.code_lines.append(tsrz_line)

    # 生成emit_insn对应的cheque
    axis_index = get_axis_index(t2c_params.axis_info_list[stage_index],
                                emit_insn_axis)
    get_emit_insn_cheque(t2c_params, stage_index, intrinsic_func_name,
                         (emit_insn_axis, axis_index))
    t2c_params.proc_flag_dict[stage_index] = True
    return True
