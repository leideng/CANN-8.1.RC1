#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""

from schedule_search import log
from schedule_search.ts_env.tensor_cfg import INVALID_AT_AXIS
from schedule_search.ts_env.tensor_cfg import ActionTensorCfg
from schedule_search.ts_env.tensor_to_code import atomic_comm
from schedule_search.ts_env.tensor_to_code.proc_at.rules.comm import \
    refine_a_stage


def proc(t2c_params):  # pylint: disable=R0912
    """
    规则内容：获取每个stage的at到的axis，存入at_targets
    """
    # 非atomic场景不处理
    tiling_case = t2c_params.op_schedule_info.tiling_case
    if not tiling_case > 0:
        return False

    # 输入
    stage_num = len(t2c_params.features)
    at_choices = []
    for _ in range(stage_num):
        at_choices.append([])

    # 从下往上推导at的关系
    at_targets = [None] * stage_num
    reversed_stages = list(t2c_params.schedule.stages)
    reversed_stages.reverse()

    for reverse_index, stage in enumerate(reversed_stages):
        if str(stage.op).startswith("placeholder"):
            continue
        stage_index = stage_num - reverse_index - 1
        # rfactor之前的全部at到rfactor的ub tiling的outer轴
        # rfactor at到reduce_atomic cache_write的reduce_axis[0]
        # 最终的reduce输出不需要at
        stage_type = t2c_params.stages_info[stage_index].get('type', [])
        if "reduce_atomic" in stage_type:
            t2c_params.cleaned_actions[stage_index][ActionTensorCfg.at_s] \
                = INVALID_AT_AXIS
            at_targets[stage_index] = None
        elif "reduce_atomic_write" in stage_type:
            compute_at_axis_info, _ \
                = atomic_comm.get_reduce_atomic_write_axis(t2c_params,
                                                           stage_index)
            at_choices[stage_index] = [compute_at_axis_info]
            t2c_params.cleaned_actions[stage_index][ActionTensorCfg.at_s] \
                = INVALID_AT_AXIS
            at_targets[stage_index] = None
        elif "reduce_atomic_rfactor" in stage_type:
            refine_a_stage(stage_index, at_choices, at_targets, t2c_params)
            # 清空一下at_choices，防止reduce_atomic_rfactor之
            # 前的at到reduce_atomic_write
            at_choices = [[] for _ in range(stage_num)]
            at_choices[stage_index] = [
                t2c_params.op_schedule_info.
                reduce_atomic_dict["ub_outer_axis_info"]
            ]
        else:
            refine_a_stage(stage_index, at_choices, at_targets, t2c_params)

    t2c_params.at_targets = at_targets
    log.dbg('reduce atomic at done')
    return True
