#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""

from schedule_search import log
from tbe.common.rl_bank.cheque import get_primitive_id
from tbe.common.rl_bank.cheque import get_scope_id
from tbe.common.rl_bank.cheque import get_insn_id
from tbe.common.rl_bank.cheque import get_cheque_tbe_compile_para


def get_stage_index(stages_info, stage_name):
    """

    :param stages_info:
    :param stage_name:
    :return:
    """
    for i, stage_info in enumerate(stages_info):
        if stage_info['name'] == stage_name:
            return i
    return 0


def get_axis_index(axis_infos, axis_name):
    """

    :param axis_infos:
    :param axis_name:
    :return:
    """
    axis_index = 0
    for i, axis_info in enumerate(axis_infos):
        if axis_info.name == axis_name:
            axis_index = i
            break
    return axis_index


def get_at_cheque(t2c_params, stage_idx, target_stage_idx, target_axis_idx):
    """

    :param t2c_params:
    :param stage_idx:
    :param target_stage_idx:
    :param target_axis_idx:
    :return:
    """
    cheque = [
        stage_idx,
        get_primitive_id("compute_at"), target_stage_idx, target_axis_idx
    ]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)
    return True


def get_bind_cheque(t2c_params, stage_index):
    """

    :param t2c_params:
    :param stage_index:
    :return:
    """
    # 生成bind操作对应的cheque
    cheque = [stage_index, get_primitive_id("bind")]
    t2c_params.cheque_list.append(cheque)
    return True


def get_sub_bind_cheque(t2c_params, stage_index, sub_axis_index):
    """

    :param t2c_params:
    :param stage_index:
    :param sub_axis_index:
    :return:
    """
    # 生成sub bind操作对应的cheque
    cheque = [stage_index, get_primitive_id("sub_bind"), sub_axis_index]
    t2c_params.cheque_list.append(cheque)
    return True


def get_cache_read_cheque(t2c_params, stage_index, buf, consumer_indices):
    """

    :param t2c_params:
    :param stage_index:
    :param buf:
    :param consumer_indices:
    :return:
    """
    # 生成cache_read对应的cheque
    cheque = [
        stage_index,
        get_primitive_id("cache_read"),
        get_scope_id(buf), consumer_indices
    ]
    t2c_params.cheque_list.append(cheque)
    return True


def get_cache_write_cheque(t2c_params, stage_index, buf):
    """

    :param t2c_params:
    :param stage_index:
    :param buf:
    :return:
    """
    # stage有一个输出，cache_write对应的cheque
    # cheque: [stage索引，cache_write操作，scope]

    cheque = [stage_index, get_primitive_id("cache_write"), get_scope_id(buf)]
    t2c_params.cheque_list.append(cheque)
    return True


def get_cache_write_cheque_spec(t2c_params, stage_index, buf, num_outputs):
    """

    :param t2c_params:
    :param stage_index:
    :param buf:
    :param num_outputs:
    :return:
    """
    # stage有一个输出，cache_write对应的cheque
    # cheque: [stage索引，cache_write操作，scope]

    cheque = [[stage_index, num_outputs],
              get_primitive_id("cache_write"),
              get_scope_id(buf)]

    t2c_params.cheque_list.append(cheque)
    return True


def get_emit_insn_cheque(t2c_params,
                         stage_index,
                         insn_name,
                         axis_info,
                         extra_info=None):
    """
    生成emit_insn对应的cheque
    :param t2c_params:
    :param stage_index:
    :param insn_name:
    :param axis_info:
    :param extra_info:
    :return:
    """
    axis_name = axis_info[0]
    axis_index = axis_info[1]
    # 获取emit_insn的stage索引以及axis索引用于生成cheque
    # emit_insn的轴axis_name可能有两种,一种是int,该值直接用于生成cheque
    if "[" in axis_name and "]" in axis_name:
        axis_index = int(axis_name.split("axis[")[1].split("]")[0])
        cheque = [
            stage_index,
            get_primitive_id("emit_insn"), [axis_index, -1],
            get_insn_id(insn_name)
        ]
    else:
        cheque = [
            stage_index,
            get_primitive_id("emit_insn"), [-1, axis_index],
            get_insn_id(insn_name)
        ]
    log.dbg("cheque: %s", cheque)

    if insn_name == "mad" and extra_info:
        mad_cheque = [
            extra_info["mad_pattern"],
            extra_info.get("init_bias", 0)
        ]
        mad_cheque.extend(t2c_params.axis_info_list[stage_index].index(axis)
                          for axis in extra_info["kout_axis_obj_list"])
        cheque.append(mad_cheque)

    if insn_name == 'dma_copy' and extra_info:
        dma_cheque = [extra_info["no_overlap"]]
        cheque.append(dma_cheque)

    if insn_name == 'vector_transpose' and extra_info:
        trs_cheque = [extra_info["src_in_dst_order"]]
        cheque.append(trs_cheque)

    t2c_params.cheque_list.append(cheque)
    return True


def get_pragma_cheque(t2c_params, stage_index, pragma_name, axis_info,
                      pragma_offset):
    """

    :param t2c_params:
    :param stage_index:
    :param pragma_name:
    :param axis_info:
    :param pragma_offset:
    :return:
    """
    axis_name = axis_info[0]
    axis_index = axis_info[1]
    # 生成pragma对应的cheque
    # pragma的轴索引pragma_axis可能有两种
    # 一种是int，该值直接用于生成cheque
    if "[" in axis_name and "]" in axis_name:
        axis_index = int(axis_name.split("axis[")[1].split("]")[0])
        cheque = [
            stage_index,
            get_primitive_id("pragma"), [axis_index, -1],
            get_insn_id(pragma_name), pragma_offset
        ]
    # 一种是str，
    # 重新获取pragma_axis在axes中的索引
    else:
        cheque = [
            stage_index,
            get_primitive_id("pragma"), [-1, axis_index],
            get_insn_id(pragma_name), pragma_offset
        ]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)
    return True


def get_reorder_cheque(t2c_params, stage_index, order):
    """

    :param t2c_params:
    :param stage_index:
    :param order:
    :return:
    """
    cheque = [stage_index, get_primitive_id("reorder"), list(order)]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)


def get_split_cheque(t2c_params,
                     stage_index,
                     axis_index,
                     value,
                     primitive="split"):
    """

    :param t2c_params:
    :param stage_index:
    :param axis_index:
    :param value:
    :param primitive:
    :return:
    """
    # split的stage 生成split_factor/split_nparts对应的cheque
    # 不是int可能是numpy的
    if not isinstance(value, int):
        value = value.tolist()
    if primitive == "split":
        cheque = [stage_index, get_primitive_id("split"), axis_index, value]
    elif primitive == "nparts":
        cheque = [
            stage_index,
            get_primitive_id("split_nparts"), axis_index, value
        ]
    else:
        cheque = []
        log.err("unknown primitive, only support split and split_nparts!")
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)


def get_axis_cheque(t2c_params, stage_index):
    """
    生成get_axis/get_reduce_axis对应的cheque
    :param t2c_params:
    :param stage_index:
    :return:
    """
    stage = t2c_params.schedule.stages[stage_index]
    cheque = [stage_index, get_primitive_id("get_axis"), len(stage.op.axis)]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)
    if stage.op.reduce_axis:
        cheque = [
            stage_index,
            get_primitive_id("get_reduce_axis"),
            len(stage.op.reduce_axis)
        ]
        log.dbg("cheque: %s", cheque)
        t2c_params.cheque_list.append(cheque)
    return True


def get_fuse_cheque(t2c_params, stage_index, fuse_indices):
    """
    生成fuse操作对应的cheque
    :param t2c_params:
    :param stage_index:
    :param fuse_indices:
    :return:
    """
    cheque = [stage_index, get_primitive_id("fuse"), list(fuse_indices)]
    t2c_params.cheque_list.append(cheque)
    return True


def get_rfactor_cheque(t2c_params, stage_index, axis_index, factor_axis):
    """
    生成rfactor对应的cheque
    :param t2c_params:
    :param stage_index:
    :param axis_index:
    :param factor_axis:
    :return:
    """
    cheque = [
        stage_index,
        get_primitive_id("rfactor"), axis_index, factor_axis
    ]
    t2c_params.cheque_list.append(cheque)


def get_set_scope_cheque(t2c_params, stage_index, scope):
    """
    生成set_scope对应的cheque
    :param t2c_params:
    :param stage_index:
    :param scope:
    :return:
    """
    cheque = [stage_index, get_primitive_id("set_scope"), get_scope_id(scope)]
    t2c_params.cheque_list.append(cheque)
    return True


def get_inline_cheque(t2c_params, stage_index):
    """

    :param t2c_params:
    :param stage_index:
    :return:
    """
    cheque = [stage_index, get_primitive_id("compute_inline")]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)


def get_tbe_compile_para_cheque(t2c_params, tbe_para):
    """
    :param t2c_params:
    :param tbe_para:
    :return:
    """
    tbe_para_cheque = get_cheque_tbe_compile_para(tbe_para)
    log.dbg("tbe_para_cheque: %s", tbe_para_cheque)
    t2c_params.cheque_list.append(tbe_para_cheque)


def get_ccespec_cheque(  # pylint: disable=R0914
        t2c_params,
        workspace_list_str,
        orign_out_tensor_str,
        real_out_tensor_str):
    """

    :param t2c_params:
    :param workspace_list_str:
    :param orign_out_tensor_str:
    :param real_out_tensor_str:
    :return:
    """
    cce_special_cheque = []
    cce_special_cheque.extend([-1, get_primitive_id("cce_special")])
    for tensor_name_list_str in [
            workspace_list_str, orign_out_tensor_str, real_out_tensor_str
    ]:
        tensor_name_list = tensor_name_list_str.lstrip('[') \
            .rstrip(']').replace(' ', '')
        if not tensor_name_list:
            tensor_name_list = []
        else:
            tensor_name_list = tensor_name_list.split(',')
        tensor_idx_list = []
        # 一般的cheque: [-1, cce_special操作，[tensor所在stage索引], ...]
        # tuple_reduce的cce_special生成的cheque特殊些，一个stage输出多个tensor,
        # 下面用spec_scene来识别是否是该场景，单独处理生成cheque
        # cheque变化: [tensor所在stage索引]-->[tensor所在stage索引,tensor个数]
        spec_scene = False
        for cheque in t2c_params.cheque_list:
            if cheque[1] == 1 and isinstance(cheque[0], list):
                spec_scene = True
                break
        if spec_scene:
            tensor_nums = 0
            other_tensor_list = []
            stage_name = ''
            for idx, tensor_name in enumerate(tensor_name_list):
                if '_v%s' % idx in tensor_name:
                    tensor_nums += 1
                    stage_name = "".join(tensor_name.split('_v%s' % idx)[:2])
                else:
                    other_tensor_list.append(tensor_name)
            if tensor_nums > 0:
                stage_index = get_stage_index(t2c_params.stages_info,
                                              stage_name)
                tensor_idx_list.append([stage_index, tensor_nums])
            tensor_name_list = other_tensor_list

        for tensor_name in tensor_name_list:
            stage_index = get_stage_index(t2c_params.stages_info, tensor_name)
            tensor_idx_list.append(stage_index)
        cce_special_cheque.append(tensor_idx_list)
    log.dbg("cce_special_cheque: %s", cce_special_cheque)
    t2c_params.cheque_list.append(cce_special_cheque)


def get_storage_align_cheque(t2c_params, stage_index, axis_index,
                             vector_block_num):
    """

    :param t2c_params:
    :param stage_index:
    :param axis_index:
    :param vector_block_num:
    :return:
    """
    cheque = [
        stage_index,
        get_primitive_id("storage_align"), axis_index, vector_block_num
    ]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)


def get_preload_cheque(t2c_params, stage_index):
    """

    :param t2c_params:
    :param stage_index:
    :return:
    """
    cheque = [stage_index, get_primitive_id("preload")]
    t2c_params.cheque_list.append(cheque)


def get_double_buffer_cheque(t2c_params, stage_index):
    """

    :param t2c_params:
    :param stage_index:
    :return:
    """
    cheque = [stage_index, get_primitive_id("double_buffer")]
    t2c_params.cheque_list.append(cheque)


def get_reuseby_cheque(t2c_params,
                       stage_index,
                       dst_stage_index=-1,
                       reuse_data=False):
    """

    :param t2c_params:
    :param stage_index:
    :param dst_stage_index:
    :return:
    """
    reused_cheque = [
        stage_index,
        get_primitive_id("reused_by"), dst_stage_index,
        int(reuse_data)
    ]
    t2c_params.cheque_list.append(reused_cheque)


def get_allocate_at_cheque(t2c_params, stage_index, last_stage_index,
                           reuse_axis_idx):
    """

    :param t2c_params:
    :param stage_index:
    :param last_stage_index:
    :param reuse_axis_idx:
    :return:
    """
    allocate_at_cheque = [
        stage_index,
        get_primitive_id("allocate_at"), last_stage_index, reuse_axis_idx,
        [reuse_axis_idx]
    ]
    t2c_params.cheque_list.append(allocate_at_cheque)


def get_mem_uniq_cheque(t2c_params, stage_index):
    """

    :param t2c_params:
    :param stage_index:
    :return:
    """
    mem_unique_cheque = [stage_index, get_primitive_id("mem_unique")]
    t2c_params.cheque_list.append(mem_unique_cheque)


def get_set_buffer_size_cheque(t2c_params: object, stage_index: int, input_l1_size: int) -> None:
    '''

    :param t2c_params:
    :param stage_index:
    :param input_l1_siz:
    :return:
    '''
    set_buffer_size_cheque = [
        stage_index,
        get_primitive_id("set_buffer_size"), input_l1_size
    ]
    t2c_params.cheque_list.append(set_buffer_size_cheque)


def get_bind_buffer_cheque(t2c_params, stage_index, axis_num, stride, offset):
    '''

    :param t2c_params:
    :param stage_index:
    :param axis_num:
    :param stride:
    :param offset:
    :return:
    '''
    bind_buffer_cheque = [stage_index,
                          get_primitive_id("bind_buffer"),
                          axis_num,
                          stride,
                          offset]
    t2c_params.cheque_list.append(bind_buffer_cheque)


def get_block_sync_cheque(  # pylint: disable=R0913
        t2c_params,
        stage_index,
        block_sync_type,
        axis_index,
        sync_stage_index,
        bottom=True):
    """
    生成block_sync对应的cheque
    :param t2c_params:
    :param stage_index:
    :param block_sync_type:
    :param axis_index:
    :param sync_stage_index:
    :param bottom:
    :return:
    """
    cheque = [
        stage_index,
        get_primitive_id(block_sync_type), axis_index,
        sync_stage_index,
        int(bottom)
    ]
    log.dbg("cheque: %s", cheque)
    t2c_params.cheque_list.append(cheque)
    return True


def get_buffer_align_cheque(t2c_params, stage_index, align_list):
    '''
    buffer_align对应的cheque生成
    :return:
    '''
    buffer_align_cheque = [
        stage_index, get_primitive_id("buffer_align"), align_list
    ]
    t2c_params.cheque_list.append(buffer_align_cheque)
