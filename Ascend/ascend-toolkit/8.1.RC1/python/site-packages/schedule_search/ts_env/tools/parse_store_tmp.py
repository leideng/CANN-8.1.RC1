#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
import datetime
import json
import os
import sys

from schedule_search import log
from schedule_search.util import OPEN_FILE_MODES_640
from schedule_search.util import WRITE_FILE_FLAGS

THIS_FILE_NAME = __file__

BUILD_FAIL = "build_fail"
RUN_SUCC = "run_succ"
RUN_FAIL = "run_fail"
RUN_TIMEOUT = "run_timeout"
RUN_CRASH = "run_crash"
VALID_RESULT_LIST = [BUILD_FAIL, RUN_FAIL, RUN_SUCC, RUN_TIMEOUT, RUN_CRASH]

SUCC_RATIO = "succ_ratio"

TOTAL_SEARCH_COUNT = "total_search_cnt"


def gen_run_summary(result_path):
    """

    :param result_path:
    :return:
    """
    dict_result = {TOTAL_SEARCH_COUNT: 0}
    result_list = os.listdir(result_path)
    # 统计总的search数，包括build fail, run succ, run fail, run timeout
    for result in result_list:
        result_dir = os.path.join(result_path, result)
        if not os.path.isdir(result_dir) or result not in VALID_RESULT_LIST:
            log.dbg("Not valid result dir:%s, skip!", result_dir)
            continue

        op_list = os.listdir(result_dir)
        dict_result[result] = len(op_list)
        dict_result[TOTAL_SEARCH_COUNT] += dict_result.get(result)

    # 需要判断dict_result[TOTAL_SEARCH_COUNT]是否为0
    if dict_result.get(TOTAL_SEARCH_COUNT) != 0:
        succ_num = dict_result.get(RUN_SUCC, 0)
        total_num = dict_result.get(TOTAL_SEARCH_COUNT)
        dict_result[SUCC_RATIO] = float(succ_num) / float(total_num)
    else:
        dict_result[SUCC_RATIO] = 0.0
    return dict_result


def gen_report_data(store_tmp_dir):
    """

    :param store_tmp_dir:
    :return:
    """
    dict_data = {}
    for op_dir in os.listdir(store_tmp_dir):
        op_path = os.path.join(store_tmp_dir, op_dir)
        if not os.path.isdir(op_path) or "@" not in op_dir:
            log.dbg("Invalid op dir:%s, skip!", op_path)
            continue
        op_name = op_dir.rsplit("@", 1)[0]
        dict_data.setdefault(op_name, {})
        dict_op_data = dict_data.get(op_name)
        for shape in os.listdir(op_path):
            shape_path = os.path.join(op_path, shape)
            if not os.path.isdir(shape_path) or "@" not in shape_path:
                log.dbg("Invalid shape dir:%s, skip!", shape_path)
                continue

            dict_op_data.setdefault(shape, {})

            # 解析store_tmp运行结果
            dict_op_data[shape].update(gen_run_summary(shape_path))

    return dict_data


def gen_full_report(store_tmp_path):
    """

    :param store_tmp_path:
    """
    dict_data = gen_report_data(store_tmp_path)
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    summary_file = os.path.join(store_tmp_path, "summary_%s.json" % timestamp)
    with os.fdopen(os.open(summary_file, WRITE_FILE_FLAGS, OPEN_FILE_MODES_640), "w") as file_handler:
        json.dump(dict_data, file_handler)

    log.info("Search Report Generated Succeeded:%s", summary_file)


def main(argv):
    """

    :param argv:
    :return:
    """
    if len(argv) < 2:
        log.err("params error! pelese input 1 param: store_tmp dir name")
        return 1

    store_tmp_dir = argv[1]
    if not os.path.isdir(store_tmp_dir):
        log.err("store_tmp dir:%s not exists!", store_tmp_dir)
        return 2

    gen_full_report(store_tmp_dir)
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
