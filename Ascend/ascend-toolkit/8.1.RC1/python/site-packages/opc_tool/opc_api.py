
#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2021-2023 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
opc api
"""
import sys
from tbe.common.utils import log as logger
from opc import OpcOptionParser
from op_compilation import OpCompilation
from op_info_store import load_op_info_store
from constant import (OpcOptions, OpcCompileMode)


def compile_op(op_params, build_options):
    """
    Provides API compile operator for external callers.
    """
    opt_parser = OpcOptionParser()
    res = opt_parser.parse_build_options(build_options)
    if not res:
        logger.error("parse_build_options is failed.")
    opt_parser.set_option(OpcOptions.OP_COMPILE_MODE, OpcCompileMode.SINGLE_OP_DICT_MODE)

    if not opt_parser.check_input_params():
        logger.error("Opc tool compile failed.")
        return False

    load_op_info_store(opt_parser.get_option(OpcOptions.SOC_VERSION))
    opt_parser.set_option(OpcOptions.OP_PARAMS, op_params)
    op_compile = OpCompilation(opt_parser.get_all_options())
    if op_compile.op_compilation():
        logger.info("Opc tool compile success.")
        return True
    else:
        logger.error("Opc tool compile failed.")
        return False
