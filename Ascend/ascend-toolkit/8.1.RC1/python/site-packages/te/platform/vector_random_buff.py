#!/usr/bin/env python
# coding: utf-8
# Copyright 2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
vector_random_buff
"""
import secrets
from te import tik
import te.platform as tbe_platform
from tbe.common.context import get_context


def tik_instance_fun(kernel_name):
    # type:(str) -> str
    """
    randomize parts of UB data
    """
    tik_instance = tik.Tik()
    # every number takes 2 bytes
    div = 2
    ub_size = tbe_platform.get_soc_spec(tbe_platform.UB_SIZE)
    src_ub = tik_instance.Tensor("int16", (ub_size // div,), name="src_ub", scope=tik.scope_ubuf)

    # define the data offset
    randscalar = tik_instance.Scalar(dtype="int16")
    randscalar.set_as(src_ub[0])

    # define the addr. offset
    block_offset = tik_instance.Scalar(dtype="uint16")
    src_ub_uint = src_ub.reinterpret_cast_to("uint16")
    block_offset.set_as(src_ub_uint[0])
    block_offset.set_as(block_offset % 8)

    # randomize every 1/8 blocks of data
    loop_num = ub_size/(2*128)/128
    with tik_instance.for_range(0, loop_num) as idx:
        offset_compute = (idx*1024 + block_offset)*16
        tik_instance.vec_dup(16, src_ub[offset_compute], randscalar, 96, 8)

    _add_info_to_context()

    tik_instance.BuildCCE(kernel_name=kernel_name, inputs=(), outputs=(), enable_l2=False,
                          config={"build_sub_function": True, "dump_to_header_file": True})

    return tik_instance


def _add_info_to_context():
    # type:() -> None
    # add info to context
    context = get_context()
    if context:
        context.add_addition("compile_reset_op", "clear_vector")
    else:
        raise ValueError("Context does not exit")


def vector_random_buff(kernel_name=None):
    # type:(str) -> str
    """
    randomize parts of UB data
    """
    short_soc_version = tbe_platform.get_soc_spec("SHORT_SOC_VERSION")
    if short_soc_version == "Ascend910":
        if kernel_name is None:
            kernel_name = "vector_random_buff"
        return tik_instance_fun(kernel_name)
    return tik.Tik()
