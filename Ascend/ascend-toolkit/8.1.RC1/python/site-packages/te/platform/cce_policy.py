#!/usr/bin/env python
# coding: utf-8
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
parser the config params
"""
from __future__ import absolute_import as _abs
import inspect

from tbe.tvm._ffi.registry import _init_api
from tvm.error_mgr.log import warn
# 'Example: pylint: disable=invalid-name


def get_L1_info(key):
    """get L1 space"""
    warn("'from te.platform import get_L1_info' is expired, "
         "please replace it with 'from tbe.common.buildcfg import get_L1_info'.")
    from tbe.common.buildcfg import compatible_interface
    return compatible_interface.get_L1_info(key)


# 'Example: pylint: disable=invalid-name
def set_L1_info(key, value):
    """set L1 space"""
    warn("'from te.platform import set_L1_info' is expired, "
         "please replace it with 'from tbe.common.buildcfg import set_L1_info'.")
    from tbe.common.buildcfg import compatible_interface
    return compatible_interface.set_L1_info(key, value)


# 'Example: pylint: disable=too-few-public-methods
class OpImplPolicy():
    """
    Op implementation policy
    """
    warn("te.platform.cce_policy.OpImplPolicy is deprecated, "
         "use te_fusion.fusion_util.OpImplPolicy instead.")

    op_impl_mode = None
    op_impl_mode_list = []

    @classmethod
    def get_op_impl_mode(cls, opfunc, op_type):
        """
        get op_impl_mode kwargs
        """
        if cls.op_impl_mode not in ("", None):
            impl_mode_arg = \
                inspect.signature(opfunc).parameters.get('impl_mode', None)
            if impl_mode_arg is not None and \
                    impl_mode_arg.kind in \
                    (inspect.Parameter.KEYWORD_ONLY,
                     inspect.Parameter.POSITIONAL_OR_KEYWORD) and \
                    (op_type in cls.op_impl_mode_list or
                     cls.op_impl_mode == 'high_precision' and cls.op_impl_mode_list == []):
                return {'impl_mode': cls.op_impl_mode}
        return {}


def enableL2():
    """
    Enable L2 fusion on tvm codegen.

    Parameters
    ----------

    Returns
    -------
    succ_flag : boolean
        end of execution
    """
    warn("te.platform.cce_policy.enableL2 is deprecated, please do not use this interface")


# Example: pylint: disable=invalid-name
def disableL2():
    """
    Disable L2 fusion on tvm codegen.

    Parameters
    ----------

    Returns
    -------
    succ_flag : boolean
        end of execution
    """
    warn("te.platform.cce_policy.disableL2 is deprecated, please do not use this interface")


_init_api("te.platform.cce_policy")
