#!/usr/bin/env python
# coding: utf-8
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
support parallel compilation
"""
import warnings

from te_fusion.parallel_compilation import FusionOpTask as te_FusionOpTask
from te_fusion.parallel_compilation import SingleOpTask as te_SingleOpTask
from te_fusion import parallel_compilation

# 'Example: pylint: disable=invalid-name
# Singleton for managing all registered compute
FusionOpTask = te_FusionOpTask
SingleOpTask = te_SingleOpTask


# 'Example: pylint: disable = too-many-arguments
def init_multi_process_env(embedding, socinfo, tune_mode,
                           slog_level=None, slog_event=1,
                           pid_timestamp=""):
    """
    init multi compilation process
    :param embedding: if is embedding python
    :param socinfo:
    :param l2mode:
    :return: compilation worker number
    """

    warnings.warn("te.platform.parallel_compilation.init_multi_process_env is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.init_multi_process_env",
                  DeprecationWarning, stacklevel=2)
    return parallel_compilation.init_multi_process_env(embedding, socinfo, tune_mode,
                                                       slog_level, slog_event, pid_timestamp)


def deinit_multi_process_env():
    """
    deinit multi compilation process
    :return: None
    """

    warnings.warn("te.platform.parallel_compilation.deinit_multi_process_env is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.deinit_multi_process_env",
                  DeprecationWarning, stacklevel=2)
    parallel_compilation.deinit_multi_process_env()


def compile_op(json_str, op_env_cfg=None):
    """
    compile op parallelly
    """

    warnings.warn("te.platform.parallel_compilation.compile_op is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.compile_op",
                  DeprecationWarning, stacklevel=2)
    return parallel_compilation.compile_op(json_str, op_env_cfg)


def sync_py_object(module_name, obj_name, has_value=False, obj_value=None):
    """
    sync python object to worker process
    :param module_name:
    :param obj_name:
    """

    warnings.warn("te.platform.parallel_compilation.sync_py_object is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.sync_py_object",
                  DeprecationWarning, stacklevel=2)
    parallel_compilation.sync_py_object(module_name, obj_name, has_value, obj_value)


# 'Example: pylint: disable=too-many-arguments
def gen_task_res(ttype, gid, tid, status_code, result, msg, **kwds):
    """
    gen_task_res
    :return: task result
    """

    warnings.warn("te.platform.parallel_compilation.gen_task_res is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.gen_task_res",
                  DeprecationWarning, stacklevel=2)
    return parallel_compilation.gen_task_res(ttype, gid, tid, status_code, result, msg, **kwds)


def update_running_task(task):
    """
    update runing task status
    """

    warnings.warn("te.platform.parallel_compilation.update_running_task is deprecated,"
                  "please replace it with te_fusion.parallel_compilation.update_running_task",
                  DeprecationWarning, stacklevel=2)
    parallel_compilation.update_running_task(task)
