#!/usr/bin/env python
# coding: utf-8
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
Runtime function related hooks
"""
# Example: pylint: disable=import-error,too-many-lines
from __future__ import absolute_import as _abs
from tvm.error_mgr.log import warn
# Alignment requirement
ALIGNMENT_BYTES = 32


def reset_mask_insn(ir_builder, type_, bits=128, mask_func=None, ref=None):
    """
    :describe: caculate the mask, and set vector mask
    :param ir_builder: ir builder
    :param type_: the type of mask dst
    :param bits: the bit of mask, default : 128
    """
    warn("te.platform.cce_intrin_md.reset_mask_insn is expired, "
         "please replace it with tbe.dsl.instrinsic.cce_intrin_md.reset_mask_insn")
    from tbe.dsl.instrinsic import cce_intrin_md
    return cce_intrin_md.reset_mask_insn(ir_builder, type_, bits, mask_func,
                                         ref)


class TIKCallbackManager():
    """
       TIK callback manager class
    """
    func_map = {}

    @classmethod
    def register(cls, name):
        """
          register the function.

        """
        def func_wrapper(func):
            TIKCallbackManager.func_map[name] = func
            return func

        return func_wrapper

    # Example: pylint: disable=keyword-arg-before-vararg
    @classmethod
    def call_method1(cls, name=None, *args):
        """
       call the fuction.
        """
        func = cls.func_map.get(name, None)
        if func is None:
            return None
        return func(*args)

    @classmethod
    def call_method(cls, name=None):
        """
       call the fuction.
        """
        func = cls.func_map.get(name, None)
        if func is None:
            return None
        return func()


def tik_exception_process(loc):
    """when there is an exception in Tik calling TVM, first print tik error msg

    :param loc: node location including file and column
    :param msg: error message
    :return: None
    """
    tik_error_traceback1 = TIKCallbackManager.call_method(
        "get_traceback_inspect_msg")
    tik_error_traceback = None
    if len(tik_error_traceback1) >= 2:
        tik_error_traceback = tik_error_traceback1[1]
    tik_error_context = ""
    if loc is not None:
        tik_error_context = "\n".join(TIKCallbackManager.call_method1(
            "get_context_msg", loc.file, int(loc.column)))
    return tik_error_context, tik_error_traceback


def tik_exception_process_cce(tik_file, tik_line):
    """tik_exception_process_cce"""
    tik_error_traceback1 = TIKCallbackManager.call_method(
        "get_traceback_inspect_msg")
    tik_error_traceback = None
    if len(tik_error_traceback1) >= 2:
        tik_error_traceback = tik_error_traceback1[1]
    tik_error_context = "\n".join(TIKCallbackManager.call_method1(
        "get_context_msg", tik_file, int(tik_line)))
    return tik_error_context, tik_error_traceback
