#!/usr/bin/env python
# coding: utf-8
# Copyright 2019-2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
op_context interface
"""
import threading
from typing import Optional

_contexts = {}


def _get_contexts():
    return _contexts.setdefault(threading.currentThread().ident, [])


# 'Example: pylint: disable=useless-object-inheritance
class OpInfo(object):
    """
    op context info
    """

    # 'Example: pylint: disable=too-many-arguments
    def __init__(self, op_name, inputs=None, outputs=None, attrs=None,
                 pattern=None, extra_params=None, op_mode="dynamic"):
        self._op_name = op_name
        self._inputs = inputs
        self._outputs = outputs
        self._attrs = attrs
        self._pattern = pattern
        self._extra_params = extra_params
        self._op_mode = op_mode

    def get_op_name(self):
        """
        :return:
        """
        return self._op_name

    def get_inputs(self):
        """
        :return:
        """
        return self._inputs

    def get_outputs(self):
        """
        :return:
        """
        return self._outputs

    def get_attrs(self):
        """
        :return:
        """
        return self._attrs

    def get_pattern(self):
        """
        :return:
        """
        return self._pattern

    def get_extra_params(self):
        """
        :return:
            extra_params
        """
        return self._extra_params

    def get_op_mode(self):
        """
        :return:
        """
        return self._op_mode


class OpContext():
    """
    op context
    """

    def __init__(self):
        self._op_info = []

    def __enter__(self):
        _get_contexts().append(self)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        _get_contexts().pop()

    def add_op_info(self, op_info):
        """
        add op info

        Parameters
        ----------
        op_info: obj
        Object of class OpInfo

        Returns
        -------
        None
        """
        self._op_info.append(op_info)

    def get_op_info(self, op_name=None):
        """
        get op info by op_name

        Parameters
        ----------
        op_name:string
        op name in op_info

        Returns
        -------
        op_info: obj
        Object of class OpInfo
        """
        if not op_name:
            return self._op_info[0]
        for op_info in self._op_info:
            if op_info.get_op_name() == op_name:
                return op_info
        return None


def get_op_context() -> Optional[OpContext]:
    """
    :return:
    """
    return _get_contexts()[-1] if _get_contexts() else None
