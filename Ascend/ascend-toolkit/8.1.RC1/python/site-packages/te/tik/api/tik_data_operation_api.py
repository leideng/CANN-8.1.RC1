#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_data_operation_api.py
DESC:     provide data padding, data conversion, data move related instructions
CREATED:  2020-3-16 21:12:13
MODIFIED: 2020-3-16 21:12:45
"""
from collections import namedtuple
from tbe.tik.common.common_nametuple_util import VtransposeApi
from tbe.tik.tik_lib import TikDataOpApi
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import DupOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import NanoDupOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import VecTransApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import NanoVecTransApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_ import DataMoveApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_nano import DataMoveApiNano
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class TikDataOpApiv1(TikDataOpApi):
    """
    Data convert, Data fill, Data move Api for open
    """

    # source_info
    # decorator
    dup_api = namedtuple('DupApi', ["name", "mask", "dst", "scalar", "repeat_times", "dst_blk_stride", "dst_rep_stride",
                                    "stride_unit", "mask_mode"])

    data_move_api = namedtuple('DataMoveApi', ['dst', 'src', 'sid', 'nburst', 'burst', 'src_stride', 'dst_stride'])

    vnchwconv_api = namedtuple('VnchwconvApi', ['dst_high_half', 'src_high_half', 'dst_list', 'src_list',
                                                'repeat_times', 'dst_rep_stride', 'src_rep_stride', 'name'])

    def vec_dup(self, mask, dst, scalar, repeat_times, dst_rep_stride):
        """
        Copies a Scalar variable or an immediate for multiple times and fill it in the vector.

        Parameter
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : Destination operand.
        scalar : A scalar or an immediate, for the source operand to be copied.
        repeat_times : Number of iteration repeats.
        dst_rep_stride : Block-to-block stride between adjacent iterations of the destination operand.

        Returns
        ----------
        no return
        """
        blk_stride = 1
        single_api = TikDataOpApiv1.dup_api('vec_dup', mask, dst, scalar, repeat_times, blk_stride, dst_rep_stride,
                                            stride_unit=0, mask_mode="normal")
        if TikSocManager.is_nano_soc():
            dup_obj = NanoDupOpApi(self, single_api)
        else:
            dup_obj = DupOpApi(self, single_api)
        dup_obj.run_all()

    def data_move(self, dst, src, sid, nburst, burst, src_stride, dst_stride, *args, **argv):
        """
        Moves data based on the data types of the src and dst tensors.

        Parameter
        ----------
        dst : Destination operand.
        src : Source operand.
        sid : A scalar, an immediate, or an Expr of type int32, specifying the SMMU ID, which is hardware-related.
        nburst : A scalar, an immediate, or an Expr of type int32, specifying the number of the data segments to be
        transmitted.
        burst : Burst length.
        src_stride : Burst-to-burst stride of the source tensor.
        dst_stride : Burst-to-burst stride of the destination tensor.
        *args : Number of extended parameters
        **argv : Extended parameters

        Returns
        ----------
        no return
        """
        dm_api = TikDataOpApiv1.data_move_api(dst, src, sid, nburst, burst, src_stride, dst_stride)
        if TikSocManager.is_nano_soc():
            dm_obj = DataMoveApiNano(self, dm_api, args, argv)
        else:
            dm_obj = DataMoveApi(self, dm_api, args, argv)
        dm_obj.run_all()

    @source_info_decorator()
    def vec_trans_scatter(self, dst_high_half, src_high_half, dst_list, src_list, repeat_times, dst_rep_stride,
                          src_rep_stride):
        """
        Converts NCHW into NC1HWC0.

        Parameter
        ----------
        dst_high_half : Whether to store the data of dst_list[*] to the upper or lower half of the block.
        src_high_half : A bool specifying whether to read the data of src_list[*] from the upper or lower half of the
        block.
        dst_list : A list of elements, specifying the vector destination operand. Each element marks the start of a
        destination operand.
        src_list : A list of elements, specifying the vector source operand. Each element marks the start of a
        destination operand.
        repeat_times : Number of iteration repeats, in the unit of blocks.
        dst_rep_stride : Block-to-block stride between adjacent iterations of the destination operand, in the unit of
        blocks.
        src_rep_stride : Block-to-block stride between adjacent iterations of the source operand, in the unit of blocks.

        Returns
        ----------
        no return
        """
        name = "vec_trans_scatter"
        return self.vnchwconv(
            dst_high_half, src_high_half, dst_list, src_list,
            repeat_times, dst_rep_stride, src_rep_stride, name)

    def vec_trans(self, dst, src, repeat_times, dst_rep_stride, src_rep_stride):
        """
        Consecutively transposes 16x16 two-dimensional matrix data blocks for repeat_times times.

        Parameter
        ----------
        dst : Destination operand.
        src : Source operand.
        repeat_times : Number of iteration repeats
        dst_rep_stride : Block-to-block stride between adjacent iterations of the destination operand
        src_rep_stride : Block-to-block stride between adjacent iterations of the source operand

        Returns
        ----------
        no return
        """
        vec_trans_api = VtransposeApi(dst, src, repeat_times, dst_rep_stride, src_rep_stride)
        if TikSocManager.is_nano_soc():
            vec_trans_obj = NanoVecTransApi(self, vec_trans_api, "vec_trans")
        else:
            vec_trans_obj = VecTransApi(self, vec_trans_api, "vec_trans")
        vec_trans_obj.run_all()
