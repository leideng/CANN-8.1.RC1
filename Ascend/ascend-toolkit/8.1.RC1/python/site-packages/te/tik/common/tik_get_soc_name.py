#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     get_soc_name.py
DESC:     get_soc_name file for tik
CREATED:  2020-01-10 19:02:50
MODIFIED: 2020-12-7 19:17:00
"""
import threading

from tbe.common.platform.platform_info import get_soc_spec

_BLK_NUM_REP = 8
_ONE_BLK_SIZE = 32
_ONE_REP_SIZE = 256

TIK_SOC_INFO = threading.local()
TIK_SOC_INFO.soc_name = None
TIK_SOC_INFO.soc_core_type = None
TIK_SOC_INFO.block_size = None
# in compatibility mode, ub block size
TIK_SOC_INFO.cpt_blk_size = None
# in compatibility mode, repeat size
TIK_SOC_INFO.cpt_rep_size = None
TIK_SOC_INFO.rep_size = None
TIK_SOC_INFO.is_compatible = True

TIK_SOC_INFO.l0a_buf_size = None
TIK_SOC_INFO.l0b_buf_size = None
TIK_SOC_INFO.cube_size = None


def get_l0a_buf_size():
    """
    get current l0a buffer size
    Returns
    -------
    l0a buffer size
    """
    if not hasattr(TIK_SOC_INFO, "l0a_buf_size"):
        TIK_SOC_INFO.l0a_buf_size = None
    if TIK_SOC_INFO.l0a_buf_size is not None:
        return TIK_SOC_INFO.l0a_buf_size
    TIK_SOC_INFO.l0a_buf_size = get_soc_spec("L0A_SIZE")
    return TIK_SOC_INFO.l0a_buf_size


def get_l0b_buf_size():
    """
    get current l0b buffer size
    Returns
    -------
    l0b buffer size
    """
    if not hasattr(TIK_SOC_INFO, "l0a_buf_size"):
        TIK_SOC_INFO.l0b_buf_size = None
    if TIK_SOC_INFO.l0b_buf_size is not None:
        return TIK_SOC_INFO.l0b_buf_size
    TIK_SOC_INFO.l0b_buf_size = get_soc_spec("L0B_SIZE")
    return TIK_SOC_INFO.l0b_buf_size


def get_cube_size():
    """
    get current cube size
    Returns
    -------
    cube size
    """
    if not hasattr(TIK_SOC_INFO, "cube_size"):
        TIK_SOC_INFO.cube_size = None
    if TIK_SOC_INFO.cube_size is not None:
        return TIK_SOC_INFO.cube_size
    TIK_SOC_INFO.cube_size = get_soc_spec("CUBE_SIZE")
    return TIK_SOC_INFO.cube_size


def get_soc_name():
    """
    get current soc's name
    Returns
    -------
    SOC_VERSION
    """
    if not hasattr(TIK_SOC_INFO, "soc_name"):
        TIK_SOC_INFO.soc_name = None
    if TIK_SOC_INFO.soc_name is not None:
        return TIK_SOC_INFO.soc_name
    TIK_SOC_INFO.soc_name = get_soc_spec("SHORT_SOC_VERSION")
    return TIK_SOC_INFO.soc_name


def get_soc_core_type():
    """
    get current soc's version
    Returns
    -------
    AICORE_TYPE
    """
    if not hasattr(TIK_SOC_INFO, "soc_core_type"):
        TIK_SOC_INFO.soc_core_type = None
    if TIK_SOC_INFO.soc_core_type is not None:
        return TIK_SOC_INFO.soc_core_type
    TIK_SOC_INFO.soc_core_type = get_soc_spec("AICORE_TYPE")
    return TIK_SOC_INFO.soc_core_type


def get_block_size():
    """
    this interface CAN ONLY use after creating Tik instance
    get ub block size of current soc
    Returns
    -------
    ub block size
    """
    if not hasattr(TIK_SOC_INFO, "block_size"):
        TIK_SOC_INFO.block_size = None
    if TIK_SOC_INFO.block_size is not None:
        return TIK_SOC_INFO.block_size
    TIK_SOC_INFO.block_size = get_soc_spec("ubblock_size")
    return TIK_SOC_INFO.block_size


def get_rep_size():
    """
    this interface CAN ONLY use after creating Tik instance
    get ub rep size of current soc
    Returns
    -------
    ub block size
    """
    if not hasattr(TIK_SOC_INFO, "rep_size"):
        TIK_SOC_INFO.rep_size = None
    if TIK_SOC_INFO.rep_size is not None:
        return TIK_SOC_INFO.rep_size
    TIK_SOC_INFO.rep_size = _BLK_NUM_REP * get_block_size()
    return TIK_SOC_INFO.rep_size


def is_compatible_mode():
    """
    this interface CAN ONLY use after creating Tik instance
    get compatible mode of current soc, default value is True
    only used for nano soc
    Returns
    -------
    True: compatible mode, split instruction into two
    False: incompatible mode, go traditional way
    """
    if not hasattr(TIK_SOC_INFO, "is_compatible"):
        TIK_SOC_INFO.is_compatible = True
    return TIK_SOC_INFO.is_compatible


def get_compatible_blk_size():
    """
    this interface CAN ONLY use after creating Tik instance
    get the ub block size in compatible mode for software code
    Returns
    -------
    ub block size
    """
    if not hasattr(TIK_SOC_INFO, "cpt_blk_size") or TIK_SOC_INFO.cpt_blk_size is None:
        if is_compatible_mode():
            TIK_SOC_INFO.cpt_blk_size = _ONE_BLK_SIZE
        else:
            TIK_SOC_INFO.cpt_blk_size = get_block_size()
    return TIK_SOC_INFO.cpt_blk_size


def get_compatible_rep_size():
    """
    this interface CAN ONLY use after creating Tik instance
    get the repeat size in compatible mode for software code
    Returns
    -------
    repeat size
    """
    if not hasattr(TIK_SOC_INFO, "cpt_rep_size") or TIK_SOC_INFO.cpt_rep_size is None:
        if is_compatible_mode():
            TIK_SOC_INFO.cpt_rep_size = _ONE_REP_SIZE
        else:
            TIK_SOC_INFO.cpt_rep_size = get_rep_size()
    return TIK_SOC_INFO.cpt_rep_size
