#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_scatter_ops_api_.py
DESC:     provide params
CREATED:  2019-04-18 18:53:42
MODIFIED: 2021-11-17 17:26:24
"""
from collections import namedtuple
from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_vector_api.tik_scalar_multis_api_ import ScalarMultisOps
from tbe.tik.tik_lib.tik_vector_api.tik_scalar_multis_api_ import NanoScalarMultisOps
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager

_ROUND_TO_NEAREST_ENABLE = 0


class ScalarMultisApi(TikIRBuilder):
    """
    Double Scatter Api
    """
    scalar_multis_api = namedtuple('ScalarMultisApi', ["name", "mask", "dst", "src", "scalar", "repeat_times",
                                                       "dst_blk_stride", "src_blk_stride", "dst_rep_stride",
                                                       "src_rep_stride", "stride_unit", "round_en", "mask_mode"])

    def vadds(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
              src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        add each element with a scalar in a vector

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode : mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vadds", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vadds_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vadds_obj = ScalarMultisOps(self, scalar_multis_api)
        vadds_obj.run_all()

    def vmuls(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
              src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        Multiple each element with a scalar in a vector

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode : mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vmuls", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vmuls_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vmuls_obj = ScalarMultisOps(self, scalar_multis_api)
        vmuls_obj.run_all()

    def vmaxs(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
              src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        get max of each element in a vector with a scalar

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar: source scalar
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode : mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vmaxs", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vmaxs_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vmaxs_obj = ScalarMultisOps(self, scalar_multis_api)
        vmaxs_obj.run_all()

    def vmins(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
              src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        get min of each element in a vector with a scalar

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar: source scalar
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode : mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vmins", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vmins_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vmins_obj = ScalarMultisOps(self, scalar_multis_api)
        vmins_obj.run_all()

    def vshl(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
             src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        logic shift left for each element in the source vector, the shift left distance is indicated by scalar, scalar
        must be less than or equal to16 or 32 for type = b16/b32

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar: source scalar, indicating shift left distance
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode: mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = 1
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vshl", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vshl_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vshl_obj = ScalarMultisOps(self, scalar_multis_api)
        vshl_obj.run_all()

    def vshr(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
             src_rep_stride, stride_unit=0, round_en=False, mask_mode="normal"):
        """
        logic shift right for type=u32/u16 or arithmetic shift right for type=s32/s16 for each element in the source
        vector. the shift right distance is indicated by scalar, scalar must be less than or equal to 32/16 for b32/b16

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar: source scalar, indicating shift right distance
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        round_en: 1 means rounding is applied during arithmetic shift right
        mask_mode: mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vshr", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vshr_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vshr_obj = ScalarMultisOps(self, scalar_multis_api)
        vshr_obj.run_all()

    def vlrelu(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
               src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        get min of each element in a vector with a scalar

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar: source scalar
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode : mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vlrelu", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode)
        if TikSocManager.is_nano_soc():
            vlrelu_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vlrelu_obj = ScalarMultisOps(self, scalar_multis_api)
        vlrelu_obj.run_all()

    def vaxpy(self, mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
              src_rep_stride, stride_unit=0):
        """
        multiple each element with a scalar in a vector and then acculate

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        scalar : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        round_en = _ROUND_TO_NEAREST_ENABLE
        scalar_multis_api = ScalarMultisApi.scalar_multis_api(
            "vaxpy", mask, dst, src, scalar, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride,
            src_rep_stride, stride_unit, round_en, mask_mode="normal")
        if TikSocManager.is_nano_soc():
            vaxpy_obj = NanoScalarMultisOps(self, scalar_multis_api)
        else:
            vaxpy_obj = ScalarMultisOps(self, scalar_multis_api)
        vaxpy_obj.run_all()