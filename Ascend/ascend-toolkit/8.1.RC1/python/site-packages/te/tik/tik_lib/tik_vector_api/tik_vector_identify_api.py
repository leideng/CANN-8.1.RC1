#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_identify_api.py
DESC:     provide params
CREATED:  2021-11-30 18:53:42
MODIFIED: 2021-11-30 19:17:00
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_vector_api.tik_vector_identify_api_ import IdentifyOp


class ProposalApi(TikIRBuilder):
    """
    Vcmp, Vcmpv, Vcmpvs Vector Api
    """
    identify = namedtuple('identify', ["name", "dst", "src0", "src1", "repeat_times"])

    def vaadd(self, dst, src0, src1, repeat_times):
        """
        Find the sum of the two proposal areas

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times

        Returns
        -------
        None
        """
        identify_api = ProposalApi.identify("vaadd", dst, src0, src1, repeat_times)
        vadd_obj = IdentifyOp(self, identify_api)
        vadd_obj.run_all()

    def viou(self, dst, src0, src1, repeat_times):
        """
        Find the intersection area of two proposals

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times

        Returns
        -------
        None
        """
        identify_api = ProposalApi.identify("viou", dst, src0, src1, repeat_times)
        vadd_obj = IdentifyOp(self, identify_api)
        vadd_obj.run_all()

    def vmrgch(self, dst, src, repeat_times):
        """
        Keep the first 4 data, the rest of the data is removed

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times

        Returns
        -------
        None
        """
        identify_api = ProposalApi.identify("vmrgch", dst, src, None, repeat_times)
        vmrgch_obj = IdentifyOp(self, identify_api)
        vmrgch_obj.run_all()

    def vrpac(self, dst, src, repeat_times):
        """
        Calculate the area of the proposal

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times

        Returns
        -------
        None
        """
        identify_api = ProposalApi.identify("vrpac", dst, src, None, repeat_times)
        vmrgch_obj = IdentifyOp(self, identify_api)
        vmrgch_obj.run_all()

    def vrpsort16(self, dst, src, repeat_times):
        """
        Sort them according to the score field in proposal

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times

        Returns
        -------
        None
        """
        identify_api = ProposalApi.identify("vrpsort16", dst, src, None, repeat_times)
        vmrgch_obj = IdentifyOp(self, identify_api)
        vmrgch_obj.run_all()
