#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_load_image_operation_.py
DESC:     tik_load_image_operation_
CREATED:  2021-11-16 5:26 AM
MODIFIED: 2021-11-16 5:26 AM
"""
from tbe import tvm

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.common.util import DTYPE_SIZE
from tbe.tik.common.common_util import check_dict_and_not_none
from tbe.tik.common.common_util import is_scalar_array
from tbe.tik.common.tik_get_soc_name import get_soc_name
from tbe.tik.common.tik_get_soc_name import get_soc_core_type
from tbe.tik.debug.data_move_decorators import load_image_decorator
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_expr import BasicExpr
from tbe.tik.tik_lib.tik_expr_convert import type_convert
from tbe.tik.tik_lib.tik_util import concat_params
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_params import BIT_16
from tbe.tik.tik_lib.tik_params import PIPE_MTE2
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_arch_version
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_input_format
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_src
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_dst
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_function_switch
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_src_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_flip_dict
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_enable_bit
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_stretch
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import aipp_check_sid
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_check import check_dst_extent
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_crop_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_csc_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_swap_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_pre_clip_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_scf_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_post_clip_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_dtc_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_channel_pad_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_area_pad_info
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_inner_ import aipp_set_raw_info
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import CROP_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import SWAP_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import CSC_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import DTC_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AREA_PAD_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import CPAD_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import PRE_CLIP_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import SCF_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import POST_CLIP_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import FLIP_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import STRETCH
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import RAW_BIT
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP0_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP0_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP1_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP1_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP2_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP2_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP3_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP3_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP4_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP4_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP5_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP5_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP6_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP6_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP7_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP7_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP8_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP8_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP9_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP9_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP10_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP10_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP11_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP11_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP13_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP13_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP15_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP15_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP16_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP16_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP12_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP12_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP17_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP17_SEGMENT_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_INIT_VALUE
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_INPUT_TYPE_SWAP_ALIGN
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import RAW16
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import RAW24
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_DISABLE
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import is_610_610b_310p_aic


def set_src_info(input_format, src_info, params_val):
    """
    set src_info to params_val
    """
    check_dict_and_not_none(src_info, 'src_info')
    src_horizontal_size = src_info.get('src_horizontal_size')
    src_vertical_size = src_info.get('src_vertical_size')
    aipp_check_src_info(input_format, src_horizontal_size, src_vertical_size)
    params_val['src_horizontal_size'] = src_horizontal_size
    params_val['src_vertical_size'] = src_vertical_size


def set_function_switch_type(function_switch, params_val):
    """
    set function_switch type to params_val
    """
    aipp_check_function_switch(function_switch)

    if not isinstance(function_switch, int):
        params_val['is_scalar'] = True
    else:
        params_val['is_scalar'] = False


def _aipp_get_enable_bit(function_switch):
    crop_enable = function_switch & CROP_BIT
    swap_enable = (function_switch // SWAP_BIT) & 1
    csc_enable = (function_switch // CSC_BIT) & 1
    dtc_enable = (function_switch // DTC_BIT) & 1
    area_pad_enable = (function_switch // AREA_PAD_BIT) & 1
    channel_pad_enable = (function_switch // CPAD_BIT) & 1

    if TikSocManager.is_hisi_soc():
        pre_clip_enable = (function_switch // PRE_CLIP_BIT) & 1
        scf_enable = (function_switch // SCF_BIT) & 1
        post_clip_enable = (function_switch // POST_CLIP_BIT) & 1
        flip_enable = (function_switch // FLIP_BIT) & 1
        stretch_enable = (function_switch // STRETCH) & 1
    else:
        pre_clip_enable = 0
        scf_enable = 0
        post_clip_enable = 0
        flip_enable = 0
        stretch_enable = 0

    if is_610_610b_310p_aic():
        raw_enable = (function_switch // RAW_BIT) & 1
    else:
        raw_enable = 0

    return [crop_enable, swap_enable, csc_enable, dtc_enable, area_pad_enable, channel_pad_enable,
            pre_clip_enable, scf_enable, post_clip_enable, flip_enable, stretch_enable, raw_enable]


def _aipp_get_enable_bit_with_scalar(tik_instance, function_switch):
    with tik_instance.context.freeze():
        crop_enable = tik_instance.Scalar(dtype="uint8", name="crop_enbale", init_value=0)
        swap_enable = tik_instance.Scalar(dtype="uint8", name="swap_enable", init_value=0)
        csc_enable = tik_instance.Scalar(dtype="uint8", name="csc_enable", init_value=0)
        dtc_enable = tik_instance.Scalar(dtype="uint8", name="dtc_enable", init_value=0)
        area_pad_enable = tik_instance.Scalar(dtype="uint8", name="area_pad_enable", init_value=0)
        channel_pad_enable = tik_instance.Scalar(dtype="uint8", name="channel_pad_enable", init_value=0)
        pre_clip_enable = tik_instance.Scalar(dtype="uint8", name="pre_clip_enable", init_value=0)
        scf_enable = tik_instance.Scalar(dtype="uint8", name="scf_enable", init_value=0)
        post_clip_enable = tik_instance.Scalar(dtype="uint8", name="post_clip_enable", init_value=0)
        flip_enable = tik_instance.Scalar(dtype="uint8", name="flip_enable", init_value=0)
        stretch_enable = tik_instance.Scalar(dtype="uint8", name="stretch_enable", init_value=0)
        raw_enable = tik_instance.Scalar(dtype="uint8", name="raw_enable", init_value=0)

        crop_enable.set_as(function_switch & CROP_BIT)
        swap_enable.set_as((function_switch // SWAP_BIT) & 1)
        csc_enable.set_as((function_switch // CSC_BIT) & 1)
        dtc_enable.set_as((function_switch // DTC_BIT) & 1)
        area_pad_enable.set_as((function_switch // AREA_PAD_BIT) & 1)
        channel_pad_enable.set_as((function_switch // CPAD_BIT) & 1)

        if TikSocManager.is_hisi_soc():
            pre_clip_enable.set_as((function_switch // PRE_CLIP_BIT) & 1)
            scf_enable.set_as((function_switch // SCF_BIT) & 1)
            post_clip_enable.set_as((function_switch // POST_CLIP_BIT) & 1)
            flip_enable.set_as((function_switch // FLIP_BIT) & 1)
            stretch_enable.set_as((function_switch // STRETCH) & 1)

        if is_610_610b_310p_aic():
            raw_enable.set_as((function_switch // RAW_BIT) & 1)

        return [crop_enable, swap_enable, csc_enable, dtc_enable, area_pad_enable, channel_pad_enable,
                pre_clip_enable, scf_enable, post_clip_enable, flip_enable, stretch_enable, raw_enable]


def aipp_set_enable_bit(tik_instance, input_format, function_switch, params_val):
    """
    set enable bit to params_val
    """
    is_scalar = params_val.get('is_scalar')
    if is_scalar:
        enable_list = _aipp_get_enable_bit_with_scalar(tik_instance, function_switch)
    else:
        enable_list = _aipp_get_enable_bit(function_switch)

    params_val['crop_enable'] = enable_list[0]
    params_val['swap_enable'] = enable_list[1]
    params_val['csc_enable'] = enable_list[2]
    params_val['dtc_enable'] = enable_list[3]
    params_val['area_pad_enable'] = enable_list[4]
    params_val['channel_pad_enable'] = enable_list[5]
    params_val['pre_clip_enable'] = enable_list[6]
    params_val['scf_enable'] = enable_list[7]
    params_val['post_clip_enable'] = enable_list[8]
    params_val['flip_enable'] = enable_list[9]
    params_val['stretch_enable'] = enable_list[10]
    params_val['raw_enable'] = enable_list[11]

    if not is_scalar:
        aipp_check_enable_bit(input_format, params_val)


def aipp_set_flip_mode(tik_instance, flip_mode, params_val):
    """
    set flip_mode to params_val
    """
    flip_enable = params_val.get('flip_enable')
    if params_val.get('is_scalar') and flip_mode is None:
        flip_mode = 0
    elif params_val.get('is_scalar') and flip_mode is not None:
        with tik_instance.context.freeze():
            aipp_check_flip_dict(flip_mode)
            if isinstance(flip_mode, int):
                flip_mode = tik_instance.Scalar("int32", "flip_mode", flip_mode)
            with tik_instance.if_scope(flip_enable == AIPP_DISABLE):
                flip_mode.set_as(0)
    else:
        if flip_enable == AIPP_DISABLE:
            flip_mode = 0
        else:
            aipp_check_flip_dict(flip_mode)
    params_val['flip_mode'] = flip_mode


def _handle_stretch_info(stretch_enable, stretch_info):
    if stretch_enable == AIPP_DISABLE:
        dst_stride_pixel = AIPP_INIT_VALUE
    else:
        check_dict_and_not_none(stretch_info, 'stretch_info')
        dst_stride_pixel = stretch_info.get('dst_stride_pixel')
        aipp_check_stretch(dst_stride_pixel)
    return dst_stride_pixel


def _handle_stretch_info_with_scalar(tik_instance, stretch_enable, stretch_info):
    """
    handle stretch_info with stretch_enable is Scalar type
    """
    with tik_instance.context.freeze():
        dst_stride_pixel = tik_instance.Scalar(dtype="int32", name="dst_stride_pixel", init_value=AIPP_INIT_VALUE)
        if stretch_info is None or not isinstance(stretch_info, dict):
            return dst_stride_pixel
        dst_stride_pixel_val = stretch_info.get('dst_stride_pixel', None)
        if dst_stride_pixel_val is None:
            return dst_stride_pixel
        with tik_instance.if_scope(stretch_enable != AIPP_DISABLE):
            dst_stride_pixel.set_as(dst_stride_pixel_val)
        return dst_stride_pixel


def _aipp_get_dst_stride_pixel(tik_instance, stretch_info, params_val):
    stretch_enable = params_val.get('stretch_enable')
    is_scalar = params_val.get('is_scalar')
    if is_scalar:
        dst_stride_pixel = _handle_stretch_info_with_scalar(tik_instance, stretch_enable, stretch_info)
    else:
        dst_stride_pixel = _handle_stretch_info(stretch_enable, stretch_info)

    return dst_stride_pixel


def _get_channels(dst, channel_pad_mode, input_format):
    """get channels"""
    channels = 32 // DTYPE_SIZE[dst.dtype]

    if (channel_pad_mode == 1) and TikSocManager.is_hisi_soc():
        channels = AIPP_INPUT_TYPE_SWAP_ALIGN.get(input_format).get('channels')

    if (channel_pad_mode == 2) and (TikSocManager.is_hisi_soc() or is_610_610b_310p_aic()):
        channels = 4
    return channels


def _get_dst_extent_hisi_aic(dst, dst_stride_pixel, channels, pad_rows, params_val):
    imm_scf_horizontal_size = Expr(params_val.get('scf_horizontal_size')).eval_value()
    imm_scf_vertical_size = Expr(params_val.get('scf_vertical_size')).eval_value()
    imm_post_right_clip_number = Expr(params_val.get('post_right_clip_number')).eval_value()
    imm_post_left_clip_number = Expr(params_val.get('post_left_clip_number')).eval_value()
    imm_post_botton_clip_number = Expr(params_val.get('post_botton_clip_number')).eval_value()
    imm_post_top_clip_number = Expr(params_val.get('post_top_clip_number')).eval_value()
    imm_dst_stride_pixel = Expr(dst_stride_pixel).eval_value()
    pad_cols_sum = Expr(params_val.get('left_pad_cols')).eval_value() +\
                   Expr(params_val.get('right_pad_cols')).eval_value()
    value_range_list = [imm_scf_horizontal_size, imm_scf_vertical_size, imm_post_right_clip_number,
                        imm_post_left_clip_number, imm_post_botton_clip_number,
                        imm_post_top_clip_number, imm_dst_stride_pixel]
    extent = _get_dst_extent(dst, channels, pad_rows, pad_cols_sum, value_range_list)
    return extent


def _get_dst_extent(dst, channels, pad_rows, pad_cols_sum, value_range_list):
    extent = None
    [imm_scf_horizontal_size, imm_scf_vertical_size, imm_post_right_clip_number, imm_post_left_clip_number,
     imm_post_botton_clip_number, imm_post_top_clip_number, imm_dst_stride_pixel] = value_range_list
    is_buffer_size = False
    if any(value is None for value in value_range_list):
        is_buffer_size = True
    elif imm_dst_stride_pixel == 0:
        extent = (imm_scf_horizontal_size - imm_post_right_clip_number - imm_post_left_clip_number + pad_cols_sum) * \
                 (imm_scf_vertical_size - imm_post_botton_clip_number - imm_post_top_clip_number + sum(pad_rows)) * \
                 channels
    else:
        extent = imm_dst_stride_pixel * (imm_scf_vertical_size - imm_post_botton_clip_number -
                                         imm_post_top_clip_number + sum(pad_rows)) * channels
    if is_buffer_size:
        extent = dst.buffer_size
    else:
        extent = extent * DTYPE_SIZE[dst.dtype]

    return extent


def _calculate_dst_extent_aipp(input_format, dst, dst_stride_pixel, params_val):
    """
    calculate dst extent
    """
    imm_input_format = Expr(input_format).eval_value()
    imm_channel_pad_mode = Expr(params_val.get('channel_pad_mode')).eval_value()

    channels = _get_channels(dst, imm_channel_pad_mode, imm_input_format)

    if any(value is None for value in [imm_input_format, imm_channel_pad_mode]):
        return dst.buffer_size

    pad_rows = [Expr(params_val.get('top_pad_rows')).eval_value(), Expr(params_val.get('top_pad_rows')).eval_value()]
    pad_clos = [Expr(params_val.get('left_pad_cols')).eval_value(), Expr(params_val.get('right_pad_cols')).eval_value()]
    if any(value is None for value in pad_clos + pad_rows):
        return dst.buffer_size

    if TikSocManager.is_hisi_soc():
        return _get_dst_extent_hisi_aic(dst, dst_stride_pixel, channels, pad_rows, params_val)

    imm_crop_horizontal_size = Expr(params_val.get('crop_horizontal_size')).eval_value()
    imm_crop_vertical_size = Expr(params_val.get('crop_vertical_size')).eval_value()
    if any(value is None for value in [imm_crop_horizontal_size, imm_crop_vertical_size]):
        return dst.buffer_size
    extent = (imm_crop_horizontal_size + sum(pad_clos)) * (imm_crop_vertical_size + sum(pad_rows)) * channels
    if is_610_610b_310p_aic() and imm_input_format in [RAW16, RAW24] and\
            params_val.get('raw_enable') == 1:
        imm_raw_image_channel = Expr(params_val.get('raw_image_channel')).eval_value()
        if imm_raw_image_channel is None:
            return dst.buffer_size
        if imm_raw_image_channel == 0:
            extent = extent // 4

    extent = extent * DTYPE_SIZE[dst.dtype]
    return extent


def _aipp_get_dst_extent(input_format, dst, dst_stride_pixel, params_val):
    is_scalar = params_val.get('is_scalar')
    if is_scalar:
        extent = dst.buffer_size
    else:
        extent = _calculate_dst_extent_aipp(input_format, dst, dst_stride_pixel, params_val)

    if isinstance(extent, BasicExpr):
        extent = extent.get()
    else:
        check_dst_extent(dst, extent)

    return extent


class LoadImageApi(TikIRBuilder):
    """
    load image api
    """

    def __init__(self, tik_instance, load_obj):
        super(LoadImageApi, self).__init__()
        self.tik_instance = tik_instance
        self.dst = load_obj.dst
        self.src0 = load_obj.src0
        self.src1 = load_obj.src1
        self.input_format = load_obj.input_format
        self.function_switch = load_obj.function_switch
        self.src_info = load_obj.src_info
        self.crop_info = load_obj.crop_info
        self.pre_clip_info = load_obj.pre_clip_info
        self.swap_list = load_obj.swap_list
        self.csc_info = load_obj.csc_info
        self.scf_info = load_obj.scf_info
        self.post_clip_info = load_obj.post_clip_info
        self.dtc_info = load_obj.dtc_info
        self.flip_mode = load_obj.flip_mode
        self.channel_pad_info = load_obj.channel_pad_info
        self.area_pad_info = load_obj.area_pad_info
        self.stretch_info = load_obj.stretch_info
        self.raw_info = load_obj.raw_info
        self.sid = load_obj.sid

    @source_info_decorator(depth=2)
    @load_image_decorator
    def run_all(self):
        """
        load_image api run_all
        """
        params_val = {}
        self.load_image_check_arch_version(params_val)

        # src_info
        set_src_info(self.input_format, self.src_info, params_val)

        # check src format by input format
        aipp_check_src(self.input_format, self.src0, self.src1, params_val)

        # function_switch
        set_function_switch_type(self.function_switch, params_val)

        # enable switch
        aipp_set_enable_bit(self.tik_instance, self.input_format, self.function_switch, params_val)

        # crop info
        aipp_set_crop_info(self.tik_instance, self.input_format, self.crop_info, params_val)

        # csc info
        aipp_set_csc_info(self.tik_instance, self.csc_info, params_val)

        # swap info
        aipp_set_swap_info(self.tik_instance, self.input_format, self.swap_list, params_val)

        # pre_clip, scf, post_clip info
        self._set_clip_scf_info(params_val)

        # dtc info
        aipp_set_dtc_info(self.tik_instance, self.dtc_info, params_val)

        # flip_mode
        aipp_set_flip_mode(self.tik_instance, self.flip_mode, params_val)

        # channel_pad info
        aipp_set_channel_pad_info(self.tik_instance, self.channel_pad_info, self.dst.dtype, params_val)

        # area_pad info
        aipp_set_area_pad_info(self.tik_instance, self.input_format, self.area_pad_info, self.dst.dtype, params_val)

        # stretch_info
        dst_stride_pixel = _aipp_get_dst_stride_pixel(self.tik_instance, self.stretch_info, params_val)

        # raw info
        aipp_set_raw_info(self.tik_instance, self.raw_info, params_val)

        # sid
        aipp_check_sid(self.sid)

        # dst_extent
        dst_extent = _aipp_get_dst_extent(self.input_format, self.dst, dst_stride_pixel, params_val)

        # set aipp spr
        self._set_aipp_spr_all(dst_stride_pixel, params_val)

        # set aipp info
        # xs info
        xs_config = [params_val.get('crop_horizontal_size') - 1, params_val.get('crop_vertical_size') - 1,
                     params_val.get('crop_horizontal_start'), params_val.get('crop_vertical_start')]

        # xt info
        xt_config = [params_val.get('src_horizontal_size') - 1, params_val.get('top_pad_rows'),
                     params_val.get('botton_pad_rows'), params_val.get('left_pad_cols'),
                     params_val.get('right_pad_cols'), self.sid]

        with self.tik_instance.new_scope():
            self.tik_instance.scope_attr(tvm.thread_axis("cce"), "coproc_scope", PIPE_MTE2)

            if self.src1 is not None:
                self.tik_instance.scope_attr(
                    tvm.thread_axis("cce"), "append_mem",
                    tvm.call_extern("", "mem_vector", self.src0.access_ptr("r"), self.src1.access_ptr("r")))
            else:
                self.tik_instance.scope_attr(
                    tvm.thread_axis("cce"), "append_mem",
                    tvm.call_extern("", "mem_vector", self.src0.access_ptr("r")))

            instr = tvm.call_extern(self.dst.dtype, "load_image_to_cbuf", self.dst.access_ptr("w", extent=dst_extent),
                                    *type_convert(xs_config + xt_config))
            self.tik_instance.emit(instr)

    def load_image_check_arch_version(self, params_val):
        """
        check arch_version, dst, input_format
        """
        arch_version = get_soc_name() + get_soc_core_type()
        params_val['arch_version'] = get_soc_name() + get_soc_core_type()
        # check arch_version
        aipp_check_arch_version(arch_version)

        # check input format
        aipp_check_input_format(arch_version, self.input_format)

        # check dst format by input format
        aipp_check_dst(self.input_format, self.dst)

    def _get_scalar_addr_uv(self, scalar_addr_y, src_horizontal_size, src_vertical_size):
        scalar_addr_uv = self.tik_instance.scalar_(dtype='uint64', name='scalar_addr_uv', init_value=0)

        if self.src1 is not None:
            scalar_addr_uv.set_as(tvm.tir.Cast("uint64", tvm.call_extern("handle", "", self.src1.access_ptr("r"))))
        else:
            imm_input_format = Expr(self.input_format).eval_value()
            if imm_input_format is None:
                src_channel_scalar = self.tik_instance.scalar_('uint32', 'src_channel_scalar', 0)
                with self.tik_instance.if_scope(self.input_format == 0):
                    src_channel_scalar.set_as(1 * src_horizontal_size * src_vertical_size)
                    scalar_addr_uv.set_as(scalar_addr_y + src_channel_scalar)
                with self.tik_instance.if_scope(self.input_format == 2):
                    src_channel_scalar.set_as(8 * src_horizontal_size * src_vertical_size)
                    scalar_addr_uv.set_as(scalar_addr_y + src_channel_scalar)
                with self.tik_instance.if_scope(self.input_format == 3):
                    src_channel_scalar.set_as(4 * src_horizontal_size * src_vertical_size)
                    scalar_addr_uv.set_as(scalar_addr_y + src_channel_scalar)
                with self.tik_instance.if_scope(self.input_format == 7):
                    src_channel_scalar.set_as(1 * src_horizontal_size * src_vertical_size)
                    scalar_addr_uv.set_as(scalar_addr_y + src_channel_scalar)
            else:
                if self.input_format in (0, 2, 3, 7):
                    src_channel = AIPP_INPUT_TYPE_SWAP_ALIGN.get(self.input_format).get('src0_size_bytes')
                    scalar_addr_uv.set_as(scalar_addr_y + src_horizontal_size * src_vertical_size * src_channel)
        return scalar_addr_uv

    def _set_aipp_spr0(self, dtc_mean0_uint32, dtc_mean1_uint32):
        """
        set spr0
        """
        if is_610_610b_310p_aic():
            sfr_dtc_pixel_mean_ch0 = Expr(dtc_mean0_uint32 // BIT_16)
            sfr_dtc_pixel_mean_ch1 = Expr(dtc_mean1_uint32 // BIT_16)
        else:
            sfr_dtc_pixel_mean_ch0 = AIPP_INIT_VALUE
            sfr_dtc_pixel_mean_ch1 = AIPP_INIT_VALUE

        with self.tik_instance.context.freeze():
            scalar_addr_y = self.tik_instance.scalar_(dtype='uint64', name='scalar_addr_y', init_value=0)
            scalar_addr_y.set_as(tvm.tir.Cast("uint64", tvm.call_extern("handle", "", self.src0.access_ptr("r"))))
            aipp0_config = [scalar_addr_y, sfr_dtc_pixel_mean_ch0, sfr_dtc_pixel_mean_ch1]

            aipp0_register = concat_params(aipp0_config, AIPP0_OFFSET_LIST, AIPP0_SEGMENT_LIST, dtype="uint64")
            with self.tik_instance.new_scope():
                aipp_spr0 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr0.set_as(aipp0_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_0", aipp_spr0.get()))
        return scalar_addr_y

    def _set_aipp_spr1(self, csc_enable, scalar_addr_y, src_horizontal_size, src_vertical_size):
        """
        set spr1
        """
        with self.tik_instance.context.freeze():
            scalar_addr_uv = self._get_scalar_addr_uv(scalar_addr_y, src_horizontal_size, src_vertical_size)
            aipp1_config = [scalar_addr_uv, csc_enable]

            aipp1_register = concat_params(aipp1_config, AIPP1_OFFSET_LIST, AIPP1_SEGMENT_LIST, dtype="uint64")
            with self.tik_instance.new_scope():
                aipp_spr1 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr1.set_as(aipp1_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_1", aipp_spr1.get()))

    def _set_aipp_spr2(self, csc_matrix):
        """
        set spr2
        """
        if is_scalar_array(csc_matrix):
            aipp2_config = [csc_matrix[0], csc_matrix[1], csc_matrix[2], csc_matrix[3]]
        else:
            aipp2_config = [csc_matrix[0][0], csc_matrix[0][1], csc_matrix[0][2], csc_matrix[1][0]]

        aipp2_register = concat_params(aipp2_config, AIPP2_OFFSET_LIST, AIPP2_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr2 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr2.set_as(aipp2_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_2", aipp_spr2.get()))

    def _set_aipp_spr3(self, csc_matrix):
        """
        set spr3
        """
        if is_scalar_array(csc_matrix):
            aipp3_config = [csc_matrix[4], csc_matrix[5], csc_matrix[6], csc_matrix[7]]
        else:
            aipp3_config = [csc_matrix[1][1], csc_matrix[1][2], csc_matrix[2][0], csc_matrix[2][1]]

        aipp3_register = concat_params(aipp3_config, AIPP3_OFFSET_LIST, AIPP3_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr3 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr3.set_as(aipp3_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_3", aipp_spr3.get()))

    def _set_aipp_spr4(self, csc_matrix, csc_out_bias, csc_in_bias):
        """
        set spr4
        """
        if is_scalar_array(csc_matrix):
            aipp4_config = [csc_matrix[8], csc_out_bias[0], csc_out_bias[1], csc_out_bias[2],
                            csc_in_bias[0], csc_in_bias[1],  csc_in_bias[2]]
        else:
            aipp4_config = [csc_matrix[2][2], csc_out_bias[0], csc_out_bias[1], csc_out_bias[2],
                            csc_in_bias[0], csc_in_bias[1], csc_in_bias[2]]

        aipp4_register = concat_params(aipp4_config, AIPP4_OFFSET_LIST, AIPP4_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr4 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr4.set_as(aipp4_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_4", aipp_spr4.get()))

    def _set_aipp_spr5(self, dtc_mean0_uint32, dtc_mean1_uint32, dtc_mean2_uint32, dtc_mean3_uint32):
        """
        set spr5
        """
        aipp5_config = [dtc_mean0_uint32 % BIT_16, dtc_mean1_uint32 % BIT_16,
                        dtc_mean2_uint32 % BIT_16, dtc_mean3_uint32 % BIT_16]

        aipp5_register = concat_params(aipp5_config, AIPP5_OFFSET_LIST, AIPP5_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr5 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr5.set_as(aipp5_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_5", aipp_spr5.get()))

    def _set_aipp_spr6(self, dtc_min0_uint32, dtc_min1_uint32, dtc_min2_uint32, dtc_min3_uint32):
        """
        set spr6
        """
        aipp6_config = [dtc_min0_uint32, dtc_min1_uint32, dtc_min2_uint32, dtc_min3_uint32]
        aipp6_register = concat_params(aipp6_config, AIPP6_OFFSET_LIST, AIPP6_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr6 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr6.set_as(aipp6_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_6", aipp_spr6.get()))

    def _set_aipp_spr7(self, dtc_var0_uint32, dtc_var1_uint32, dtc_var2_uint32, dtc_var3_uint32):
        """
        set spr7
        """
        aipp7_config = [dtc_var0_uint32, dtc_var1_uint32, dtc_var2_uint32, dtc_var3_uint32]
        aipp7_register = concat_params(aipp7_config, AIPP7_OFFSET_LIST, AIPP7_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr7 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr7.set_as(aipp7_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_7", aipp_spr7.get()))

    def _set_aipp_spr8(self, channel0_uint32, channel1_uint32, channel2_uint32, channel3_uint32):
        """
        set spr8
        """
        aipp8_config = [channel0_uint32, channel1_uint32, channel2_uint32, channel3_uint32]
        aipp8_register = concat_params(aipp8_config, AIPP8_OFFSET_LIST, AIPP8_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr8 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr8.set_as(aipp8_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_8", aipp_spr8.get()))

    def _set_aipp_spr9(self, params_val):
        """
        set spr9
        """
        if is_610_610b_310p_aic():
            sfr_dtc_pixel_mean_ch2 = params_val.get('dtc_mean2_uint32') // BIT_16
            sfr_dtc_pixel_mean_ch3 = params_val.get('dtc_mean3_uint32') // BIT_16
        else:
            sfr_dtc_pixel_mean_ch2 = 0
            sfr_dtc_pixel_mean_ch3 = 0

        aipp9_config = [
            params_val.get('channel_pad_value_uint32'), params_val.get('rb_swap'), params_val.get('uv_swap'),
            params_val.get('ax_swap'), self.input_format, params_val.get('single_line_mode'),
            params_val.get('flip_mode') & 1, params_val.get('flip_mode') // 2, params_val.get('area_pad_mode'),
            params_val.get('channel_pad_mode') & 1, params_val.get('raw_to_f16_n'), params_val.get('dtc_mean_type'),
            params_val.get('raw_image_channel'), params_val.get('raw_start_channel'),
            params_val.get('channel_pad_mode') // 2, sfr_dtc_pixel_mean_ch2, sfr_dtc_pixel_mean_ch3
        ]
        aipp9_register = concat_params(aipp9_config, AIPP9_OFFSET_LIST, AIPP9_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr9 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr9.set_as(aipp9_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_9", aipp_spr9.get()))

    def _set_aipp_spr10(self, dst_stride_pixel):
        """
        set spr10
        """
        aipp10_config = [dst_stride_pixel]
        aipp10_register = concat_params(aipp10_config, AIPP10_OFFSET_LIST, AIPP10_SEGMENT_LIST, dtype="uint64")
        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr10 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr10.set_as(aipp10_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_10", aipp_spr10.get()))

    def _set_aipp_spr11(self, pre_botton_clip_number, pre_top_clip_number):
        """
        set spr11
        """
        aipp11_config = [pre_botton_clip_number, pre_top_clip_number]
        aipp11_register = concat_params(aipp11_config, AIPP11_OFFSET_LIST, AIPP11_SEGMENT_LIST, dtype="uint64")
        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr11 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr11.set_as(aipp11_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_11", aipp_spr11.get()))

    def _set_aipp_spr12(self, scf_vertical_size, scf_horizontal_size):
        """
        set spr12
        """
        aipp12_config = [scf_vertical_size - 1, scf_horizontal_size - 1]
        aipp12_register = concat_params(aipp12_config, AIPP12_OFFSET_LIST, AIPP12_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr12 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr12.set_as(aipp12_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_12", aipp_spr12.get()))

    def _set_aipp_spr13(self, params_val):
        """
        set spr13
        """
        aipp13_config = [params_val.get('hori_scaling_enable'), params_val.get('vertical_scaling_enable'),
                         params_val.get('order_hori_vert_filter'), params_val.get('vert_scaling_mode'),
                         params_val.get('alpha_vert_scaling_mode'), params_val.get('hori_scaling_mode'),
                         params_val.get('alpha_hori_scaling_mode')]
        aipp13_register = concat_params(aipp13_config, AIPP13_OFFSET_LIST, AIPP13_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr13 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr13.set_as(aipp13_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_13", aipp_spr13.get()))

    def _set_aipp_spr15(self, init_vert_phase, init_hori_phase):
        """
        set spr15
        """
        aipp15_config = [init_vert_phase, init_hori_phase]
        aipp15_register = concat_params(aipp15_config, AIPP15_OFFSET_LIST, AIPP15_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr15 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr15.set_as(aipp15_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_15", aipp_spr15.get()))

    def _set_aipp_spr16(self, vert_scaling, hori_scaling):
        """
        set spr16
        """
        aipp16_config = [vert_scaling, hori_scaling]
        aipp16_register = concat_params(aipp16_config, AIPP16_OFFSET_LIST, AIPP16_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr16 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr16.set_as(aipp16_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_16", aipp_spr16.get()))

    def _set_aipp_spr17(self, params_val):
        """
        set spr17
        """
        aipp17_config = [params_val.get('post_botton_clip_number'), params_val.get('post_top_clip_number'),
                         params_val.get('post_right_clip_number'), params_val.get('post_left_clip_number'),
                         params_val.get('post_clip_enable')]
        aipp17_register = concat_params(aipp17_config, AIPP17_OFFSET_LIST, AIPP17_SEGMENT_LIST, dtype="uint64")

        with self.tik_instance.context.freeze():
            with self.tik_instance.new_scope():
                aipp_spr17 = self.tik_instance.scalar_(dtype="uint64")
                aipp_spr17.set_as(aipp17_register)
                self.tik_instance.emit(tvm.call_extern("uint64", "set_aipp_spr_17", aipp_spr17.get()))

    def _set_clip_scf_info(self, params_val):
        if TikSocManager.is_hisi_soc():
            # pre clip info
            aipp_set_pre_clip_info(self.tik_instance, self.pre_clip_info, params_val)

            # scf info
            aipp_set_scf_info(self.tik_instance, self.scf_info, params_val)

            # post_clip info
            aipp_set_post_clip_info(self.tik_instance, self.post_clip_info, params_val)

        else:
            params_val['pre_top_clip_number'] = AIPP_INIT_VALUE
            params_val['pre_botton_clip_number'] = AIPP_INIT_VALUE
            params_val['scf_horizontal_size'] = AIPP_INIT_VALUE
            params_val['scf_vertical_size'] = AIPP_INIT_VALUE
            params_val['alpha_hori_scaling_mode'] = AIPP_INIT_VALUE
            params_val['hori_scaling_mode'] = AIPP_INIT_VALUE
            params_val['alpha_vert_scaling_mode'] = AIPP_INIT_VALUE
            params_val['vert_scaling_mode'] = AIPP_INIT_VALUE
            params_val['order_hori_vert_filter'] = AIPP_INIT_VALUE
            params_val['vertical_scaling_enable'] = AIPP_INIT_VALUE
            params_val['hori_scaling_enable'] = AIPP_INIT_VALUE
            params_val['init_vert_phase'] = AIPP_INIT_VALUE
            params_val['init_hori_phase'] = AIPP_INIT_VALUE
            params_val['vert_scaling'] = AIPP_INIT_VALUE
            params_val['hori_scaling'] = AIPP_INIT_VALUE
            params_val['post_botton_clip_number'] = AIPP_INIT_VALUE
            params_val['post_top_clip_number'] = AIPP_INIT_VALUE
            params_val['post_right_clip_number'] = AIPP_INIT_VALUE
            params_val['post_left_clip_number'] = AIPP_INIT_VALUE

    def _get_scalar_addr_y(self):
        scalar_addr_y = self.tik_instance.scalar_(dtype='uint64', name='scalar_addr_y', init_value=0)
        scalar_addr_y.set_as(tvm.tir.Cast("uint64", tvm.call_extern("handle", "", self.src0.access_ptr("r"))))
        return scalar_addr_y

    def _set_aipp_spr_all(self, dst_stride_pixel, params_val):
        # get scalar_addr_y

        # aipp SPR0
        scalar_addr_y = self._set_aipp_spr0(params_val.get('dtc_mean0_uint32'), params_val.get('dtc_mean1_uint32'))

        # aipp SPR1
        self._set_aipp_spr1(params_val.get('csc_enable'), scalar_addr_y,
                            params_val.get('src_horizontal_size'), params_val.get('src_vertical_size'))
        # aipp SPR2
        self._set_aipp_spr2(params_val.get('csc_matrix'))
        # aipp SPR3
        self._set_aipp_spr3(params_val.get('csc_matrix'))
        # aipp SPR4
        self._set_aipp_spr4(params_val.get('csc_matrix'), params_val.get('csc_out_bias'), params_val.get('csc_in_bias'))
        # aipp SPR5
        self._set_aipp_spr5(params_val.get('dtc_mean0_uint32'), params_val.get('dtc_mean1_uint32'),
                            params_val.get('dtc_mean2_uint32'), params_val.get('dtc_mean3_uint32'))
        # aipp SPR6
        self._set_aipp_spr6(params_val.get('dtc_min0_uint32'), params_val.get('dtc_min1_uint32'),
                            params_val.get('dtc_min2_uint32'), params_val.get('dtc_min3_uint32'))
        # aipp SPR7
        self._set_aipp_spr7(params_val.get('dtc_var0_uint32'), params_val.get('dtc_var1_uint32'),
                            params_val.get('dtc_var2_uint32'), params_val.get('dtc_var3_uint32'))
        # padding_mode:0 set
        # aipp SPR8 (padding_mode)
        self._set_aipp_spr8(params_val.get('channel0_pad_value_uint32'), params_val.get('channel1_pad_value_uint32'),
                            params_val.get('channel2_pad_value_uint32'), params_val.get('channel3_pad_value_uint32'))
        # aipp SPR9
        self._set_aipp_spr9(params_val)

        if TikSocManager.is_hisi_soc():
            # aipp SPR10
            self._set_aipp_spr10(dst_stride_pixel)
            # aipp SPR11
            self._set_aipp_spr11(params_val.get('pre_botton_clip_number'), params_val.get('pre_top_clip_number'))
            # aipp SPR12
            self._set_aipp_spr12(params_val.get('scf_vertical_size'), params_val.get('scf_horizontal_size'))
            # aipp SPR13
            self._set_aipp_spr13(params_val)
            # aipp SPR15
            self._set_aipp_spr15(params_val.get('init_vert_phase'), params_val.get('init_hori_phase'))
            # aipp SPR16
            self._set_aipp_spr16(params_val.get('vert_scaling'), params_val.get('hori_scaling'))
            # aipp SPR17
            self._set_aipp_spr17(params_val)
