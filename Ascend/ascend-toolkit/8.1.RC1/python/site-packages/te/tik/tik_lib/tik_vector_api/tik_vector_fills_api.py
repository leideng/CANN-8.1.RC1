#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_fills_api.py
DESC:     provide params
CREATED:  2021-10-26 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""

from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import DupOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import NanoDupOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import VpaddingOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import VbcbOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_fills_api_ import NanoVbcbOpApi
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class VectorFillsApi(TikIRBuilder):
    """
    Data Fills
    """
    dup_api = namedtuple('DupApi', ["name", "mask", "dst", "scalar", "repeat_times", "dst_blk_stride",
                                    "dst_rep_stride", "stride_unit", "mask_mode"])
    vpadding_api = namedtuple('VpaddingApi', ["name", "mask", "pad_mode", "pad_side", "dst", "src", "repeat_times",
                                              "dst_blk_stride", "src_blk_stride", "dst_rep_stride", "src_rep_stride",
                                              "stride_unit", "mask_mode"])
    vbcb_api = namedtuple('VbcbOpApi', ["name", "dst", "src", "repeat_times", "dst_blk_stride", "dst_rep_stride"])

    def vector_dup(self, mask, dst, scalar, repeat_times, dst_blk_stride, dst_rep_stride, stride_unit=0):
        """
        copy scalar to vector

        Parameters
        ----------
        dst : destination operator
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        scalar : the copied scalar
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one iteration
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """

        fills_api = VectorFillsApi.dup_api('vector_dup', mask, dst, scalar, repeat_times, dst_blk_stride,
                                           dst_rep_stride, stride_unit, mask_mode="normal")
        if TikSocManager.is_nano_soc():
            dup_obj = NanoDupOpApi(self, fills_api)
        else:
            dup_obj = DupOpApi(self, fills_api)
        dup_obj.run_all()

    def vci(self, mask, dst_index, start_point, repeat_times, dst_blk_stride, dst_rep_stride,
            stride_unit=0, mask_mode="normal"):
        """
        creat vector indexes from a start point

        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst_index : destination operator
        start_point : the start point
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one iteration
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        dst = dst_index
        scalar = start_point
        fills_api = VectorFillsApi.dup_api('vci', mask, dst, scalar, repeat_times, dst_blk_stride,
                                           dst_rep_stride, stride_unit, mask_mode)
        vci_obj = DupOpApi(self, fills_api)
        vci_obj.run_all()

    def vpadding(self, mask, pad_mode, pad_side, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                 dst_rep_stride, src_rep_stride, stride_unit=0, mask_mode="normal"):
        """
        padding src tensor

        Parameters
        ----------
        mask:
        pad_mode:0 -> nearest-padding(aaa|a)
        -        1 -> symmetric_padding0(abc|cba)
        -        2 -> symmetric_padding1(ab|cba)
        pad_side: 'left'/'right'.
        dst: dst operator
        src: src operator
        repeat_times: Repeated iterations times
        dst_blk_stride: offset of dst operator between different block in one iteration
        src_blk_stride: offset of src operator between different block in one iteration
        dst_rep_stride: offset of dst operator in the same block between adjacent iterations
        src_rep_stride: offset of src operator in the same block between adjacent iterations
        stride_unit: address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        vpadding_api = VectorFillsApi.vpadding_api("vpadding", mask, pad_mode, pad_side, dst, src, repeat_times,
                                                   dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
                                                   stride_unit, mask_mode)
        vpadding_obj = VpaddingOpApi(self, vpadding_api)
        vpadding_obj.run_all()

    def vbcb(self, dst, src, repeat_times, dst_blk_stride, dst_rep_stride):
        """
        Do broadcast with block.

        Parameters
        ----------
        dst : destination operator
        src : source operator
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats

        Returns
        -------
        None
        """
        vbcb_api = VectorFillsApi.vbcb_api("vbcb", dst, src, repeat_times, dst_blk_stride, dst_rep_stride)
        if TikSocManager.is_nano_soc():
            vbcb_obj = NanoVbcbOpApi(self, vbcb_api)
        else:
            vbcb_obj = VbcbOpApi(self, vbcb_api)
        vbcb_obj.run_all()
