#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_single_api.py
DESC:     v210 single api
CREATED:  2021-11-25 19:48
MODIFIED: 2021-11-25 19:48
"""
from tbe import tvm
from tbe.tik.common.util import DTYPE_SIZE
from tbe.tik.api.tik_scalar import Scalar
from tbe.common.platform import intrinsic_check_support
from tbe.common.platform import scope_preg
from tbe.tik.common.util import TikCheckUtil
from tbe.tik.debug.decorators_vsqz import get_vsqz_elem_count_decorators
from tbe.tik.tik_lib.tik_params import gen_api_check_statement
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_api_constants import DTYPE_MAP
from tbe.tik.tik_lib.tik_check_util import print_error_msg
from tbe.tik.tik_lib.tik_vector_new_api.tik_vector_new_api_base import TikVectorNewApiBase
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class TikVectorSingleApi(TikVectorNewApiBase):
    """
    tik vector api contain single mask,
    single dst and single src
    """

    @source_info_decorator()
    def vector_vcmax(self, mask, dst, src):
        """

        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vcmax", mask, dst, src, None, None, None)
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode="MODE_MERGING")

    @source_info_decorator()
    def vector_vcmin(self, mask, dst, src):
        """

        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vcmin", mask, dst, src, None, None, None)
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode="MODE_MERGING")

    @source_info_decorator()
    def vector_vcadd(self, mask, dst, src):
        """

        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vcadd", mask, dst, src, None, None, None)
        mode = "MODE_MERGING"
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vexp(self, mask, dst, src):
        """
        Do exp by single element.
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vexp"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, "MODE_MERGING", dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vrsqrt(self, mask, dst, src):
        """
        Do reciprocal square root element.
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vrsqrt"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, "MODE_MERGING", dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vln(self, mask, dst, src):
        """
        do ln(x) of single element
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vln"
        mode = "MODE_MERGING"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, mode, dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vrec(self, mask, dst, src):
        """
        Do vrec by single element.
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vrec"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, "MODE_MERGING", dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vrelu(self, mask, dst, src):
        """
        Do vrelu by single element, predication mode is merge mode
        Parameters
        ----------
        mask: effective operation on element, only support Continuous model
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vrelu"
        mode = "MODE_MERGING"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, mode, dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vrelu", mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vsqrt(self, mask, dst, src):
        """
        do vector square root  for element
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vsqrt"
        mode = "MODE_MERGING"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, mode, dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vneg(self, mask, dst, src):
        """
        do vector negation for element
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vneg", mask, dst, src, None, None, None)
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode="MODE_MERGING")

    @source_info_decorator()
    def vector_vbcnt(self, mask, dst, src):
        """
        do count bit 1 numbers  for element
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vbcnt"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, "MODE_MERGING", dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vcls(self, mask, dst, src):
        """
        do count leading sign bits of element
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vcls", mask, dst, src, None, None, None)
        mode = "MODE_MERGING"
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vmov(self, mask, dst, src):
        """
        Do move active elements

        If mask is None, vectorized_vmov instruction is used, which moves all
        data form src into dst, or vectorized_vsel instruction is used, which
        moves src's active elements into dst, predication mode is merge mode.

        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vmov"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)

        if dst.scope == scope_preg:
            name = "vectorized_pmov"
            vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
            self._vector_mask_mov_make_code(vec_op_params_ins)
        else:
            if mask is None:
                vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
                self._vector_vmov_make_code(vec_op_params_ins)
            else:
                name = "vectorized_vsel"
                dtype_str = DTYPE_MAP[src.dtype] + DTYPE_MAP[dst.dtype]
                dtype_str_error = "src " + src.dtype + " dst " + dst.dtype
                TikCheckUtil.check_equality(
                    intrinsic_check_support("Intrinsic_" + name, dtype_str), True,
                    gen_api_check_statement(dtype_str_error, "vector_vmov"))
                vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, None, None, src, dst)
                self._vector_reg_binary_tenary_elewise_code(vec_op_params_ins)

    @source_info_decorator()
    def vector_vnot(self, mask, dst, src):
        """
        do elements not op according the mask, pnot and vnot
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vnot"
        mode = "MODE_MERGING"
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, mode, dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    def vector_vsqz(self, mask, dst, src):
        """
        do squeeze of src element into dst
        Parameters
        ----------
        mask: effective operation on element, only support Continuous model
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        name = "vectorized_vsqz"
        mode = None
        self.check_params_obj.check_reg_sig_ele_wise_params(name, dst, src)
        name, mode, dst = self.check_mode_name(name, mode, dst)
        vec_op_params_ins = TikVectorSingleApi.vec_op_params(name, mask, dst, src, None, None, None)
        return self._vector_reg_single_elewise_func(vec_op_params_ins, mode=mode)

    @source_info_decorator()
    @get_vsqz_elem_count_decorators
    def get_vsqz_elem_count(self, src):
        """
        get ar value

        Returns
        -------
        orig_ctrl: original value of ar
        """
        # save scalar
        if not isinstance(src, Scalar):
            print_error_msg("Src must be a Scalar")
        if isinstance(src, Scalar) and src.dtype not in ["uint8", "int8", "uint16", "int16", "uint32", "int32"]:
            print_error_msg("Src's dtype must be in ['uint8', 'int8', 'uint16', 'int16',"
                            " 'uint32', 'int32'].")
            
        #  The value obtained by get_ar is dtypesize multiplied by the number of elements.
        with self.new_scope():
            self.emit(
                tvm.call_extern(src.dtype, "reg_set", src.get(),
                                tvm.call_extern(src.dtype, "get_ar") // DTYPE_SIZE.get(src.dtype)))

    @source_info_decorator()
    def vector_vabs(self, mask, dst, src):
        """
        Calculate abs of src to dst, predication mode is merge mode
        Parameters
        ----------
        mask: effective operation on element, only support Continuous model
        dst: vector destination operator
        src: vector source operation

        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorSingleApi.vec_op_params("vectorized_vabs", mask, dst, src, None, None, None)
        mode = "MODE_MERGING"
        return self._vector_reg_whole_reduce_func(vec_op_params_ins, mode=mode)
