#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_preg_api.py
DESC:     provide vector instructions
CREATED:  2020-03-10 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""

from collections import namedtuple
from tbe.common.platform import intrinsic_check_support
from tbe.tik.common.util import TikCheckUtil
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_params import gen_api_check_statement
from tbe.tik.api.tik_vector import Vector
from tbe.tik.tik_lib.tik_params import PAT_STR_MODE
from tbe.tik.tik_lib.tik_vector_new_api.tik_preg_api_ import TikPregApiInner


class TikPregApi(TikPregApiInner):
    """
    Vector, Serialization, Spr Operation Api
    """
    tik_preg_api = namedtuple("PregApi", "mask dtype set_mode")

    def __init__(self):
        super(TikPregApi, self).__init__()
        self.core_arch = None
        self.core_version = None

    @staticmethod
    def preg_check_params(mask, set_mode, dtype, instr_name):
        """
        check params
        :param mask: mask
        :param set_mode: mask mode
        :param dtype: mask dtype
        :param instr_name: instr name
        :return: None
        """
        TikCheckUtil.check_type_match(
            set_mode, (str,),
            "Instruction vector_vset's set_mode should be string, input type of set_mode: %s" % type(set_mode))

        TikCheckUtil.check_var_in_list(
            set_mode, PAT_STR_MODE, "Instruction vector_vset's set_mode must be in [%s]" % PAT_STR_MODE.keys())

        TikCheckUtil.check_type_match(mask, Vector, "Instruction vector_vset's mask should be Vector")
        TikCheckUtil.check_equality(mask.dtype, "bool", "Instruction vector_vset's mask's dtype must be bool")

        TikCheckUtil.check_equality(intrinsic_check_support("Intrinsic_" + instr_name, dtype), True,
                                    gen_api_check_statement(dtype, "vector_vset"))

    @source_info_decorator()
    def vector_vset(self, mask, dtype, set_mode="ALL"):
        """
        set preg instruction according set_mode
        Parameters
        ----------
        mask: predicate register
        dtype: data type of Vector Register, available bits of mask depend dtype
        set_mode: preg set mode, default all bit to true

        Returns
        -------
        None
        """
        instr_name = "vectorized_pset"

        self.preg_check_params(mask, set_mode, dtype, instr_name)
        str_part_mode = PAT_STR_MODE.get(set_mode)
        tik_preg_api_ins = TikPregApi.tik_preg_api(mask, dtype, str_part_mode)
        self._vector_pset_code_make(tik_preg_api_ins)
