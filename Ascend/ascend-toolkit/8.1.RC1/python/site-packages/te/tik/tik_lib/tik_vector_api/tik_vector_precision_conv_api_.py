#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_precision_conv_api_.py
DESC:     provide vector instructions
CREATED:  2021-10-27 10:36:42
"""
from tbe import tvm
from tbe.tik import debug
from tbe.tik.tik_lib.tik_util import type_convert
from tbe.tik.tik_lib.tik_api_util import reset_ctrl_value
from tbe.tik.tik_lib.tik_params import PIPE_V
from tbe.tik.tik_lib.tik_api_util import set_ctrl_counter_mask
from tbe.tik.tik_lib.tik_vector_api.tik_compute_control import ControlOp
from tbe.tik.tik_lib.tik_vector_api.tik_vcbd_op import VcbdOp
from tbe.tik.tik_lib.tik_vector_api.tik_params_check import PrecisionConvCheckParams
from tbe.tik.tik_lib.tik_vector_api.tik_vector_name_map import SINGLE_NAME_DICT
from tbe.tik.tik_lib.tik_api_constants import DTYPE_MAP
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class PrecisionConvOps:
    """
    Double Vector Ops
    """

    def __init__(self, tik_instance, precision_conv_api):
        super().__init__()
        self.tik_instance = tik_instance
        self.name = SINGLE_NAME_DICT.get(precision_conv_api.name)
        self.print_name = precision_conv_api.name
        self.control_op = ControlOp(precision_conv_api.mask, precision_conv_api.repeat_times,
                                    precision_conv_api.stride_unit, precision_conv_api.mask_mode)
        self.dst_tensor_op = VcbdOp(precision_conv_api.dst, precision_conv_api.dst_blk_stride,
                                    precision_conv_api.dst_rep_stride, "dst")
        self.src_tensor_op = VcbdOp(precision_conv_api.src, precision_conv_api.src_blk_stride,
                                    precision_conv_api.src_rep_stride, "src")
        self.repeat_times = precision_conv_api.repeat_times
        self.stride_unit = precision_conv_api.stride_unit
        # debug check instance
        self.check_params = (self.dst_tensor_op, self.src_tensor_op, self.control_op)
        self.precision_conv_check_obj = PrecisionConvCheckParams(self.print_name, self.check_params, self.name)
        self.mask_o = None

    @debug.vec_single_elewise_func_dec_new
    def gen_code(self):
        """
        code gen

        Returns
        -------
        None
        """
        orig_ctrl = ""
        config = [
            self.control_op.repeat_times, self.dst_tensor_op.blk_stride, self.src_tensor_op.blk_stride,
            self.dst_tensor_op.rep_stride, self.src_tensor_op.rep_stride, self.control_op.stride_unit & 0b01,
                                                                          (self.control_op.stride_unit & 0b10) >> 1
        ]

        name = "%s_%s2%s" % (self.name, DTYPE_MAP.get(self.src_tensor_op.tensor_obj.dtype), DTYPE_MAP.get(
            self.dst_tensor_op.tensor_obj.dtype))
        if TikSocManager.is_v300_610l_soc():
            config.append(self.control_op.mask_mode)
        else:
            if self.control_op.mask_mode == "counter":
                orig_ctrl = set_ctrl_counter_mask(self.tik_instance)
        with self.tik_instance.new_scope():
            if TikSocManager.is_v300_610l_soc():
                self.tik_instance.add_source_id()
            instr = tvm.call_extern(self.dst_tensor_op.tensor_obj.dtype, name,
                                    self.dst_tensor_op.tensor_obj.access_ptr("w"),
                                    self.src_tensor_op.tensor_obj.access_ptr("r"),
                                    *type_convert(config))
            self.tik_instance.emit(tvm.call_extern("int64", "set_vector_mask", *self.mask_o))
            self.tik_instance.scope_attr(tvm.thread_axis("cce"), "coproc_scope", PIPE_V)
            self.tik_instance.emit(instr)
        if self.control_op.mask_mode == "counter" and not TikSocManager.is_v300_610l_soc():
            reset_ctrl_value(self.tik_instance, orig_ctrl)

    @source_info_decorator(depth=2)
    def run_all(self):
        """
        run all_check and code_gen

        Returns
        -------
        None
        """
        self.mask_o = self.precision_conv_check_obj.check_all(self.tik_instance)
        self.gen_code()
