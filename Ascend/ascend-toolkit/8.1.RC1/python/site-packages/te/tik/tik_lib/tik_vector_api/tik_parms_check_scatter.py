#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_params_check_scatter.py
DESC:     scatter_gather params
CREATED:  2021-11-19 11:17:42
MODIFIED: 2021-11-26 10:50:15
"""
from tbe.common.platform import intrinsic_check_support
from tbe.tik.common.util import get_bit_len
from tbe.tik.tik_lib.tik_params import BLK_NUM_PER_REP
from tbe.tik.tik_lib.tik_params import MAX_BLK_STRIDE_SINGLE_BYTE
from tbe.tik.tik_lib.tik_params import MAX_REP_STRIDE_12_BITS
from tbe.tik.tik_lib.tik_params import ONE_REP_BYTE_SIZE
from tbe.tik.tik_lib.tik_api_constants import DTYPE_MAP
from tbe.tik.tik_lib.tik_params import MAX_REP_STRIDE_SINGLE_BYTE
from tbe.tik.tik_lib.tik_params import gen_api_check_statement
from tbe.tik.tik_lib.tik_api_util import check_repeat_times
from tbe.tik.tik_lib.tik_api_util import check_stride_unit
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil


class CheckParams:
    """
    Scatter_Gather Params Check
    """
    def __init__(self, print_name, params_list):
        self.print_name = print_name
        self.name = self.print_name
        if self.print_name == "vscatter":
            self.dst_tensor_op, self.src_tensor_op, self.dst_offset_tensor_op, \
                self.control_op, self.base_addr = params_list
        elif self.print_name == "vgather":
            self.dst_tensor_op, self.src_tensor_op, self.src_offset_tensor_op, \
                self.control_op, self.base_addr = params_list

    def check_repeat_times(self):
        """
        check repeat_times

        Returns
        -------
        None
        """
        check_repeat_times(self.control_op.repeat_times)

    def check_dtype_support(self):
        """
        check vector_dtype support

        Returns
        -------
        None
        """
        TikCheckUtil.check_equality(self.dst_tensor_op.tensor_obj.dtype, self.src_tensor_op.tensor_obj.dtype,
                                    "Intrinsic {}'s src's dtype should be "
                                    "equal to dst's dtype".format(self.print_name))
        TikCheckUtil.check_equality(
            intrinsic_check_support("Intrinsic_" + self.print_name, self.dst_tensor_op.tensor_obj.dtype), True,
            gen_api_check_statement(self.dst_tensor_op.tensor_obj.dtype, self.print_name))

    def check_all(self, tik_instance):
        """
        all check

        Returns
        -------
        mask_o
        """
        # check tensor's tensor, scope, address, rep stride and blk stride
        self.dst_tensor_op.check_tensor_and_scope()
        self.src_tensor_op.check_tensor_and_scope()
        self.check_dtype_support()
        self.dst_tensor_op.check_tensor_op_address_align(self.name)
        self.src_tensor_op.check_tensor_op_address_align(self.name)
        self.control_op.check_mask_mode()
        tensor_bit_len_max = max(get_bit_len(self.src_tensor_op.tensor_obj.dtype),
                                 get_bit_len(self.dst_tensor_op.tensor_obj.dtype))
        mask_o = self.control_op.check_and_gen_mask_o(tik_instance, tensor_bit_len_max)
        self.check_repeat_times()
        check_stride_unit(self.control_op.stride_unit)
        # check tensor overflow
        tensor_bit_len = get_bit_len(self.src_tensor_op.tensor_obj.dtype)
        block_list = [BLK_NUM_PER_REP, ONE_REP_BYTE_SIZE // tensor_bit_len]
        self.dst_tensor_op.set_rep_stride_value()
        if self.print_name == "vscatter":
            self.dst_offset_tensor_op.check_vscatter_vgather_offset(self.print_name)
            self.dst_offset_tensor_op.check_vscatter_vgather_offset_align()
            self.dst_tensor_op.check_vscatter_vgather_base_addr(self.base_addr)
            self.src_tensor_op.check_tensor_op_rep_stride(MAX_REP_STRIDE_SINGLE_BYTE)
            self.src_tensor_op.check_vscatter_vgather_offset_overflow(self.dst_offset_tensor_op, self.control_op,
                                                                      block_list)
        elif self.print_name == "vgather":
            self.src_offset_tensor_op.check_vscatter_vgather_offset(self.print_name)
            self.src_offset_tensor_op.check_vscatter_vgather_offset_align()
            self.src_tensor_op.check_vscatter_vgather_base_addr(self.base_addr)
            self.dst_tensor_op.check_tensor_op_rep_stride(MAX_REP_STRIDE_SINGLE_BYTE)
            self.dst_tensor_op.check_vscatter_vgather_offset_overflow(self.src_offset_tensor_op, self.control_op,
                                                                      block_list)

        return mask_o


class VGatherbCheckParams(CheckParams):
    """
    VGatherb Params Check
    """
    def __init__(self, print_name, params_list):
        super(VGatherbCheckParams, self).__init__(print_name, params_list)
        self.print_name = print_name
        self.name = self.print_name
        self.dst_tensor_op, self.src_tensor_op, self.src_offsets_tensor_op, self.control_op = params_list

    def check_repeat_times(self):
        """
        check repeat_times

        Returns
        -------
        None
        """
        check_repeat_times(self.control_op.repeat_times)

    def check_dtype_support(self):
        """
        check vector_dtype support

        Returns
        -------
        None
        """
        dtype_str = DTYPE_MAP.get(self.src_tensor_op.tensor_obj.dtype) + DTYPE_MAP.get(
            self.dst_tensor_op.tensor_obj.dtype)
        msg = "src: " + self.src_tensor_op.tensor_obj.dtype + ", dst: " + self.dst_tensor_op.tensor_obj.dtype
        TikCheckUtil.check_equality(
            intrinsic_check_support("Intrinsic_" + self.print_name, dtype_str), True,
            gen_api_check_statement(msg, self.print_name))

    def check_all(self, tik_instance):
        self.dst_tensor_op.check_tensor_and_scope()
        self.src_tensor_op.check_tensor_and_scope()
        self.check_dtype_support()
        self.src_offsets_tensor_op.check_vscatter_vgather_offset(self.print_name)
        self.src_offsets_tensor_op.check_vscatter_vgather_offset_align()
        self.dst_tensor_op.check_tensor_op_address_align(self.name)
        self.src_tensor_op.check_tensor_op_address_align(self.name)
        self.check_repeat_times()
        self.dst_tensor_op.set_rep_stride_value()
        self.dst_tensor_op.set_blk_stride_value()
        self.dst_tensor_op.check_tensor_op_blk_stride(MAX_BLK_STRIDE_SINGLE_BYTE)
        self.dst_tensor_op.check_tensor_op_rep_stride(MAX_REP_STRIDE_12_BITS)
        value_range = (self.control_op.repeat_times, self.dst_tensor_op.blk_stride, self.dst_tensor_op.rep_stride)
        if all(isinstance(value, int) for value in value_range):
            self.src_offsets_tensor_op.check_vgatherb_overflow_with_fixed_length(self.control_op)
            self.dst_tensor_op.check_vgatherb_tensor_overflow(self.print_name, self.src_tensor_op, self.control_op)

        self.dst_tensor_op.check_vgatherb_overlap(self.src_tensor_op, self.src_offsets_tensor_op)
