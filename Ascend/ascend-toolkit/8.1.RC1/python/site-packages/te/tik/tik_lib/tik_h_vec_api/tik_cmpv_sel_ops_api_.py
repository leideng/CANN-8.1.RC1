#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_cmp_sel_ops_api_.py
DESC:     cmp and sel operations vector instructions for tik 1.5
CREATED:  2021-06-24 18:53:42
MODIFIED: 2021-06-24 19:17:00
"""

from collections import namedtuple
from tbe import tvm
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_cmpv_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_sel_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_util_ import set_tik_version_1_5
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_h_vec_api.tik_h_vec_api_base_ import TikHVecApiBase
from tbe.tik.api.tik_tensor import Tensor
from tbe.tik.api.tik_scalar import Scalar
from tbe.tik.debug.decorators_high_vec import cmpv_debug_for_high_api
from tbe.tik.debug.decorators_high_vec import sel_debug_for_high_api


class TikCmpSelOpsApi(TikHVecApiBase):
    """
    Cmp and Sel Operation Api
    """
    cmp_ops_api = namedtuple("CmpOps", "mask_tensor src0 src1 cmp_mode api_name")
    sel_ops_api = namedtuple("SelOps", "dst src0 src1 mask_tensor api_name")

    def __init__(self):
        super(TikCmpSelOpsApi, self).__init__()
        self.core_arch = None
        self.core_version = None
        self.ir_generator = self

    @source_info_decorator()
    def h_cmpv(self, mask_tensor, src0, src1, cmp_mode):
        """
        vector cmpv for tik 1.5
        Parameters
        ----------
        mask_tensor: Bool Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice
        cmp_mode: string cmp mode, can be "LT", "LE", "GT", "GE", "EQ", "NE"

        Returns
        -------
        None
        """
        api_name = "h_cmpv"
        cmp_ops_api_ins = TikCmpSelOpsApi.cmp_ops_api(mask_tensor, src0, src1, cmp_mode, api_name)
        check_cmpv_ops_params(cmp_ops_api_ins)
        self._cmpv_ops_code_make(cmp_ops_api_ins)

    @source_info_decorator()
    def h_sel(self, dst, src0, src1, mask_tensor):
        """
        vector sel for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice
        mask_tensor: Bool Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_sel"
        sel_ops_api_ins = TikCmpSelOpsApi.sel_ops_api(dst, src0, src1, mask_tensor, api_name)
        check_sel_ops_params(sel_ops_api_ins)
        self._sel_ops_code_make(sel_ops_api_ins)

    @set_tik_version_1_5()
    @cmpv_debug_for_high_api
    def _cmpv_ops_code_make(self, code_make_params):
        """
        code maker for double ops instruction
        """
        instr_args = []
        if isinstance(code_make_params.src0, Tensor) and isinstance(code_make_params.src1, Tensor):
            instr_args = [code_make_params.mask_tensor.info_node, code_make_params.src0.info_node,
                          code_make_params.src1.info_node, code_make_params.cmp_mode]
        elif isinstance(code_make_params.src0, Tensor) and\
                isinstance(code_make_params.src1, (int, float, Scalar, Expr)):
            instr_args = [code_make_params.mask_tensor.info_node,
                          code_make_params.src0.info_node,
                          Expr(code_make_params.src1, code_make_params.src0.dtype).get(), code_make_params.cmp_mode]
        elif isinstance(code_make_params.src0, (int, float, Scalar, Expr)) and\
                isinstance(code_make_params.src1, Tensor):
            instr_args = [code_make_params.mask_tensor.info_node,
                          Expr(code_make_params.src0, code_make_params.src1.dtype).get(),
                          code_make_params.src1.info_node, code_make_params.cmp_mode]
        with self.new_scope():
            self.add_source_id()
            self.ir_generator.emit(tvm.tir.Evaluate(tvm.call_cce_intrin("int32", code_make_params.api_name,
                                                                        *instr_args)))

    @set_tik_version_1_5()
    @sel_debug_for_high_api
    def _sel_ops_code_make(self, code_make_params):
        """
        code maker for double ops instruction
        """
        instr_args = []
        if isinstance(code_make_params.src0, Tensor) and isinstance(code_make_params.src1, Tensor):
            instr_args = [code_make_params.dst.info_node, code_make_params.src0.info_node,
                          code_make_params.src1.info_node, code_make_params.mask_tensor.info_node]
        elif isinstance(code_make_params.src0, Tensor) and\
                isinstance(code_make_params.src1, (int, float, Scalar, Expr)):
            instr_args = [code_make_params.dst.info_node, code_make_params.src0.info_node,
                          Expr(code_make_params.src1, code_make_params.dst.dtype).get(),
                          code_make_params.mask_tensor.info_node]
        elif isinstance(code_make_params.src0, (int, float, Scalar, Expr)) and\
                isinstance(code_make_params.src1, Tensor):
            instr_args = [code_make_params.dst.info_node,
                          Expr(code_make_params.src0, code_make_params.dst.dtype).get(),
                          code_make_params.src1.info_node, code_make_params.mask_tensor.info_node]
        with self.new_scope():
            self.add_source_id()
            self.ir_generator.emit(tvm.tir.Evaluate(tvm.call_cce_intrin("int32", code_make_params.api_name,
                                                                        *instr_args)))
