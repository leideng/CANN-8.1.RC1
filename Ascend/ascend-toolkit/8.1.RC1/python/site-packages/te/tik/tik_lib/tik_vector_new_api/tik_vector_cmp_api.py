#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_cmp_api.py
DESC:     tik v210 cmp api
CREATED:  2021-11-25 19:48
MODIFIED: 2021-11-25 19:48
"""

from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_vector_new_api.tik_vector_new_api_base import TikVectorNewApiBase


class TikVectorCmpApi(TikVectorNewApiBase):
    """
    tik vector cmp api
    """
    @source_info_decorator()
    def vector_vcmp_ne(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_ne", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmp_gt(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_gt", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmp_ge(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_ge", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmp_lt(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_lt", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmp_le(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_le", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_eq(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_eq", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_ne(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_ne", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_gt(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_gt", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_ge(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_ge", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_lt(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_lt", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmps_le(self, mask, dst, src, scalar):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src: vector source operation
        scalar: scalar operation
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmps_le", mask, dst, src, scalar, None, None)
        return self._vcmps_elewise_func(vec_op_params_ins)

    @source_info_decorator()
    def vector_vcmp_eq(self, mask, dst, src0, src1):
        """
        compare each element with a scalar in a vector
        Parameters
        ----------
        mask: effective operation on element, only support one model: Continuous
        dst: vector destination operator
        src0: vector source operation 0
        src1: vector source operation 1
        Returns
        -------
        None
        """
        vec_op_params_ins = TikVectorCmpApi.vec_op_params("vectorized_vcmp_eq", mask, dst, None, None, src0, src1)
        return self._vcmpx_elewise_func(vec_op_params_ins)
