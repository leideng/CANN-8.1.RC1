#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_scatter_gather_api.py
DESC:     tik data scatter/gather
CREATED:  2021-11-19 10:46:42
MODIFIED: 2021-11-19 10:46:42
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_vector_api.tik_scatter_gather_api_ import VScatterOps
from tbe.tik.tik_lib.tik_vector_api.tik_scatter_gather_api_ import VGatherOps
from tbe.tik.tik_lib.tik_vector_api.tik_scatter_gather_api_ import VGatherbOps


class ScatterGatherOpsApi(TikIRBuilder):
    """
    ScatterGather Conversion Vector Api
    """
    scatter_gather_api = namedtuple('ScatterGatherOps', ["name", "mask", "dst", "src", "offset_tensor", "repeat_times",
                                                         "rep_stride", "base_addr", "stride_unit", "mask_mode"])

    vgatherb_api = namedtuple('VGtherbOps', ["name", "dst", "src", "src_offsets", "repeat_times", "dst_blk_stride",
                                             "dst_rep_stride"])

    def vscatter(self, mask, dst, src, dst_offset, repeat_times, src_rep_stride, base_addr=0, stride_unit=0,
                 mask_mode="normal"):
        """
        Convert bit depth between integer types listed above.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        dst_offset : dst_offset
        repeat_times : Repeated iterations times
        src_rep_stride : offset of src operator in the same block between two repeats
        base_addr : base_addr
        stride_unit : address and offset unit both affect it. default = 0
        mask_mode: mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        vscatter_api = ScatterGatherOpsApi.scatter_gather_api("vscatter", mask, dst, src, dst_offset, repeat_times,
                                                              src_rep_stride, base_addr, stride_unit, mask_mode)

        vscatter_obj = VScatterOps(self, vscatter_api)
        vscatter_obj.run_all()

    def vgather(self, mask, dst, src, src_offset, repeat_times, dst_rep_stride, base_addr=0, stride_unit=0,
                mask_mode="normal"):
        """
        Gather elements from src to dst according to address in src_offset,
        programmer should ensure all elements in src.

        Parameters
        ----------
        mask:
        dst: dst operator
        src: src operator
        src_offset: addr offset tensor
        repeat_times: Repeated iterations times
        dst_rep_stride: offset of dst operator in the same block between adjacent iterations
        stride_unit: address and offset unit both affect it. default = 0
        base_addr: init offset for dst,  default = 0
        mask_mode: mode of mask, counter or normal. default = normal

        Returns
        -------
        None
        """
        vgather_api = ScatterGatherOpsApi.scatter_gather_api("vgather", mask, dst, src, src_offset, repeat_times,
                                                             dst_rep_stride, base_addr, stride_unit, mask_mode)

        vgather_obj = VGatherOps(self, vgather_api)
        vgather_obj.run_all()

    def vgatherb(self, dst, src, src_offsets, repeat_times, dst_blk_stride, dst_rep_stride):
        """
        Gather elements from src to dst according to src_offset.

        Parameters
        ----------
        dst : destination operator
        src : source operator
        src_offsets: offset
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats

        Returns
        -------
        None
        """
        vgatherb_api = ScatterGatherOpsApi.vgatherb_api("vgatherb", dst, src, src_offsets, repeat_times,
                                                        dst_blk_stride, dst_rep_stride)

        vgatherb_obj = VGatherbOps(self, vgatherb_api)
        vgatherb_obj.run_all()
