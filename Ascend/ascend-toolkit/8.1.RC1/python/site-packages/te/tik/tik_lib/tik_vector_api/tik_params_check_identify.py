#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_params_check_identify.py
DESC:     provide params
CREATED:  2021-11-30 18:53:42
MODIFIED: 2021-11-30 19:17:00
"""
from tbe.common.platform import intrinsic_check_support
from tbe.tik.tik_lib.tik_api_util import check_repeat_times
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_vector_api.tik_vector_name_map import IDENTIFY_NAME_DICT
from tbe.tik.tik_lib.tik_params import ONE_BLK_SIZE
from tbe.tik.tik_lib.tik_params import gen_api_check_statement
from tbe.tik.tik_lib.tik_proposal_api_ import check_special_intrin_func_overflow


class IdentifyCheckParams:
    """
    Single Params Check
    """

    def __init__(self, print_name, params_list1, repeat_times):
        self.print_name = print_name
        self.name = IDENTIFY_NAME_DICT.get(self.print_name)
        self.dst_op, self.src0_op, self.src1_op = params_list1
        self.repeat_times = repeat_times

    def check_tensor_scope(self, tensor_check, isdst=True):
        """
        check tensor type and scope

        Parameters
        ----------
        tensor_check : which tensor
        isdst : if is dst tensor

        Returns
        -------
        None
        """
        tensor_check.check_tensor_and_scope()
        tensor_check.check_tensor_op_address_align(self.name, ONE_BLK_SIZE)
        if not isdst:
            TikCheckUtil.check_equality(
                self.dst_op.tensor_obj.dtype, tensor_check.tensor_obj.dtype,
                "Instruction %s's src's dtype should be equal to dst's dtype" % self.print_name)

    def check_identify_dst_dtype(self):
        """
        check dst dtype

        Returns
        -------
        None
        """
        TikCheckUtil.check_equality(
            intrinsic_check_support("Intrinsic_" + self.name, self.dst_op.tensor_obj.dtype),
            True, gen_api_check_statement(self.dst_op.tensor_obj.dtype, self.print_name))

    def check_src_dtype(self):
        """
        check src dtype

        Returns
        -------
        None
        """
        # vaadd , viou
        if self.name in ("vaadd", "viou", "vrpac", "vbitsort"):
            TikCheckUtil.check_equality(self.src0_op.tensor_obj.dtype, self.dst_op.tensor_obj.dtype)
            TikCheckUtil.check_var_in_list(self.src0_op.tensor_obj.dtype, ['float16', 'float32'])
        # vrpac, vbitsort
        if self.name in ("vaadd", "viou"):
            TikCheckUtil.check_equality(self.src0_op.tensor_obj.dtype, self.src1_op.tensor_obj.dtype)

    def check_all(self):
        """
        check every param

        Returns
        -------
        None
        """
        # check repeat_times
        check_repeat_times(self.repeat_times)
        # check tensor, scope, address_align
        self.check_tensor_scope(self.dst_op)
        self.check_tensor_scope(self.src0_op, False)
        if self.name in ("viou", "vaadd"):
            self.check_tensor_scope(self.src1_op, False)
        # check dtype
        self.check_src_dtype()
        self.check_identify_dst_dtype()
        check_special_intrin_func_overflow(self.name, self.dst_op.tensor_obj,
                                           [self.src0_op.tensor_obj, self.src1_op.tensor_obj], self.repeat_times)
