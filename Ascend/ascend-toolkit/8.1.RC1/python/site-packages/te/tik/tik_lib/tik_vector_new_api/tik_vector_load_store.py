#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_load_store.py
DESC:     tik v210 load store api
CREATED:  2021-11-25 19:47
MODIFIED: 2021-11-25 19:47
"""

from tbe.common.platform import scope_ureg
from tbe.common.platform import scope_ubuf
from tbe.tik.common.util import DTYPE_SIZE
from tbe.tik.tik_lib.tik_api_util import check_vector_list
from tbe.tik.common.common_util import check_extent_overflow
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_util import need_check_out_of_scope
from tbe.tik.api.tik_tensor import Tensor
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_vector_new_api.tik_vector_common_ import get_vld_str_mode
from tbe.tik.tik_lib.tik_vector_new_api.tik_vector_common_ import get_vst_str_mode
from tbe.common.platform import scope_preg
from tbe.tik.common.util import TikCheckUtil
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.api.tik_vector import Vector
from tbe.tik.tik_lib.tik_vector_new_api.tik_vector_new_api_base import TikVectorNewApiBase


class TikVectorLoadStoreApi(TikVectorNewApiBase):
    """
    tik vector load Store api
    """

    @source_info_decorator()
    def vector_load(self, dst, src, ld_mode=None):
        """
        Transfers data from the UB to the vector based on the transfer mode.
        Parameters
        ----------
        dst: dst
        src: src
        ld_mode: Data transfer mode. The value can be None or String.

        Returns
        -------
        no return
        """
        # check src
        TikCheckUtil.check_type_match(src, Tensor, 'src should be Tensor, but input type: %s' % type(src))
        TikCheckUtil.check_equality(src.scope, scope_ubuf,
                                    "src's scope should be scope_ubuf, but input scope: %s" % src.scope)
        # check dst
        if ld_mode in ["BDINTLV", "DINTLV"]:
            TikCheckUtil.check_type_match(dst, (tuple, list),
                                          "dst should be tuple or list, but input type: %s" % type(dst))
            TikCheckUtil.check_equality(
                len(dst), 2, "length of dst should be 2, but input length: %d" % len(dst))
            check_vector_list(dst, ('dst_0', 'dst_1'), src.dtype)
        else:
            check_vector_list((dst,), ('dst',), src.dtype)

        if isinstance(dst, Vector) and dst.scope == scope_preg:
            # for pld, default mode is "NORM"
            if ld_mode is None:
                ld_mode = "NORM"

            vec_load_ins = TikVectorLoadStoreApi.vec_load(None, dst, src, ld_mode, None, None, None, None, None)
            self._vector_mask_load(vec_load_ins)
        else:
            vlen = self.check_params_obj.check_ld_mode_and_get_vlen(ld_mode, src, self)
            if ld_mode is None:
                with self.context.freeze():
                    ureg = Vector(self, dtype=dst.dtype, scope=scope_ureg)
                vec_load_ins = TikVectorLoadStoreApi.vec_load(None, dst, src, None, ureg, vlen, None, None, None)

                self._vector_load_unalign(vec_load_ins)
            else:
                str_ld_mode = get_vld_str_mode(src.dtype, ld_mode)
                vec_load_ins = TikVectorLoadStoreApi.vec_load(
                    None, dst, src, ld_mode, None, vlen, str_ld_mode, None, None)
                self._vector_load_ld(vec_load_ins)

    @source_info_decorator()
    def vector_store(self, dst, src, st_mode=None, mask=None):
        """
        Transfers data from the vector to the target UB based on the input st_mode and mask values.
        Parameters
        ----------
        dst: dst
        src: src
        st_mode: Data Storage Mode
        mask: mask

        Returns
        -------
        no return
        """
        # check dst
        TikCheckUtil.check_type_match(dst, Tensor, 'dst should be Tensor, but input type: %s' % type(dst))
        TikCheckUtil.check_equality(dst.scope, scope_ubuf,
                                    "dst's scope should be scope_ubuf, but input scope: %s" % dst.scope)

        # check src
        if st_mode in ["INTLV"]:
            TikCheckUtil.check_type_match(
                src, (tuple, list), "src should be tuple or list, but input type: %s" % type(src))
            TikCheckUtil.check_equality(
                len(src), 2, "length of src should be 2, but input length: %d" % len(src))
            check_vector_list(src, ('src_0', 'src_1'), dst.dtype)
        else:
            check_vector_list((src,), ('src',), dst.dtype)

        if isinstance(src, Vector) and src.scope == scope_preg:
            # for pst, default mode is "NORM"
            if st_mode is None:
                st_mode = "NORM"
            vec_load_ins = TikVectorLoadStoreApi.vec_load(None, dst, src, None, None, None, None, st_mode, None)

            self._vector_mask_store(vec_load_ins)
        else:
            vlen = self.get_vector_length(dst.dtype)
            self.check_params_obj.check_store_mode(st_mode, dst, mask)
            self._store_check_overflow(dst=dst, mask=mask, st_mode=st_mode, vlen=vlen)
            if not st_mode:
                with self.context.freeze():
                    ureg = Vector(self, dtype=dst.dtype, scope=scope_ureg)
                vec_load_ins = TikVectorLoadStoreApi.vec_load(None, dst, src, None, ureg, vlen, None, None, None)
                if TikSocManager.is_v300_610l_soc():
                    self._vector_store_unalign_v300(vec_load_ins)
                else:
                    self._vector_store_unalign(vec_load_ins)
            elif st_mode in ["SQZN"]:
                with self.context.freeze():
                    ureg = Vector(self, dtype=dst.dtype, scope=scope_ureg)
                vec_load_ins = TikVectorLoadStoreApi.vec_load(None, dst, src, None, ureg, vlen, None, None, None)
                self._vector_store_sqzn(vec_load_ins)
            else:
                str_st_mode = get_vst_str_mode(dst.dtype, st_mode)
                vec_load_ins = TikVectorLoadStoreApi.vec_load(
                    mask, dst, src, None, None, vlen, None, st_mode, str_st_mode)
                self._vector_store_st(vec_load_ins)
