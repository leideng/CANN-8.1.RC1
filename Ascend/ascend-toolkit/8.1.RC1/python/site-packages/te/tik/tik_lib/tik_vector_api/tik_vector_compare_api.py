#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_compare_api.py
DESC:     provide vector instructions
CREATED:  2019-08-12 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.common.tik_get_soc_name import is_compatible_mode
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VcmpOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VcmpvOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VcmpvsOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VselOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VselOpNanoCompatibleApi
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VreduceOp


class VcmpVectorApi(TikIRBuilder):
    """
    Vcmp, Vcmpv, Vcmpvs Vector Api
    """
    vcmp_api = namedtuple('VcmpApi', ["name", "mask", "src0", "src1", "src0_blk_stride", "src1_blk_stride"])
    vcmpv_api = namedtuple('VcmpvApi', ["name", "dst", "src0", "src1", "repeat_times", "src0_blk_stride",
                                        "src1_blk_stride", "src0_rep_stride", "src1_rep_stride"])
    vcmpvs_api = namedtuple('VcmpvsApi', ["name", "dst", "src", "scalar", "repeat_times", "src_blk_stride",
                                          "src_rep_stride"])
    vsel_api = namedtuple('VselApi', ["mask", "mode", "dst", "sel", "src0", "src1", "repeat_times", "dst_blk_stride",
                                      "src0_blk_stride", "src1_blk_stride", "dst_rep_stride", "src0_rep_stride",
                                      "src1_rep_stride", "name", "mask_o"])

    def vsel(self, mask, mode, dst, sel, src0, src1, repeat_times,
             dst_blk_stride, src0_blk_stride, src1_blk_stride, dst_rep_stride=0,
             src0_rep_stride=0, src1_rep_stride=0, name="vsel", mask_o=None):
        """
        mode    |   dst |   sel           | src0    |   src1                |
        -------------------------------------------------------------------
        0       |   dst |   CMPMASK_VAR   | src0    |   src1                |
        1       |   dst |   Tensor        | src0    |   src1(Scalar/Imme)   |
        2       |   dst |   Tensor        | src0    |   src1                |
        """
        vsel_api = VcmpVectorApi.vsel_api(mask, mode, dst, sel, src0, src1, repeat_times, dst_blk_stride,
                                          src0_blk_stride, src1_blk_stride, dst_rep_stride, src0_rep_stride,
                                          src1_rep_stride, name, mask_o)
        if TikSocManager.is_nano_soc() and is_compatible_mode():
            vsel_obj = VselOpNanoCompatibleApi(self, self.vsel_api, vsel_api)
        else:
            vsel_obj = VselOpApi(self, vsel_api)
        vsel_obj.run_all()

    def vcmp_lt(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 < src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_lt', mask, src0, src1, src0_stride, src1_stride)
        vcmp_lt_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_lt_obj.run_all()

    def vcmp_gt(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 > src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_gt', mask, src0, src1, src0_stride, src1_stride)
        vcmp_gt_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_gt_obj.run_all()

    def vcmp_ge(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 >= src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_ge', mask, src0, src1, src0_stride, src1_stride)
        vcmp_ge_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_ge_obj.run_all()

    def vcmp_eq(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 = src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_eq', mask, src0, src1, src0_stride, src1_stride)
        vcmp_eq_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_eq_obj.run_all()

    def vcmp_ne(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 != src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_ne', mask, src0, src1, src0_stride, src1_stride)
        vcmp_ne_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_ne_obj.run_all()

    def vcmp_le(self, mask, src0, src1, src0_stride, src1_stride):
        """
        src0 < src1

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        src0 : source operation
        src1 : source operation
        src0_stride : offset of src operator between different block
        src1_stride : offset of src operator between different block

        Returns
        -------
        CMPMASK
        """
        vcmp_api = VcmpVectorApi.vcmp_api('vcmp_le', mask, src0, src1, src0_stride, src1_stride)
        vcmp_le_obj = VcmpOpApi(self, vcmp_api)
        return vcmp_le_obj.run_all()

    def vcmpv_lt(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 < src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_lt', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_lt_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_lt_obj.run_all()

    def vcmpv_gt(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 > src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_gt', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_gt_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_gt_obj.run_all()

    def vcmpv_ge(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 >= src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_ge', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_ge_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_ge_obj.run_all()

    def vcmpv_eq(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 = src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_eq', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_eq_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_eq_obj.run_all()

    def vcmpv_ne(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 != src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_ne', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_ne_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_ne_obj.run_all()

    def vcmpv_le(self, dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride, src0_rep_stride,
                 src1_rep_stride):
        """
        src0 <= src1  compare by element

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block
        src1_blk_stride : offset of src operator between different block
        src0_rep_stride : offset of src operator in the same block between
        src1_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpv_api = VcmpVectorApi.vcmpv_api('vcmpv_le', dst, src0, src1, repeat_times, src0_blk_stride, src1_blk_stride,
                                           src0_rep_stride, src1_rep_stride)
        vcmpv_le_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_le_obj.run_all()

    def vcmpvs_lt(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src < scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_lt', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_lt_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_lt_obj.run_all()

    def vcmpvs_gt(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src > scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_gt', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_gt_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_gt_obj.run_all()

    def vcmpvs_ge(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src >= scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_ge', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_ge_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_ge_obj.run_all()

    def vcmpvs_eq(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src == scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_eq', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_eq_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_eq_obj.run_all()

    def vcmpvs_ne(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src != scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_ne', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_ne_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_ne_obj.run_all()

    def vcmpvs_le(self, dst, src, scalar, repeat_times, src_blk_stride, src_rep_stride):
        """
        src <= scalar  compare by element

        Parameters
        ----------
        dst : destination operator
        src : source operation
        scalar : source scalar operation
        repeat_times : Repeated iterations times
        src_blk_stride : offset of src operator between different block
        src_rep_stride : offset of src operator in the same block between

        Returns
        -------
        byte 1 mean true  0 mean false
        """
        vcmpvs_api = VcmpVectorApi.vcmpvs_api('vcmpvs_le', dst, src, scalar, repeat_times, src_blk_stride,
                                              src_rep_stride)
        vcmpvs_le_obj = VcmpvsOpApi(self, vcmpvs_api)
        vcmpvs_le_obj.run_all()


class VreduceVectorApi:
    """
    Vcmp, Vcmpv, Vcmpvs Vector Api
    """
    vreduce_api = namedtuple('VreduceApi', ["name", "mask", "dst", "src0", "src1_pattern", "repeat_times",
                                            "src0_blk_stride", "src0_rep_stride", "src1_rep_stride", "stride_unit",
                                            "rsvd_scalar", "mask_mode"])

    def vreduce(self, mask, dst, src0, src1_pattern, repeat_times, src0_blk_stride, src0_rep_stride, src1_rep_stride,
                stride_unit=0, rsvd_scalar=None, mask_mode="normal"):
        """
        source vector would be reduced into shorter vector according to the compare masks

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src0 : source operator
        src1_pattern : 6 fixed patterns for effective operation on element, or user defined tensor(dtype usigned int),
        per bit 1/0 for effective opration on element
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block in one iteration
        src0_rep_stride : offset of src0 operator in the same block between adjacent iterations
        src1_rep_stride: offset of src1 operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0
        rsvd_scalar : remaining elements count, default = none
        mask_mode: "normal" - mask normal mode
        -          "counter" - mask counter mode

        Returns
        -------
        None
        """
        vreduce_api = VreduceVectorApi.vreduce_api('vreduce', mask, dst, src0, src1_pattern, repeat_times,
                                                   src0_blk_stride, src0_rep_stride, src1_rep_stride, stride_unit,
                                                   rsvd_scalar, mask_mode)
        vreduce_api_obj = VreduceOp(self, vreduce_api)
        vreduce_api_obj.run_all()

    def vreducev2(self, mask, dst, src0, src1_pattern, repeat_times, src0_blk_stride, src0_rep_stride, src1_rep_stride,
                  rsvd_scalar=None, mask_mode="normal"):
        """
        source vector would be reduced into shorter vector according to the compare masks

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src0 : source operator
        src1_pattern : 6 fixed patterns for effective operation on element, or user defined tensor(dtype usigned int),
        per bit 1/0 for effective opration on element
        repeat_times : Repeated iterations times
        src0_blk_stride : offset of src operator between different block in one iteration
        src0_rep_stride : offset of src0 operator in the same block between adjacent iterations
        src1_rep_stride: offset of src1 operator in the same block between adjacent iterations
        rsvd_scalar : remaining elements count, default = none
        mask_mode: "normal" - mask normal mode
        -          "counter" - mask counter mode

        Returns
        -------
        None
        """
        vreducev2_api = VreduceVectorApi.vreduce_api('vreducev2', mask, dst, src0, src1_pattern, repeat_times,
                                                  src0_blk_stride, src0_rep_stride, src1_rep_stride, 0, rsvd_scalar,
                                                  mask_mode)
        vreducev2_api_obj = VreduceOp(self, vreducev2_api)
        vreducev2_api_obj.run_all()
