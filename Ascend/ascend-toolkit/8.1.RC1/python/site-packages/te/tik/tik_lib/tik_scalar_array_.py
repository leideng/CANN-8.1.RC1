#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_scalar_array_.py
DESC:     for get a scalar by index from ScalarArray
CREATED:  2021-12-15 18:53:42
MODIFIED: 2021-12-15 21:29:18
"""
from tbe.tik.api.tik_scalar import Scalar
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_util import need_check_out_of_scope
from tbe.tik.tik_lib.tik_basic_data import BasicData
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.debug.decorators import scalar_array_getitem_decorator


class ScalarArrayInner(BasicData):
    """
    hint:scalar array
    """
    def __init__(self, ir_generator):
        """
        scalar array initialization
        Parameters
        ----------
        ir_generator:Halide IR generator

        Returns
        ----------
        return:no return
        """

        BasicData.__init__(self, "ScalarArray")
        self.ir_generator = ir_generator
        self.reg_buffer = []
        self._available = True
        self.offset = 0
        self.dtype = ""
        self._name = ""
        self.debug_var = None

    def __str__(self):
        """
        print scalar array using its register name
        Parameters
        ----------

        Returns
        ----------
        return:scalar array register name
        """
        return self._name

    @property
    def name(self):
        """
        get scalar array register name
        Parameters
        ----------

        Returns
        ----------
        return:scalar array register name
        """
        msg = "Scalar %s is not defined in this scope." % self._name
        if need_check_out_of_scope(self.ir_generator):
            TikCheckUtil.check_equality(self._available, True, msg)
        return self._name

    @property
    def data(self):
        """
        return scalar array data
        Parameters
        ----------

        Returns
        ----------
        return:scalar array data
        """
        return self.reg_buffer

    def get(self):
        """
        get buffer
        Parameters
        ----------

        Returns
        ----------
        return:return top register buffer
        """
        msg = "Scalar %s is not defined in this scope." % self._name
        if need_check_out_of_scope(self.ir_generator):
            TikCheckUtil.check_equality(self._available, True, msg)
        if isinstance(self.offset, int):
            return self.reg_buffer[self.offset]
        return self.reg_buffer[Expr(self.offset).get()]

    @scalar_array_getitem_decorator
    def get_scalar_by_index(self, index_in):
        """
        return a new scalar by index
        Parameters
        ----------
        index_in : scalar array index.

        Returns
        -------
        return:a new scalar
        """
        new_offset = self.offset + index_in
        if isinstance(index_in, (Scalar, Expr)):
            new_offset = index_in + self.offset
        return Scalar(self.ir_generator, self.dtype, name='%s_' % self._name,
                      buffer_=self.reg_buffer, offset=new_offset,
                      debug_var=self.debug_var, available=self._available)

    def disable_scalar_array(self):
        """
        when this scalar array lifecycle is in the end,
        this scalar array condition parameter should be changed from true to false.
        Parameters
        ----------
        No parameter

        Returns
        ----------
        return:no return
        """
        self._available = False
