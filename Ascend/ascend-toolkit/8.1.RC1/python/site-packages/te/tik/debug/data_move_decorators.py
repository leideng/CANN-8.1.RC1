#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     data_move_decorators.py
DESC:     tik data_move related api decorators
CREATED:  2021-10-25 14:04:45
MODIFIED: 2021-10-27 14:04:45
"""
from functools import wraps
from tbe.tik.debug import get_caller_context
from tbe.tik.debug.data_move_intrinsic import DataMove
from tbe.tik.debug.data_move_intrinsic import TensorMove
from tbe.tik.debug.data_move_intrinsic import DataMoveQuant
from tbe.tik.debug.data_move_intrinsic import MovPad
from tbe.tik.debug.data_move_intrinsic import MovNd2Nz
from tbe.tik.debug.data_move_intrinsic import VectorCopy
from tbe.tik.debug.load_image_intrinsic import LoadImage


def datamove_decorator(func):
    """
    bind this decorator with data_move

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(dm_obj):
        """
        bind this decorator with data_move
        """
        if not dm_obj.tik_instance.debug_disabled:
            datamove_stmt = DataMove(get_caller_context(dm_obj.argv), dm_obj)
            dm_obj.tik_instance.context.curr_scope().add_stmt(datamove_stmt)
        return func(dm_obj)

    return wrapper


def dma_dquant_decorator(func):
    """
    bind this decorator with dma_dquant

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(dmq_obj):
        """
        bind this decorator with dma_dquant
        """
        if not dmq_obj.tik_instance.debug_disabled:
            dma_deq_stmt = DataMoveQuant(get_caller_context(), dmq_obj)
            dmq_obj.tik_instance.context.curr_scope().add_stmt(dma_deq_stmt)
        return func(dmq_obj)

    return wrapper


def tensor_move_decorator(func):
    """
    bind this decorator with tensor_move

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tm_obj):
        """
        bind this decorator with tensor_move
        """
        if not tm_obj.tik_instance.debug_disabled:
            stmt = TensorMove(get_caller_context(), tm_obj)
            tm_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tm_obj)

    return wrapper


def mov_pad_decorator(func):
    """
    bind this decorator with mvf_data_move instructions
    """
    @wraps(func)
    def wrapper(dmp_obj):
        if not dmp_obj.tik_instance.debug_disabled:
            stmt = MovPad(get_caller_context(), dmp_obj)
            dmp_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(dmp_obj)
    return wrapper


def mov_nd2nz_decorator(func):
    """
    bind this decorator with data_move_multi_nd2nz instructions
    """
    @wraps(func)
    def wrapper(dm_obj):
        if not dm_obj.tik_instance.debug_disabled:
            stmt = MovNd2Nz(get_caller_context(), dm_obj)
            dm_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(dm_obj)
    return wrapper


def load_image_decorator(func):
    """
    bind this decorator with load_image

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(load_image_obj):
        """
        bind this decorator with load_image
        """
        if not load_image_obj.tik_instance.debug_disabled:
            stmt = LoadImage(get_caller_context(), load_image_obj)
            load_image_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(load_image_obj)

    return wrapper


def vcopy_decorator(func):
    """
    bind this decorator with vcopy

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(vcopy_obj):
        """
        bind this decorator with vcopy
        """
        if not vcopy_obj.tik_instance.debug_disabled:
            vcopy_ = VectorCopy(get_caller_context(), vcopy_obj)
            vcopy_obj.tik_instance.context.curr_scope().add_stmt(vcopy_)
        return func(vcopy_obj)
    return wrapper
