#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     context_tensor.py
DESC:     debug context tensor
CREATED:  2021-11-26 15:00:23
MODIFIED: 2021-11-26 15:30:23
"""
import ctypes
from tbe.tik.common.debug_api import DebugVm
from tbe.tik.tik_lib.tik_params import FAKE_TENSOR_NAME
from tbe.tik.debug.tensor_buffer import TensorBuffer
from tbe.tik.common.util import DTYPE_SIZE


class ContextTensor:
    """
    Tensor variable correlation
    """
    def __init__(self):
        self.tensor_buffer = TensorBuffer(self)
        self.buffer2static_parameters = {}

    def set_tensor_buffer(self):
        """
        free tensor NumpyBuffer
        """
        self.tensor_buffer = None

    def update_npy_tensor(self, tvm_buffer_var, new_npy):
        """
        set the numpy buffer pointer to debug vm by the tvm buffer var
        Parameters
        ----------
        tvm_buffer_var: the tvm buffer var
        new_npy: the numpy buffer pointer

        Returns
        -------
        None

        """
        if self.debug_vm_ctx is not None and self.actual_source_num > 0:
            DebugVm.set_tensor_buffer(self.debug_vm_ctx, tvm_buffer_var, new_npy.ctypes.data_as(ctypes.c_void_p),
                                      new_npy.size * new_npy.itemsize)

    def get_tensor_original_shape(self, tensor):
        """
        get the original shape of the tensor
        Parameters
        ----------
        tensor: tensor of tik

        Returns
        -------
        the original shape of tensor
        """
        return self.buffer2static_parameters.get(id(tensor)).get("static_original_shape")

    def get_tensor_shape(self, tensor):
        """
        get the shape of the tensor
        Parameters
        ----------
        tensor: tensor of tik

        Returns
        -------
        the shape of tensor

        """
        return self.buffer2static_parameters.get(id(tensor)).get("static_shape")

    def get_tensor_strides(self, tensor):
        """
        get the strides of the tensor
        Parameters
        ----------
        tensor: tensor of tik

        Returns
        -------
        the strides of tensor

        """
        return self.buffer2static_parameters.get(id(tensor)).get("static_strides")

    def get_tensor_offset(self, tensor):
        """
        get the offset of the tensor
        Parameters
        ----------
        tensor: tensor of tik

        Returns
        -------
        the offset of tensor

        """
        return self.buffer2static_parameters.get(id(tensor)).get("static_data")

    def add_tensor(self, tensor, np_array=None):
        """
        add tensor to buffer

        Parameters
        ----------
        tensor : the added tensor
        np_array: numpy array for input tensor data

        Returns
        -------
        no return
        """
        self.tensor_buffer.add_tensor(tensor, np_array)

    def add_proxy(self, proxy_tensor):
        """
        add tensor proxy

        Parameters
        ----------
        proxy_tensor : the added tensor

        Returns
        -------
        no return
        """
        self.tensor_buffer.add_tensor_proxy(proxy_tensor)

    def get_value(self, tensor):
        """
        get tensor from buffer_mapping

        Parameters
        ----------
        tensor : tensor

        Returns
        -------
        buffer
        """
        try:
            return self.tensor_buffer.get_npbuffer_by_tensor(tensor)
        except KeyError:
            return None
        finally:
            pass

    def out_buffer_getitem(self, out, buffer, is_reshape):
        """
        Tensor.__getitem__ as output
        :param out: output tensor
        :param buffer: buffer of output tensor
        :param is_reshape: last_tensor is multi dims or not
        :return: new buffer
        """
        if is_reshape:
            buffer = buffer.reshape(-1)
        shape = self.get_tensor_shape(out)
        return buffer[0: shape[0]]

    def out_buffer_reshape(self, out, buffer):
        """
        Tensor.__getitem__ as output
        :param out: output tensor
        :param buffer: buffer of output tensor
        :return: new buffer
        """
        return buffer.reshape(self.get_tensor_shape(out))

    def out_buffer_reinterpret(self, out, buffer):
        """
        Tensor.reinterpret_cast_to as output
        :param out: output tensor
        :param buffer: buffer of output tensor
        :return: new buffer
        """
        buffer = buffer.view(out.dtype)
        if DTYPE_SIZE.get(out.last_tensor.dtype) > DTYPE_SIZE.get(out.dtype):
            last_shape = self.get_tensor_shape(out.last_tensor)
            buffer = buffer.reshape(last_shape + [2, ])
        return buffer

    def get_outputs(self):
        """
        get output numpy list
        :return: output numpy list
        """
        ret = []
        for out in self.outs:
            if out.buffer.name == FAKE_TENSOR_NAME:
                continue
            buffer = self.tensor_buffer.get_npbuffer_by_tvmbuffer(out.buffer).buffer
            is_getitem = hasattr(out, "is_getitem") and out.is_getitem
            is_reshape = hasattr(out, "is_reshape") and out.is_reshape
            is_reinterpret = out.last_tensor and out.dtype != out.last_tensor.dtype
            if is_getitem:
                buffer = self.out_buffer_getitem(out, buffer, is_reshape)
            elif is_reshape:
                buffer = self.out_buffer_reshape(out, buffer)
            elif is_reinterpret:
                buffer = self.out_buffer_reinterpret(out, buffer)
            ret.append(buffer)
        return ret
