#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_system_control_debug.py
DESC:     provide params
CREATED:  2021-12-7 19:52:05
MODIFIED: 2021-12-7 19:52:05
"""
from tbe.tik.debug.statement import STMT
from tbe.tik.debug.util import reinterpret_type
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_params import get_atomic_add_mod_start_pos


class SetL0SetValue(STMT):
    """
    SetL0SetValue instruction
    """

    def __init__(self, source_info, value, dtype, tik_debugger):
        super(SetL0SetValue, self).__init__(source_info, tik_debugger)
        self.value = value
        self.dtype = dtype

    def eval_(self, context):
        """
        run the instruction

        Parameters
        ----------
        context : the stack context

        Returns
        -------
        None
        """
        self.write_spr(context)

    def write_spr(self, context):
        """
        write spr
        Parameters
        ----------
        context: tik context

        Returns
        -------

        """
        value = context.evaluate_expr(self.value)
        bin_value = reinterpret_type(self.dtype, 'uint16', value)
        context.model.write_spr('L0_SET_VALUE', bin_value)


class SetCtrlSPR(STMT):
    """
    SetCtrlSPR instruction
    """
    def __init__(self, source_info, system_control_api, tik_debugger=None):
        super(SetCtrlSPR, self).__init__(source_info, tik_debugger)
        self.value = system_control_api.num
        if isinstance(self.value, bool):
            self.value = int(self.value)
        self.mask = system_control_api.mask
        self.begin = system_control_api.begin
        self.range_start = system_control_api.range_start
        self.range_end = system_control_api.range_end
        self.param_name = system_control_api.param_name

    def eval_(self, context):
        """
        run the instruction

        Parameters
        ----------
        context : the stack context

        Returns
        -------
        None
        """
        value = context.evaluate_expr(self.value)
        if self.begin == get_atomic_add_mod_start_pos():
            context.atomic_add_value = value
        self.check_value(value)
        spr_value = context.model.read_spr('CTRL')
        # clear the bits first
        spr_value &= self.mask
        spr_value |= (value << self.begin)
        context.model.write_spr('CTRL', spr_value)

    def check_value(self, value):
        """
        check value
        Returns
        -------
        """
        if self.range_start is not None and self.range_end is not None:
            err_msg = "%s should be in range [%d, %d], input value: %d" % \
                      (self.param_name, self.range_start, self.range_end, value)
            TikCheckUtil.check_in_range_by_dtype(value, msg=err_msg, var_range=[self.range_start, self.range_end])
