#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_high_preci_debug.py
DESC:     debug of high preci api
CREATED:  2021-12-18 11:02:42
MODIFIED: 2021-12-18 11:17:00
"""
from functools import wraps

from tbe.tik.common.common_nametuple_util import HighPreciDebug
from tbe.tik.debug.tik_vector_ops_debug.tik_high_preci_debug_ import VrecHighPreci
from tbe.tik.debug.tik_vector_ops_debug.tik_high_preci_debug_ import VlnHighPreci
from tbe.tik.debug.tik_vector_ops_debug.tik_high_preci_debug_ import VrsqrtHighPreci
from tbe.tik.debug.tik_vector_ops_debug.tik_high_preci_expm1_debug_ import Vexpm1HighPreci

from tbe.tik.debug.tikdbg.codemapping import get_caller_context


def vexpm1_high_preci_decorator(func):
    """
    bind this decorator with vexpm1_high_preci

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, vexpm_high_params):
        if not tik_instance.debug_disabled:
            vrec_high_preci_ = Vexpm1HighPreci(
                get_caller_context(), vexpm_high_params, tik_instance, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vrec_high_preci_)
        return func(tik_instance, vexpm_high_params)

    return wrapper


def vrec_high_preci_decorator(func):
    """
    bind this decorator with vrec_high_preci

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, mask, instr_name, vrec_api):
        """
        bind thid decorator with vrec_high_preci
        """
        if not tik_instance.debug_disabled:
            high_preci = HighPreciDebug(
                mask, vrec_api.dst, vrec_api.src, vrec_api.work_tensor, vrec_api.repeat_times,
                vrec_api.dst_rep_stride, vrec_api.src_rep_stride, instr_name)
            vrec_high_preci_ = VrecHighPreci(get_caller_context(), high_preci, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vrec_high_preci_)
        return func(tik_instance, mask, instr_name, vrec_api)

    return wrapper


def vrsqrt_high_preci_decorator(func):
    """
    bind this decorator with vrsqrt_high_preci

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, vrsqrt_high_params):
        """
        bind this decorator with vrsqrt_high_preci
        """
        if not tik_instance.debug_disabled:
            vrsqrt_high_ = VrsqrtHighPreci(
                get_caller_context(), vrsqrt_high_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(vrsqrt_high_)
        return func(tik_instance, vrsqrt_high_params)

    return wrapper


def vec_ln_high_preci_decorator(func):
    """
    bind this decorator with vec_ln_high_preci

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with vec_ln_high_preci
        """
        if not tik_instance.debug_disabled:
            vln_high_preci = VlnHighPreci(
                get_caller_context(), op_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vln_high_preci)
        return func(tik_instance, op_obj)

    return wrapper
