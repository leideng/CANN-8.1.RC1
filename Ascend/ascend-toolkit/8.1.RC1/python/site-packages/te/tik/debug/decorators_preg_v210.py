#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     decorators.py
DESC:     this file contains many decorator
CREATED:  2019-7-04 20:12:13
MODIFIED: 2019-7-24 14:04:45
"""
from functools import wraps

from tbe.tik.debug.tikdbg.codemapping import get_caller_context
from tbe.tik.debug.intrinsic_preg_v210 import VectorPge
from tbe.tik.debug.intrinsic_preg_v210 import VectorPld
from tbe.tik.debug.intrinsic_preg_v210 import VectorPlt
from tbe.tik.debug.intrinsic_preg_v210 import VectorPregTenaryElewise
from tbe.tik.debug.intrinsic_preg_v210 import VectorPset
from tbe.tik.debug.intrinsic_preg_v210 import VectorPslide
from tbe.tik.debug.intrinsic_preg_v210 import VectorPst
from tbe.tik.debug.intrinsic_preg_v210 import VectorPintlvPdintlv
from tbe.tik.debug.intrinsic_preg_v210 import VectorPpackPunpack


def vector_plt_decorator(func):
    """
    bind this decorator with vector_plt instructions
    """
    @wraps(func)
    def wrapper(tik_instance, mask, dtype, max_index):
        if not tik_instance.debug_disabled:
            stmt = VectorPlt(get_caller_context(), (mask, dtype, max_index), tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, mask, dtype, max_index)
    return wrapper


def vector_mask_gen_decorator(func):
    """
    bind this decorator with pge instructions
    """
    @wraps(func)
    def wrapper(tik_instance, dst, dtype, part_mode):
        if not tik_instance.debug_disabled:
            stmt = VectorPge(get_caller_context(), (dst, dtype, part_mode), tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, dst, dtype, part_mode)
    return wrapper


def vector_mask_set_decorator(func):
    """
    bind this decorator with pset instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            stmt = VectorPset(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)
    return wrapper


def vector_mask_load_decorator(func):
    """
    bind this decorator with predicate register load instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = VectorPld(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def vector_mask_store_decorator(func):
    """
    bind this decorator with predicate register store instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_param):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = VectorPst(get_caller_context(), debug_param, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_param)

    return wrapper


def vector_mask_slide_decorator(func):
    """
    bind this decorator with pslide instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            stmt = VectorPslide(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)
    return wrapper


def vector_mask_ele_wise_decorator(func):
    """
    bind this decorator with pand/por/pxor/pnand/psel instructions
    """
    @wraps(func)
    def wrapper(tik_instance, name, debug_params):
        if not tik_instance.debug_disabled:
            stmt = VectorPregTenaryElewise(get_caller_context(), debug_params, name, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, name, debug_params)
    return wrapper


def vector_mask_intlv_dintlv_decorator(func):
    """
    bind this decorator with pintlv/pdintlv instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params, dtype):
        if not tik_instance.debug_disabled:
            stmt = VectorPintlvPdintlv(get_caller_context(), debug_params, dtype, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params, dtype)
    return wrapper


def vector_mask_pack_unpack_decorator(func):
    """
    bind this decorator with ppack/punpack instructions
    """
    @wraps(func)
    def wrapper(tik_instance, name, debug_params):
        if not tik_instance.debug_disabled:
            stmt = VectorPpackPunpack(get_caller_context(), debug_params, name, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, name, debug_params)
    return wrapper


def vector_mask_mov_decorator(func):
    """
    bind this decorator with pmov instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            stmt = VectorPregTenaryElewise(
                get_caller_context(), debug_params, debug_params.name, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)
    return wrapper
