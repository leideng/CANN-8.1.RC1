#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     intrinsic_high_vec.py
DESC:     debug intrinsic
CREATED:  2021-8-05 10:10:10
MODIFIED: 2021-8-05 10:10:10
"""

from tbe.common.platform import scope_gm
from tbe.tik.debug.statement import STMT
from tbe.tik.tik_lib.tik_expr import BasicExpr
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_cmpv_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_sel_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_dma_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_double_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_duplicate_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_precision_conv_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_reduce_value_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_reduce_arg_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_single_ops_params


class DataMoveDebug(STMT):
    """
    data move debug statement
    """
    def __init__(self, source_info, dma_debug_params, tik_ins):
        super(DataMoveDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.dma_debug_params = dma_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def eval_(self, context):
        """
        h_data_move instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        check_dma_ops_params(self.dma_debug_params, context)
        locked = False
        try:
            # if data_move's dst is GM buffer, need to lock it
            if self.dma_debug_params.dst.scope == scope_gm and\
                    self.dma_debug_params.dst.buffer not in context.placeholders.values():
                # only with multi-core, context.gm_lock is not None
                if context.gm_lock:
                    # get the lock
                    context.gm_lock.acquire()
                    locked = True
            context.step_next(self.source_id)
            self.context_append_access_list(context, locked)
        finally:
            if locked is True:
                context.gm_lock.release()

    def context_append_access_list(self, context, locked):
        """
        When locked is True, context add access_list
        :param context: the stack context
        :param locked: h_data_move's dst is GM buffer, need to lock it
        :return: None
        """
        if locked is True:  # check output gm info and workspace tensor
            var = context.get_var_by_name("blockIdx.x")  # get the var of block index
            if var is not None:  # var cannot be None, if it's None, evaluate_expr will cannot exit
                block_idx = context.evaluate_expr(var)
                start = context.evaluate_expr(self.dma_debug_params.dst.dimensions[-1].start)
                stop = context.evaluate_expr(self.dma_debug_params.dst.dimensions[-1].stop)
                # var_table may be has the var "blockIdx.x", but the var may be cannot evaluate the value
                if isinstance(block_idx, int) and isinstance(start, int) and isinstance(stop, int):
                    # according access parameters, calculate the dst access addr info
                    access_list = [[start, stop, context.atomic_add_value]]
                    # save the access info for check multi-core access tread
                    context.gm_tensor_access_info[block_idx][self.dma_debug_params.dst.buffer.name].append(access_list)


class TwoOpsDebug(STMT):
    """
    Two ops debug statement
    """
    def __init__(self, source_info, double_debug_params, tik_ins):
        super(TwoOpsDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.double_debug_params = double_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def double_op_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_double_ops_params(self.double_debug_params, context)

    def eval_(self, context):
        """
        double ops' eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.double_op_debug_check(context)
        context.step_next(self.source_id)


class SingleOpsDebug(STMT):
    """
    Single ops debug statement
    """
    def __init__(self, source_info, debug_params, tik_ins):
        super(SingleOpsDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.debug_params = debug_params
        self.source_id = tik_ins.context.debug_source_id

    def single_op_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_single_ops_params(self.debug_params, context)

    def eval_(self, context):
        """
        single ops' eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.single_op_debug_check(context)
        context.step_next(self.source_id)


class DuplicateDebug(STMT):
    """
    Duplicate debug statement
    """
    def __init__(self, source_info, dup_debug_params, tik_ins):
        super(DuplicateDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.dup_debug_params = dup_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def duplicate_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_duplicate_params(self.dup_debug_params, context)

    def eval_(self, context):
        """
        h_duplicate instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.duplicate_debug_check(context)
        context.step_next(self.source_id)


class CastConvDebug(STMT):
    """
    cast, conv debug statement
    """
    def __init__(self, source_info, cast_debug_params, tik_ins):
        super(CastConvDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.cast_debug_params = cast_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def cast_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_precision_conv_params(
            self.cast_debug_params.dst, self.cast_debug_params.src, self.cast_debug_params.dtype_str, context)

    def eval_(self, context):
        """
        h_cast, h_conv instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """

        self.cast_debug_check(context)
        context.step_next(self.source_id)


class QuantDebug(STMT):
    """
    quant debug statement
    """
    def __init__(self, source_info, quant_debug_params, tik_ins):
        super(QuantDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.quant_debug_params = quant_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def quant_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_precision_conv_params(self.quant_debug_params.dst, self.quant_debug_params.src,
                                    self.quant_debug_params.dtype_str, self.quant_debug_params.deqscale, context)

    def eval_(self, context):
        """
        h_quant instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """

        self.quant_debug_check(context)
        context.step_next(self.source_id)


class CmpvDebug(STMT):
    """
    cmpv debug statement
    """
    def __init__(self, source_info, cmpv_debug_params, tik_ins):
        super(CmpvDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.cmpv_debug_params = cmpv_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def cmpv_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_cmpv_ops_params(self.cmpv_debug_params, context)

    def eval_(self, context):
        """
        h_cmpv instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.cmpv_debug_check(context)
        context.step_next(self.source_id)


class SelDebug(STMT):
    """
    sel debug statement
    """
    def __init__(self, source_info, sel_debug_params, tik_ins):
        super(SelDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.sel_debug_params = sel_debug_params
        self.source_id = tik_ins.context.debug_source_id

    def sel_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        check_sel_ops_params(self.sel_debug_params, context)

    def eval_(self, context):
        """
        h_sel instruction's eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.sel_debug_check(context)
        context.step_next(self.source_id)


class ReduceDebug(STMT):
    """
    reduce value and reduce args debug statement
    """
    def __init__(self, source_info, dst, debug_reduce_params, tik_ins):
        super(ReduceDebug, self).__init__(source_info, tik_ins.context.tik_debugger)
        self.debug_reduce_params = debug_reduce_params
        self.source_id = tik_ins.context.debug_source_id
        self.dst = dst

    def all_debug_check(self, context):
        """
        debug check
        :param context:
        :return:
        """
        if self.debug_reduce_params.api_name in ("h_reduce_sum", "h_reduce_max", "h_reduce_min"):
            check_reduce_value_ops_params(self.dst, self.debug_reduce_params, context)
        if self.debug_reduce_params.api_name in ("h_reduce_argmax", "h_reduce_argmin"):
            check_reduce_arg_ops_params(self.dst, self.debug_reduce_params, context)

    def eval_(self, context):
        """
        reduce ops' eval function
        Parameters
        ----------
        context: object of debug context

        Returns
        -------
        None
        """
        self.all_debug_check(context)
        context.step_next(self.source_id)
        if isinstance(self.dst, BasicExpr):
            offset = context.evaluate_expr(self.dst.offset)
            context.update_var_from_vm(self.dst.reg_buffer.asobject(),
                                       self.dst.debug_var[offset], offset)
