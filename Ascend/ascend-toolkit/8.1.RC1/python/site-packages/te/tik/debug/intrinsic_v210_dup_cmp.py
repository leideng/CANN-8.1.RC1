#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     intrinsic_v210_dup_cmp.py
DESC:     v210 dup cmp class
CREATED:  2021-11-25 20:29
MODIFIED: 2021-11-25 20:29
"""

from tbe.tik.debug.statement import STMT
from tbe.tik.debug.sim.util import TempEnv
from tbe.tik.debug.util import VecRegType
from tbe.tik.debug.intrinsic_v210_common import VEC_TYPE_THREE_BITS
from tbe.tik.debug.intrinsic_v210_common import V300_INSTR_OP1_CODE
from tbe.tik.debug.intrinsic_v210_common import VEC_CMP_TYPE_V300
from tbe.tik.debug.intrinsic_v210_common import SOURCE_REGISTER1
from tbe.tik.debug.intrinsic_v210_common import VEC_CMP_TYPE
from tbe.tik.debug.intrinsic_v210_common import VEC_CMP_TYPE_V300
from tbe.tik.debug.intrinsic_v210_common import V210_INSTR_OP1_CODE
from tbe.tik.debug.intrinsic_v210_common import set_vdup_param
from tbe.tik.debug.intrinsic_v210_common import get_and_write_share_spr
from tbe.tik.debug.intrinsic_v210_common import set_param_loop_vex_num_dtype
from tbe.tik.debug.intrinsic_v210_common import create_vloop_info
from tbe.tik.debug.intrinsic_v210_common import execute_all_instr
from tbe.tik.debug.intrinsic_v210_common import dst_register
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class VectorVdups(STMT):
    """
    Vector Vdups instruction
    """

    def __init__(self, source_info, vdup_params, load_mode, tik_debugger):
        super(VectorVdups, self).__init__(source_info, tik_debugger)
        self.dst = vdup_params.dst
        self.mask = vdup_params.mask
        self.dup_value = vdup_params.src
        self.load_mode = load_mode

    def set_param(self, context, param):
        """
        set param
        Parameters
        ----------
        context
        param

        Returns
        -------

        """
        sn_idx = get_and_write_share_spr(context, self.dup_value,
                                         self.dst.dtype)
        param.snIdx = sn_idx
        param, vd_idx = set_vdup_param(context, param, self)
        return param, vd_idx

    def eval_(self, context):
        """
        Vector Vdups eval
        Parameters
        ----------
        context: tik context

        Returns
        -------
        no returns
        """
        TempEnv()
        param = set_param_loop_vex_num_dtype(context, self.dst.dtype, 0, 1)
        instr_list = create_vloop_info(context, param)
        param, vd_idx = self.set_param(context, param)

        instr = context.encoder.gen_vector_vdups(param)
        execute_all_instr(context, instr_list, instr)
        dst_register(context, (self.dst, vd_idx, VecRegType.V_REG), is_merging=False)
        context.set_vector_state(self.dst, is_valid=True)
        context.free_all_register()


class VectorVdup(STMT):
    """
    Vector Vdup/Vdupm instruction
    """

    def __init__(self, source_info, vdup_params, load_mode, tik_debugger):
        super(VectorVdup, self).__init__(source_info, tik_debugger)
        self.dst = vdup_params.dst
        self.mask = vdup_params.mask
        self.src = vdup_params.src
        self.load_mode = load_mode
        self.instr_name = vdup_params.name

    def set_param(self, context, param):
        """
        set param
        Parameters
        ----------
        context
        param

        Returns
        -------

        """
        param, vd_idx = set_vdup_param(context, param, self)
        vn_idx = context.alloc_v_register(self.src)
        param.vnIdx = vn_idx
        # just use vmIdx to pass param to encoder mode, not real Vm's index
        if TikSocManager.is_v300_610l_soc():
            param.vmIdx = V300_INSTR_OP1_CODE.get(self.instr_name)
        else:
            param.vmIdx = SOURCE_REGISTER1.get(self.instr_name)
        return param, vd_idx

    def eval_(self, context):
        """
        Vector Vdup
        Parameters
        ----------
        context: tik context

        Returns
        -------
        no returns
        """
        TempEnv()
        param = set_param_loop_vex_num_dtype(context, self.dst.dtype, 0, 1)
        instr_list = create_vloop_info(context, param)

        param, vd_idx = self.set_param(context, param)
        instr = context.encoder.gen_vector_vdup(param)
        execute_all_instr(context, instr_list, instr)
        dst_register(context, (self.dst, vd_idx, VecRegType.V_REG), is_merging=False)
        context.set_vector_state(self.dst, is_valid=True)
        context.free_all_register()


class VectorVdupi(STMT):
    """
    Vector Vdupi_b8/Vdupi_b16 instruction
    """

    def __init__(self, source_info, vdup_params, mode, tik_debugger):
        super(VectorVdupi, self).__init__(source_info, tik_debugger)
        self.dst = vdup_params.dst
        self.imm = vdup_params.src
        self.mode = mode

    def set_param(self, context, param):
        """
        set param
        Parameters
        ----------
        context
        param

        Returns
        -------

        """
        param.part = self.mode
        vd_idx = context.alloc_v_register(self.dst)
        param.vdIdx = vd_idx
        param.imm8 = self.imm
        return param, vd_idx

    def eval_(self, context):
        """
        Vector Vdupi eval
        Parameters
        ----------
        context: tik context

        Returns
        -------
        no returns
        """
        TempEnv()
        param = set_param_loop_vex_num_dtype(context, self.dst.dtype, 0, 1)
        instr_list = create_vloop_info(context, param)
        param, vd_idx = self.set_param(context, param)
        instr = context.encoder.gen_vector_vdupi(param)
        execute_all_instr(context, instr_list, instr)
        dst_register(context, (self.dst, vd_idx, VecRegType.V_REG), is_merging=False)
        context.set_vector_state(self.dst, is_valid=True)
        context.free_all_register()


class VectorVcmps(STMT):
    """
    Vector vcmps instruction
    """

    def __init__(self, source_info, vcmps_params, tik_debugger):
        super(VectorVcmps, self).__init__(source_info, tik_debugger)
        self.dst = vcmps_params.dst  # Pd
        self.src = vcmps_params.src  # Vn
        self.mask = vcmps_params.mask  # Pg
        self.scalar_value = vcmps_params.scalar
        self.instr_name = vcmps_params.name

    def set_param(self, context, param):
        """
        set param
        Parameters
        ----------
        context
        param

        Returns
        -------

        """
        param.type = VEC_TYPE_THREE_BITS.get(self.src.dtype)

        if TikSocManager.is_v300_610l_soc():
            param.cmpType = VEC_CMP_TYPE_V300.get(self.instr_name)
        else:
            param.cmpType = VEC_CMP_TYPE.get(self.instr_name)

        param.op1 = V210_INSTR_OP1_CODE.get(self.instr_name)

        pg_idx = context.alloc_p_register(self.mask, dtype=self.src.dtype)
        param.pgIdx = pg_idx

        pd_idx = context.alloc_p_register(self.dst)
        param.pdIdx = pd_idx

        vn_idx = context.alloc_v_register(self.src)
        param.vnIdx = vn_idx
        return param, pd_idx

    def eval_(self, context):
        """
        Vector Vcmps eval
        Parameters
        ----------
        context: tik context

        Returns
        -------
        no returns
        """

        TempEnv()
        param = set_param_loop_vex_num_dtype(context, self.src.dtype, 0, 1)
        instr_list = create_vloop_info(context, param)
        sm_idx = get_and_write_share_spr(context, self.scalar_value,
                                         self.src.dtype)
        param.smIdx = sm_idx

        param, pd_idx = self.set_param(context, param)
        instr = context.encoder.gen_vector_cmps(param)
        execute_all_instr(context, instr_list, instr)
        dst_register(context, (self.dst, pd_idx, VecRegType.P_REG))
        context.set_vector_state(self.dst, is_valid=True)
        context.free_all_register()


class VectorVcmp(STMT):
    """
    Vector vcmp instruction
    """

    def __init__(self, source_info, vcmp_params, tik_debugger):
        super(VectorVcmp, self).__init__(source_info, tik_debugger)
        self.dst = vcmp_params.dst  # Pd
        self.src0 = vcmp_params.src0  # Vn
        self.src1 = vcmp_params.src1  # Vm
        self.mask = vcmp_params.mask  # Pg
        self.instr_name = vcmp_params.name

    def set_param(self, context, param):
        """
        set param
        Parameters
        ----------
        context
        param

        Returns
        -------

        """
        if TikSocManager.is_v300_610l_soc():
            param.cmpType = VEC_CMP_TYPE_V300.get(self.instr_name)
        else:
            param.cmpType = VEC_CMP_TYPE.get(self.instr_name)
            param.op1 = V210_INSTR_OP1_CODE.get(self.instr_name)

        pg_idx = context.alloc_p_register(self.mask, dtype=self.src0.dtype)
        param.pgIdx = pg_idx
        pd_idx = context.alloc_p_register(self.dst)
        param.pdIdx = pd_idx

        vn_idx = context.alloc_v_register(self.src0)
        param.vnIdx = vn_idx
        vm_idx = context.alloc_v_register(self.src1)
        param.vmIdx = vm_idx
        return param, pd_idx

    def eval_(self, context):
        """
        Vector Vcmp
        Parameters
        ----------
        context: tik context

        Returns
        -------
        no returns
        """
        TempEnv()
        param = set_param_loop_vex_num_dtype(context, self.src0.dtype, 0, 1)
        instr_list = create_vloop_info(context, param)

        param.type = VEC_TYPE_THREE_BITS.get(self.src0.dtype)
        param, pd_idx = self.set_param(context, param)

        instr = context.encoder.gen_vector_cmp(param)
        instr_list.append(instr)
        execute_all_instr(context, instr_list, instr)
        dst_register(context, (self.dst, pd_idx, VecRegType.P_REG), is_merging=False)
        context.set_vector_state(self.dst, is_valid=True)
        context.free_all_register()
