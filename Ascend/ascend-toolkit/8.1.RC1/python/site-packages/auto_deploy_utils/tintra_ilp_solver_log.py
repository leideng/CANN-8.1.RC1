#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2023. Huawei Technologies Co., Ltd. All rights reserved.

Define log service
"""
import inspect
import os
import traceback
from typing import Any

from tbe.common.utils import log

MODULE_NAME = "tintra_ilp_solver"
FILE_PATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


class TintraIlpSolverSLog:
    """tintra ilp solver log class"""
    def __init__(self) -> None:
        self.logger = log

    def log(self, level: str, msg: Any, *args: Any) -> Any:
        """common log"""
        line = inspect.currentframe().f_back.f_back.f_lineno
        co_filename = inspect.currentframe().f_back.f_back.f_code.co_filename
        filename = os.path.relpath(co_filename, FILE_PATH)
        log_str = "[%s:%d][%s] %s" % (filename, line, MODULE_NAME, str(msg) % args)
        getattr(self.logger, level)(log_str)

    def info(self, msg: Any, *args: Any) -> Any:
        """as same as self.log"""
        self.log("info", msg, *args)

    def debug(self, msg: Any, *args: Any) -> Any:
        """as same as self.log"""
        self.log("debug", msg, *args)

    def error(self, msg: Any, *args: Any) -> Any:
        """as same as self.log"""
        self.log("error", msg, *args)

    def warn(self, msg: Any, *args: Any) -> Any:
        """as same as self.log"""
        self.log("warn", msg, *args)

    def event(self, msg: Any, *args: Any) -> Any:
        """as same as self.log"""
        self.log("info", msg, *args)

LOG_INSTANCE = TintraIlpSolverSLog()


def get_py_exception_str(etype: object, value: object, tback: object, eprint: bool = False) -> list:
    """
    return python exception string, calling from C for error log printing
    """
    exc_list = traceback.format_exception(etype, value, tback)
    msg_list = []
    for item in exc_list:
        for msg in item.split("\n"):
            msg_list.append(msg)

    if eprint:
        traceback.print_exception(etype, value, tback)

    return msg_list
