#!/usr/local/python3.10.17/bin/python3.10
# Copyright 2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
op ut run
"""
import os
from absl import app
from absl import flags

from op_test_frame.ut import op_ut_runner
from op_test_frame.ut.op_ut_case_info import AscendcParams

FLAGS = flags.FLAGS
flags.DEFINE_string("case_files", None,
                    '1) Test case file, like test_*_impl.py or a directory which contains test_*_impl.py  '
                    '2) support multi file separate by ","  '
                    '3) default "./" (current directory)')
flags.DEFINE_string("soc_version", None, "[Mandatory] Run test cases on which soc, like Ascend910/Ascend310")
flags.DEFINE_string("case_name", None, "Case name list you want to run, default is run all test case in case_files")
flags.DEFINE_string("cov_report", None, "Coverage report, support html/json, default is None")
flags.DEFINE_string("cov_report_path", None, 'A directory to save coverage report files, default is "./cov_report"')
flags.DEFINE_string("test_report", None, "Test report, support json, default is None, only print summary report info")
flags.DEFINE_string("test_report_path", None, 'A directory to save report files, default is "./report"')
flags.DEFINE_string("simulator_mode", None,
                    'Run test case on simulator model(not on real npu device), support ca/pv/tm')
flags.DEFINE_string("simulator_lib_path", None,
                    'Simulator library path, if install adk you can see '
                    '"~/.mindstudio/huawei/adk/1.75.T5.0.B050/tools/simulator/lib".'
                    'you can also set it by config env"SIMULATOR_PATH"')
flags.DEFINE_string("simulator_data_path", None,
                    'A directory to simulator dump data files, default is "./model"')
flags.DEFINE_string("data_path", None,
                    "A directory to save test case data file of operator's input, output, "
                    "expect output, default is './data'")
flags.DEFINE_integer("process_num", 1, "process num, default value is a single process. \
                     If you want to use multiple processes, specify the number of processes.")
flags.DEFINE_string("ascendc_op_path", None,
                    "Ascendc impl cpp path.Required for ascendc op ut test.")
flags.DEFINE_integer("block_dim", 1,
                     "Number of cores executed by the kernel function.Required for ascendc op ut test.")


def main(args):  # pylint: disable=unused-argument
    """
    main method
    :param args: default args
    :return: None
    """
    case_files = FLAGS.case_files
    if not case_files:
        case_files = os.path.realpath("./")
    case_files = case_files.split(",")
    soc_version = FLAGS.soc_version
    case_name = FLAGS.case_name
    if case_name:
        case_name = case_name.split(",")
    cov_report = FLAGS.cov_report
    cov_report_path = FLAGS.cov_report_path
    if not cov_report_path:
        cov_report_path = "./cov_report"
    test_report = FLAGS.test_report
    test_report_path = FLAGS.test_report_path
    if not test_report_path:
        test_report_path = "./report"
    simulator_mode = FLAGS.simulator_mode
    simulator_lib_path = FLAGS.simulator_lib_path
    simulator_data_path = FLAGS.simulator_data_path
    if not simulator_data_path:
        simulator_data_path = "./model"
    test_data_path = FLAGS.data_path
    if not test_data_path:
        test_data_path = "./data"
    if not soc_version:
        print('[ERROR] Please set soc_version, see "op_ut_run --help"')
        return
    process_num = FLAGS.process_num

    ascendc_params = AscendcParams(FLAGS.ascendc_op_path, FLAGS.block_dim)
    # ascendc ut test doesn't support coverage
    if FLAGS.ascendc_op_path:
        cov_report = None
    
    success = op_ut_runner.run_ut(case_dir=case_files, soc_version=soc_version, case_name=case_name,
                                  test_report=test_report, test_report_path=test_report_path,
                                  cov_report=cov_report, cov_report_path=cov_report_path,
                                  simulator_mode=simulator_mode, simulator_lib_path=simulator_lib_path,
                                  simulator_data_path=simulator_data_path, test_data_path=test_data_path,
                                  process_num=process_num, ascendc_params=ascendc_params)
    if success != "success":
        print("UT run failed, please see detail report.")


if __name__ == "__main__":
    app.run(main)
