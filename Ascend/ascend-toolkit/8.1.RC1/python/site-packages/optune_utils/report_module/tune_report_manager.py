#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2022. Huawei Technologies Co., Ltd. All rights reserved.

Define the tune progress manager class
"""
import copy
import time
import threading
import types
import json

from optune_utils import log
from optune_utils.global_manager import GlobalManager

TIME_SLEEP = 0.1


class SingleJobTuneRes:
    """ record each job tune res"""
    def __init__(self) -> None:
        self.add_num = 0
        self.update_num = 0
        self.hit_num = 0
        self.reserved_num = 0
        self.unsatisfied_num = 0
        self.tune_res_status = True
        self.modify_repo_op_list = []
        self.tune_failed_op_list = []
        self.is_updated = False

    @staticmethod
    def get_op_res_dict(tune_res_info: dict) -> dict:
        """
        get result dict
        """
        tune_res_data = {}
        tune_res_data["op_type"] = tune_res_info.get("op_type")
        tune_res_data["op_name"] = tune_res_info.get("op_name")
        # add tune_performance dict
        tune_res_data["tune_performance"] = {tune_res_info.get("tune_mode"): tune_res_info.get("result_data")}
        return tune_res_data

    @staticmethod
    def update_repo_op_list(modify_repo_op_list: list, tune_res_data: dict):
        for modify_repo_op_info in modify_repo_op_list:
            if modify_repo_op_info.get("op_name") == tune_res_data.get("op_name"):
                modify_repo_op_info["tune_performance"].update(tune_res_data.get("tune_performance"))
                return
        modify_repo_op_list.append(tune_res_data)

    def update_report_msg(self, tune_res_info: dict) -> None:
        """
        update add_repo_op_list or update_repo_op_list and hit_num
        """
        bank_status = tune_res_info.get("status_data", {})
        if not bank_status:
            log.warn("Get illeagal tune_res_info")
            return
        self.is_updated = True
        if bank_status.get("bank_hit", False):
            self.hit_num += 1
        if bank_status.get("bank_update", False):
            self.update_num += 1
            self.update_repo_op_list(self.modify_repo_op_list, self.get_op_res_dict(tune_res_info))
        if bank_status.get("bank_append", False):
            self.add_num += 1
            self.update_repo_op_list(self.modify_repo_op_list, self.get_op_res_dict(tune_res_info))
        if bank_status.get("bank_reserved", False):
            self.reserved_num += 1
        if bank_status.get("bank_unsatisfied", False):
            self.unsatisfied_num += 1
        if not tune_res_info.get("tune_op_succ", True):
            self.tune_res_status = False
            if tune_res_info.get("op_name") and tune_res_info.get("op_name") not in self.tune_failed_op_list:
                self.tune_failed_op_list.append(tune_res_info.get("op_name"))

    def get_all_report_msg(self) -> tuple:
        """
        get report_dict for opat
        """
        if not self.is_updated:
            return "", None
        tune_res_dict = {}
        res_dict = {}
        res_dict["opat_tuning_result"] = "tuning incomplete"
        repo_status_dict = {}
        repo_status_dict["total_num"] = self.hit_num + self.add_num + self.unsatisfied_num
        repo_status_dict["repo_add_num"] = self.add_num
        repo_status_dict["repo_update_num"] = self.update_num
        repo_status_dict["repo_hit_num"] = self.hit_num
        repo_status_dict["repo_reserved_num"] = self.reserved_num
        repo_status_dict["repo_unsatisfied_num"] = self.unsatisfied_num
        res_dict["repo_summary"] = repo_status_dict
        if self.update_num + self.add_num != 0:
            res_dict["repo_modified_operators"] = self.modify_repo_op_list
        if self.tune_failed_op_list:
            res_dict["tuning_failed_operators"] = self.tune_failed_op_list
        return json.dumps(res_dict), self.tune_res_status


class TuneResReportManager(threading.Thread):
    """
    Tune Progress Manage
    """
    def __init__(self, global_mgr: GlobalManager, opat_utils: types.ModuleType = None) -> None:
        """
        TuneResReportManager init
        """
        super(TuneResReportManager, self).__init__()
        self.event = threading.Event()
        self.global_mgr = global_mgr
        self.all_job_res = {}
        self.opat_utils = opat_utils

    def add_new_report_object(self, job_id: str) -> None:
        """
        add new job report object
        """
        if job_id not in self.all_job_res:
            single_job = SingleJobTuneRes()
            self.all_job_res[job_id] = single_job

    def update_report_object(self, tune_res_info: dict) -> None:
        """
        update report object refered to job_id
        """
        cur_job_id = tune_res_info.get("job_id")
        if cur_job_id not in self.all_job_res:
            log.error("job %s is not registered.", cur_job_id)
            return
        self.all_job_res.get(cur_job_id).update_report_msg(tune_res_info)
        self.report_job_tune_res_info(cur_job_id)

    def report_job_tune_res_info(self, cur_job_id: str) -> None:
        """
        get the tune result info for job_id
        """
        if cur_job_id not in self.all_job_res:
            log.error("job %s is not registered.", cur_job_id)
            return
        report_str, tune_res_status = self.all_job_res.get(cur_job_id).get_all_report_msg()
        opat_tune_result = ""
        log.info("report_job_tune_res_info: tune_res_status is %s.", tune_res_status)
        if tune_res_status is not None:
            opat_tune_result = "tuning successful" if tune_res_status else "tuning failed"
        if report_str:
            self.opat_utils.update_tune_report(report_str, str(cur_job_id), opat_tune_result)

    def run(self) -> None:
        """
        run TuneResReportManager
        :return:
        """
        log.event("[TuneResReportManager]TuneResReportManager Entry!")
        while not self.event.is_set():
            if not self.global_mgr.tune_report_info_q.empty():
                tune_res_info = self.global_mgr.tune_report_info_q.get()
                log.info("get tune_res_info: %s.", tune_res_info)
                self.update_report_object(tune_res_info)
            time.sleep(TIME_SLEEP)
        log.event("[TuneResReportManager] event set, stop run!")

    def stop(self) -> None:
        """
        stop TuneResReportManager
        :return:
        """
        log.info("TuneResReportManager set event to stop tune_progress_manage.")
        self.event.set()
        self.join()
        log.info("TuneResReportManager stop tune_progress_manage succ!")
