#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

kb_hit_stat_tool
"""
import os
import re
import sys

# SGAT命中知识库标识
HIT_SG_KB = '169738280'
# SGAT不命中知识库标识
NOT_HIT_SG_KB = '169738250'


def parse_fused_op_name(ori_kernel_name: str) -> tuple:
    """
    提取算子融合类型
    :ori_kernel_name: 输入kernel_name
    :return:
    :fuison_type: 算子融合类型
    """
    kernel_name = ori_kernel_name.split("__")[0]
    if 'te_fused_op' in kernel_name:
        fusion_op_list = kernel_name.split("_")[3:-2]
    elif 'te' in kernel_name:
        fusion_op_list = kernel_name.split("_")[1:-2]
    else:
        fusion_op_list = kernel_name.split("_")[0:-2]
    return "_".join(fusion_op_list)


def parse_hit_data(slog_path: str) -> tuple:
    """
    命中数据解析
    :slog_path: 输入log日志路径
    :return:
    :op_kb_hit_data: 算子知识库命中数据
    :sg_kb_hit_data: 子图知识库命中数据
    """
    op_kb_hit_data = {}
    op_kb_hit_detail = {}
    sg_kb_hit_data = {}
    with open(slog_path, 'r', encoding="ISO-8859-1") as f_handle:
        lines = f_handle.read()
        op_pattern = re.compile(r'FE\((.*),.*\[op_kb_hit\]\[(.*)\]\[(.*)\]\[(.*)\]')
        sg_pattern = re.compile(r'FE\((.*),.*\[sg_kb_hit\]\[(.*)\]\[(.*)\]')
        all_op_data = op_pattern.findall(lines)
        all_sg_data = sg_pattern.findall(lines)
    for pid, opname, hit_flag, kernel_name in all_op_data:
        fuison_type = parse_fused_op_name(kernel_name)
        if pid not in op_kb_hit_data:
            op_kb_hit_data[pid] = {opname: hit_flag}
            op_kb_hit_detail[pid] = {opname: fuison_type}
        else:
            op_kb_hit_data[pid][opname] = hit_flag
            op_kb_hit_detail[pid][opname] = fuison_type
    for pid, sgname, hit_flag in all_sg_data:
        if hit_flag == HIT_SG_KB:
            hit_flag = '1'
        else:
            hit_flag = '0'
        if pid not in sg_kb_hit_data:
            sg_kb_hit_data[pid] = {sgname: hit_flag}
        else:
            sg_kb_hit_data[pid][sgname] = hit_flag
    return op_kb_hit_data, op_kb_hit_detail, sg_kb_hit_data


def count_hit_data(kb_hit_data: dict, op_flag: bool = False) -> dict:
    """
    命中数据统计
    :kb_hit_data: 知识库命中原始数据
    :return:
    :kb_hit_data: 知识库原始数据和统计数据的整合
    """
    for pid, each_hit_data in kb_hit_data.items():
        pid_total_hit = 0
        pid_total_count = 0
        for _, hit_flag in each_hit_data.items():
            if hit_flag == "1":
                pid_total_hit += 1
            if (op_flag and hit_flag != "-1") or not op_flag:
                pid_total_count += 1
        kb_hit_data[pid] = [each_hit_data, pid_total_count, pid_total_hit, pid_total_count - pid_total_hit]
    return kb_hit_data


def print_hit_data(op_kb_hit_data: dict, op_kb_hit_detail: dict, sg_kb_hit_data: dict) -> None:
    """
    打印知识库命中数据
    :op_kb_hit_data: 算子知识库命中数据
    :op_kb_hit_detail: 算子知识库命中详情
    :sg_kb_hit_data: 子图知识库命中数据
    :return:
    """
    all_pid = set(op_kb_hit_data.keys()) | set(sg_kb_hit_data.keys())
    for pid in all_pid:
        if pid in sg_kb_hit_data:
            print("========================="
                            "Subgraph Bank Hit Summary For PID: %s =========================" % pid)
            tmp = "                          Total_Num:%d    " % sg_kb_hit_data[pid][1]
            tmp = "%sHit_Num:%d    " % (tmp, sg_kb_hit_data[pid][2])
            tmp = "%sNot_Hit_Num:%d    " % (tmp, sg_kb_hit_data[pid][3])
            print(tmp)
            for sgname, hit_flag in sg_kb_hit_data[pid][0].items():
                print("%s: %s" % (sgname, hit_flag))
        if pid in op_kb_hit_data:
            print("========================="
                            "Operator Bank Hit Summary For PID: %s =========================" % pid)
            tmp = "                          Total_Num:%d    " % op_kb_hit_data[pid][1]
            tmp = "%sHit_Num:%d    " % (tmp, op_kb_hit_data[pid][2])
            tmp = "%sNot_Hit_Num:%d    " % (tmp, op_kb_hit_data[pid][3])
            print(tmp)
            for opname, hit_flag in op_kb_hit_data[pid][0].items():
                if hit_flag != "-1":
                    print("%s | %s: %s" % (opname, op_kb_hit_detail[pid][opname], hit_flag))
        print("=============================================================================================\n")


def main() -> None:
    """
    小工具总入口
    :return:
    """

    if len(sys.argv) < 2:
        print('Invalid cmd. Missing parameters.')
        print('Example: python3 print_kbhit_data.py XX.log')
        return -1

    slog_path = os.path.realpath(sys.argv[1])
    if not os.path.isfile(slog_path):
        print('Invalid path. Please check the input file path[%s].' % slog_path)
        return -1

    op_kb_hit_data, op_kb_hit_detail, sg_kb_hit_data = parse_hit_data(slog_path)
    op_kb_hit_data = count_hit_data(op_kb_hit_data, op_flag=True)
    sg_kb_hit_data = count_hit_data(sg_kb_hit_data)
    print_hit_data(op_kb_hit_data, op_kb_hit_detail, sg_kb_hit_data)
    return 0


if __name__ == '__main__':
    sys.exit(main())
