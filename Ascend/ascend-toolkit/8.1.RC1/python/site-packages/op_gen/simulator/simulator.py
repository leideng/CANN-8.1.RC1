#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
import os
import re
from op_gen.simulator.parse_dump import ParseDump
from op_gen.simulator.parse_objdump import RelocParser
from op_gen.simulator.sim_const import Const, DumpType
from op_gen.simulator import utils
from op_gen.simulator.statistics import CodeStatistics
from op_gen.simulator.trace import Trace, TraceContent
from op_gen.simulator.parse_first_pc import FirstPCParser


class Args:

    def __init__(self, args) -> None:
        self.args = args
        self.core_id = args.core_id
        self.dump_dir = args.dump_dir
        self.subcore_id = args.subcore_id
        self.mixcore_mode = args.mixcore_mode
        self.output = args.output
        self.relocatable_file = args.relocatable_file

    @classmethod
    def add_arguments(cls, parser) -> None:
        parser.add_argument("-c", "--core-id", dest="core_id", required=True,
                            help="[Required]Core ID which you want to visualize.")
        parser.add_argument("-d", "--dump-dir", dest="dump_dir", required=True,
                            metavar="DIR", help="[Required]Path of dump data.")
        parser.add_argument("-subc", "--subcore_id", dest="subcore_id", default="",
                            help="[Required only when using Ascend910B and mixcore is False]"
                            "Subcore ID which you want to visualize.")
        parser.add_argument("-mix", "--mixcore-mode", dest="mixcore_mode", action='store_true',
                            help="[Required only when using Ascend910B]If the core mode is mixcore.")
        parser.add_argument("-out", "--output", dest="output", required=True, metavar="DIR",
                            help="[Required]Output path of JSON file in trace format.")
        parser.add_argument("-reloc", "--relocatable-file", dest="relocatable_file", required=False, default="",
                            help="[Optional]Relocatable file end with '.o' or executable file.")

    def check_args(self):
        utils.CheckPath.check_path(self.dump_dir, os.R_OK)
        utils.CheckPath.check_path(self.output, os.W_OK, makedir=True)
        if self.relocatable_file:
            utils.CheckPath.check_file(self.relocatable_file)
        if re.match(r"^core{0-9}+$", self.core_id):
            raise utils.Dump2TraceException(
                "--core-id: %s, doesn't match" % self.core_id)
        if self.subcore_id and not re.match(r"^mixcore|((vec|cube)core[0-9]+)$", self.subcore_id):
            raise utils.Dump2TraceException(
                "--subcore: %s, doesn't match" % self.subcore_id)
        if self.mixcore_mode:
            subcore_list = self.load_mixcore()
            if len(subcore_list) < 2:
                raise utils.Dump2TraceException(
                    "Mixcore mode need dumps of 2 subcores.")
            for subcore_id in subcore_list:
                self._check_dump_file_valid(subcore_id)
        else:
            self._check_dump_file_valid(self.subcore_id)

    def _check_dump_file_valid(self, subcore_id: str):
        file_list = os.listdir(self.dump_dir)
        dump_files = self.get_dump_files(self.core_id, subcore_id)
        for file in dump_files.values():
            if file not in file_list:
                raise utils.Dump2TraceException(
                    f"The file {file} is not exist.")
            utils.CheckPath.check_file(os.path.join(self.dump_dir, file))

    @classmethod
    def get_dump_files(cls, core_id: str, subcore_id: str):
        prefix = f"{core_id}_"
        cache_str = Const.ICACHE_MISS_DUMP_1ST
        if subcore_id:
            prefix = f'{core_id}.{subcore_id}.'
            cache_str = Const.ICACHE_MISS_DUMP_2RD
        dump_file_map = {}
        dump_file_map[DumpType.IcacheDump] = f'{prefix}{cache_str}.dump'
        dump_file_map[DumpType.InstrDump] = f"{prefix}{Const.INSTR_DUMP}.dump"
        dump_file_map[DumpType.InstrPopDump] = f'{prefix}{Const.INSTR_POP_DUMP}.dump'
        return dump_file_map

    def load_mixcore(self):
        subcore_list = []
        for file in sorted(os.listdir(self.dump_dir)):
            core_match = re.search(r"(cube|vec)core[0-9]+", file)
            if core_match and core_match.group() not in subcore_list:
                subcore_list.append(core_match.group())
        return subcore_list


class TaskInfo:
    def __init__(self, args) -> None:
        self.core_id = args.core_id
        self.subcore_id = args.subcore_id
        self.dump_dir = args.dump_dir
        self.output = args.output
        self.relocatable_file = args.relocatable_file

    @property
    def core_name(self):
        if self.subcore_id:
            return f"{self.core_id}_{self.subcore_id}"
        return self.core_id

    @property
    def dump_files(self):
        dump_files = Args.get_dump_files(self.core_id, self.subcore_id)
        return [(type_, os.path.join(self.dump_dir, file_name)) for type_, file_name in dump_files.items()]

    @property
    def core_prefix(self):
        if self.subcore_id:
            return f'{self.core_id}.{self.subcore_id}.'
        return f"{self.core_id}_"


class MixCoreTask:
    def __init__(self, task_infos: list) -> None:
        self.task_infos = task_infos
        self.tasks = [Task(task_info) for task_info in task_infos]
        self.first_pc = ""
        self.pc2code = {}
        self.code2pc = {}
        self.events = []

    def run(self):
        self.parse_first_pc()
        self.parse_reloc()
        self.parse_dump()
        self.output_statistics()
        self.gen_trace_events()
        self.output_trace()

    def parse_dump(self):
        for task in self.tasks:
            task.parse_dump()

    def parse_first_pc(self):
        task = self.tasks[0]
        if task.task_info.relocatable_file:
            first_pc_int = -1
            for task in self.tasks:
                task.parse_first_pc()
                if first_pc_int < 0 or int(task.first_pc, 16) < first_pc_int:
                    first_pc_int = int(task.first_pc, 16)
                    self.first_pc = task.first_pc
            for task in self.tasks:
                task.first_pc = self.first_pc

    def parse_reloc(self):
        task = self.tasks[0]
        task.first_pc = self.first_pc
        task.parse_reloc()
        self.code2pc = task.code2pc
        self.pc2code = task.pc2code
        for task in self.tasks:
            task.code2pc = self.code2pc
            task.pc2code = self.pc2code

    def output_statistics(self):
        for task in self.tasks:
            task.output_statistics()

    def gen_trace_events(self):
        for task in self.tasks:
            task.gen_trace_events()
            self.events.extend(task.events)

    def output_trace(self):
        task = self.tasks[0]
        trace = Trace(task.task_info.core_id, task.task_info.output)
        trace.add_event(self.events)
        trace.output()


class Task:
    def __init__(self, task_info: TaskInfo) -> None:
        self.task_info = task_info
        self.first_pc = ""
        self.pc2code = {}
        self.code2pc = {}
        self.instr_list = []
        self.cache_list = []
        self.events = []

    def run(self):
        self.parse_first_pc()
        self.parse_reloc()
        self.parse_dump()
        self.output_statistics()
        self.gen_trace_events()
        self.output_trace()

    def parse_dump(self):
        dump_parser = ParseDump(self.task_info)
        dump_parser.parse_dump_files()
        self.instr_list = dump_parser.instr_list
        self.cache_list = dump_parser.cache_list

    def parse_first_pc(self):
        if self.task_info.relocatable_file:
            first_pc_parser = FirstPCParser(
                self.task_info.core_prefix, self.task_info.dump_dir, self.task_info.core_id)
            self.first_pc = first_pc_parser.get_first_pc()

    def parse_reloc(self):
        if self.task_info.relocatable_file:
            reloc_parser = RelocParser(self.task_info.relocatable_file, self.task_info.output)
            self.pc2code = reloc_parser.get_pc_code_map(self.first_pc)
            self.code2pc = reloc_parser.get_code_pc_map(self.first_pc)

    def output_statistics(self):
        if self.task_info.relocatable_file:
            stat = CodeStatistics(
                self.code2pc, self.instr_list, self.task_info.output, self.task_info.core_name)
            stat.show_hot_spot()

    def gen_trace_events(self):
        trace_content = TraceContent(self.instr_list, self.cache_list)
        self.events = trace_content.get_trace_events(self.task_info.core_name, self.pc2code)

    def output_trace(self):
        trace = Trace(self.task_info.core_id, self.task_info.output)
        trace.add_event(self.events)
        trace.output()


class Simulator:
    """main class of simulator module
    Only open class of Simulator module
    """

    @classmethod
    def check_simulator_args(cls, args):
        sim_args = Args(args)
        sim_args.check_args()

    @classmethod
    def add_arguments(cls, parser):
        Args.add_arguments(parser)

    @classmethod
    def run(cls, args):
        if args.mixcore_mode:
            sim_args = Args(args)
            subcore_list = sim_args.load_mixcore()
            task_infos = []
            for subcore_id in subcore_list:
                task_info = TaskInfo(args)
                task_info.subcore_id = subcore_id
                task_infos.append(task_info)
            task = MixCoreTask(task_infos)
        else:
            task = Task(TaskInfo(args))
        task.run()
