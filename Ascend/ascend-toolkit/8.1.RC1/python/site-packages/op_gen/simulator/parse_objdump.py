#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
import subprocess
import re
import os
from typing import Generator
from op_gen.simulator import utils
from op_gen.interface.const_manager import ConstManager
from op_gen.interface.utils import check_execute_file


"""objdump output
xx():
/home/xx/xx.cpp:0
       0: <not available>
       4: 00 00 00      xxx %xxx,-0x000(%xxx)
     ...
/home/xx/xx.h:0
      84: <not available>
"""


class RelocParser:
    code_pattern = r"^(/(?:[^/\x00]{,256}/){,256}[^/\x00]{,256}):([0-9]+)$"
    addr_pattern = r"^\s*([0-9a-f]+):\s.+$"

    def __init__(self, relocatable_file, output_path) -> None:
        self.relocatable_file = relocatable_file
        self.output_path = output_path
        self._pc_code_map = {}
        self._code_pc_map = {}

    def get_pc_code_map(self, first_pc: str) -> dict:
        if not self._pc_code_map:
            self._parse_output(first_pc)
        return self._pc_code_map

    def get_code_pc_map(self, first_pc: str) -> dict:
        if not self._code_pc_map:
            self._parse_output(first_pc)
        return self._code_pc_map

    def _executable2obj(self):
        cmd = ["llvm-objdump", "--save-aicore-bins", self.relocatable_file]
        utils.logger.info(f"Execute command line: {cmd}")
        proc = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=self.output_path)
        (out, _) = proc.communicate()
        if proc.returncode != 0:
            msg = "Decompile the executable file(%s) to object file failed" % (
                self.relocatable_file)
            utils.logger.error(msg)
            raise utils.Dump2TraceException(out.decode())

    def _execute_objdump(self) -> Generator:
        paths = (os.getenv("PATH") or "").split(":")
        ccec_compiler_path = ""
        for path in paths:
            if path.endswith("ccec_compiler/bin") or path.endswith("ccec_compiler/bin/"):
                ccec_compiler_path = path
                break
        if not ccec_compiler_path:
            raise utils.Dump2TraceException(
                "There in no ccec_compiler/bin in PATH.")
        if not check_execute_file(os.path.join(ccec_compiler_path, "llvm-objdump")):
            raise utils.Dump2TraceException(f"llvm-objdump is not executable")
        obj_file_path = self.relocatable_file
        if not obj_file_path.endswith(".o"):
            self._executable2obj()
            obj_file_path = os.path.join(self.output_path, "aicore.bin.0")
            if not os.path.isfile(obj_file_path):
                raise utils.Dump2TraceException(f"Failed to generate {obj_file_path}")
            os.chmod(obj_file_path, ConstManager.CONFIG_MODE)
        cmd = ["llvm-objdump", "-l", obj_file_path]
        utils.logger.info(f"Execute command line: {cmd}")
        try:
            output = subprocess.check_output(cmd, shell=False)
        except Exception as e:
            raise utils.Dump2TraceException(e)
        return output.decode(encoding="utf-8").split("\n")

    def _add_code_line_container(self, code_line: tuple):
        code_area = self._code_pc_map.get(code_line)
        if code_area and isinstance(code_area, list):
            code_area.append([])
        else:
            self._code_pc_map[code_line] = [[]]

    def _add_addr(self, code_line: tuple, addr_match: re.Match, first_pc_int: int):
        offset = addr_match[1]
        pc_addr = hex(int(offset, 16) + first_pc_int)
        self._pc_code_map[pc_addr] = code_line
        code_area = self._code_pc_map.get(code_line)
        if isinstance(code_area, list) and len(code_area) > 0 and isinstance(code_area[-1], list):
            code_area[-1].append(pc_addr)

    def _parse_output(self, first_pc):
        line_iter = self._execute_objdump()
        first_pc_int = int(first_pc, 16)
        code_line = None
        for line in line_iter:
            if not line:
                continue
            code_line_match = re.match(self.code_pattern, line)
            if code_line_match:
                code_line = (code_line_match[1], code_line_match[2])
                self._add_code_line_container(code_line)
                continue
            addr_match = re.match(self.addr_pattern, line)
            if code_line and addr_match:
                self._add_addr(code_line, addr_match, first_pc_int)

        if code_line is None:
            raise utils.Dump2TraceException(
                "Relocatable file is compiled without debug info.")
