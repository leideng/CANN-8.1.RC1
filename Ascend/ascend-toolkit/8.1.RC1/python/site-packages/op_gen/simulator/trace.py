#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.

import hashlib
import re
import os
from op_gen.simulator.sim_const import Const
from op_gen.simulator import utils


class TraceContent:
    CNAMES = (
        "thread_state_iowait", "thread_state_running", "thread_state_runnable",
        "thread_state_unknown", "background_memory_dump", "rail_response",
        "rail_animation", "rail_load", "startup",
        "heap_dump_child_node_arrow", "cq_build_running", "cq_build_passed",
        "cq_build_failed"
    )

    def __init__(self, instr_list: list, cache_list: list) -> None:
        self.instr_list = instr_list
        self.cache_list = cache_list
        self._render_list = []

    def _get_cname(self, name):
        if name is None:
            return self.CNAMES[-1]
        hash_string = hashlib.sha1(name.encode(encoding='utf-8')).hexdigest()
        index = int(hash_string[:8], 16) % len(self.CNAMES)
        return self.CNAMES[index]

    def _is_event_instr(self, instr_name):
        return instr_name == Const.SET_FLAG or instr_name == Const.WAIT_FLAG or instr_name == Const.BARRIER

    def _get_render_pipe_key(self, obj):
        return obj.render_pipe_name

    def _is_mte2_instr(self, instr_name):
        return instr_name == Const.MTE2_INSTR

    def _render_instr_trace(self):
        sorted_instr_list = sorted(self.instr_list, key=self._get_render_pipe_key)
        for m in sorted_instr_list:
            id_str = "%s.%s" % (m.instr_name, m.instr_detail)
            if self._is_event_instr(m.instr_name):
                id_str += m.detail
            elif hasattr(m, Const.BANK_CONFLICT_RD) and hasattr(m, Const.BACK_CONFLICT_WR):
                id_str += ".Bank Conflict: Read %s Write %s" % (
                    m.bankConflictRD, m.bankConflictWR)
            elif self._is_mte2_instr(m.instr_name) and Const.REGISTER_XD in m.params:
                id_str += "(xdValue: %s)" % m.params[Const.REGISTER_XD]
            single_instr = {Const.PIP_NAME: m.pipe, Const.PC_ADDR: m.instr_pc, Const.START_TIME: m.start,
                            Const.END_TIME: m.end + 1,
                            Const.DURATION: m.end - m.start + 1, Const.DETAIL_INFO: id_str}
            self._render_list.append(single_instr)

    def _render_cache_trace(self):
        for ic in self.cache_list:
            id_str = "%s.%s" % (ic.addr, ic.req_id)
            single_instr = {Const.PIP_NAME: Const.ICACHEMISS, Const.PC_ADDR: ic.addr,
                            Const.START_TIME: ic.start, Const.END_TIME: ic.end,
                            Const.DURATION: ic.end - ic.start, Const.DETAIL_INFO: id_str}
            self._render_list.append(single_instr)

    def get_render_list(self):
        self._render_instr_trace()
        self._render_cache_trace()
        return self._render_list

    def get_trace_events(self, core_name: str, pc_code_map: map):
        events = []
        for ins in self.get_render_list():
            addr = ins.get('addr', '')
            detail = re.split(r"[.( ]", ins.get('detail', ''))
            name = detail[0] if len(detail) >= 2 else ''
            args = {
                "addr": addr,
                "detail": ins.get('detail', '').replace(f"{name}.", '').strip()
            }
            if pc_code_map.get(addr):
                args["code"] = ":".join(pc_code_map.get(addr))
            cname = self._get_cname(ins.get('name'))
            events.append({
                "name": name,
                "cname": cname,
                "ph": "X",
                "ts": ins.get('start'),
                "dur": ins.get('duration'),
                "pid": core_name,
                "tid": ins.get('name'),
                "args": args
            })
        return events


class Trace:
    def __init__(self, core_id: str, output_path: str) -> None:
        self.core_id = core_id
        self.output_path = output_path
        self.events = []

    def add_event(self, events: list):
        self.events.extend(events)

    def output(self):
        res = {"schemaVersion": 1, "displayTimeUnit": "ms",
               "traceEvents": self.events}
        utils.write_json_file(os.path.join(
            self.output_path, 'dump2trace_%s.json' % self.core_id), res)
