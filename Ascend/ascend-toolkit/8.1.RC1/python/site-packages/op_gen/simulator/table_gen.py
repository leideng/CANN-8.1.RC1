#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Function:
print table
Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
import os


class TableGen:
    """
    +---------+--------------+------------+-------+-----------------------------------------------+
    |   Name  |  PC Address  | Call Count | Cycle |                  instr detail                 |
    +---------+--------------+------------+-------+-----------------------------------------------+
    |   xxx   |  0x10ce20dc  |     1      |   2   | xxx  xxxxx                                    |
    +---------+--------------+------------+-------+-----------------------------------------------+
    """
    SPACE = " "
    PADDING_SIZE = 2
    TABLE_JOINT_SYMBOL = "+"
    TABLE_H_JOINT_SYMBOL = "-"
    TABLE_V_JOINT_SYMBOL = "|"

    def __init__(self: any, head_list: list, rows_list: list) -> None:
        self.head_list = head_list
        self.rows_list = rows_list

    @classmethod
    def _fill_space(cls: any, lens: int) -> str:
        return TableGen.SPACE * lens

    @classmethod
    def _create_row_line(cls: any, lens: int, colum_max_width_dict: dict) -> str:
        table = TableGen.TABLE_JOINT_SYMBOL
        for i in range(lens):
            if colum_max_width_dict.get(i) is None:
                continue
            table += TableGen.TABLE_H_JOINT_SYMBOL * (colum_max_width_dict[i] + TableGen.PADDING_SIZE * 2) \
                     + TableGen.TABLE_JOINT_SYMBOL
        return table

    @classmethod
    def _get_max_table_width(cls: any, head_list: list, rows_list: list) -> dict:
        column_width_map = {}
        for index, value in enumerate(head_list):
            column_width_map[index] = len(value)
        for row_list in rows_list:
            for index, value in enumerate(row_list):
                if len("{}".format(value)) > column_width_map.get(index, 0):
                    column_width_map[index] = len("{}".format(value))
        for index in range(len(head_list)):
            if column_width_map.get(index, 0) % 2 != 0:
                column_width_map[index] += 1
        return column_width_map

    @classmethod
    def _get_optimum_cell_padding(cls: any, cell_index: int, data_len: int, colum_max_width_dict: dict) -> int:
        if data_len % 2 != 0:
            data_len += 1
        new_cell_padding = TableGen.PADDING_SIZE
        if data_len < colum_max_width_dict.get(cell_index, data_len - 1):
            new_cell_padding = TableGen.PADDING_SIZE + (colum_max_width_dict[cell_index] - data_len) // 2
        return new_cell_padding

    def get_table_str(self: any) -> str:
        if not self.head_list or not self.rows_list:
            return ""
        column_width_dict = self._get_max_table_width(self.head_list, self.rows_list)
        table = ""
        table += self._create_row_line(len(self.head_list), column_width_dict) + os.linesep
        for index, ele in enumerate(self.head_list):
            table += self._fill_cell(ele, index, column_width_dict)
        table += os.linesep + self._create_row_line(len(self.head_list), column_width_dict)
        for row_list in self.rows_list:
            table += os.linesep
            for index, ele in enumerate(row_list):
                table += self._fill_cell('{}'.format(ele), index, column_width_dict)
        table += os.linesep + self._create_row_line(len(self.head_list), column_width_dict) + os.linesep
        return table

    def _fill_cell(self: any, cell: str, cell_index: int, colum_max_width_dict: dict) -> str:
        table = ""
        if cell_index == 0:
            table += TableGen.TABLE_V_JOINT_SYMBOL
        cell_padding_size = self._get_optimum_cell_padding(cell_index, len(cell), colum_max_width_dict)
        table += self._fill_space(cell_padding_size) + cell
        if len(cell) % 2 != 0:
            table += TableGen.SPACE
        table += self._fill_space(cell_padding_size) + TableGen.TABLE_V_JOINT_SYMBOL
        return table
