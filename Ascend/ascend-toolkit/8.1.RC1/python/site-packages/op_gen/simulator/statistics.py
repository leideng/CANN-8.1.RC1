#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
import os
from op_gen.simulator.sim_const import Const
from op_gen.simulator import utils
from op_gen.simulator.table_gen import TableGen


class ExeInfo:
    """
    get code execution information.
    line:/home/xxx/ascendc.cpp
    pc_addr:[{},{},{}]
    """

    def __init__(self: any, line: str, pc_addr: list, pc_time: dict) -> None:
        self._line = line
        self._pc_addr = pc_addr
        self._pc_time = pc_time
        self.exe_count = 0
        self.exe_time = 0
        self._actual_pc_time = []
        if self._check_valid():
            self._compute_exe_time()

    def _check_valid(self: any) -> bool:
        counts = set()
        for addrs in self._pc_addr:
            self._actual_pc_time.append(
                {addr: self._pc_time.get(addr, []) for addr in addrs})
        for value in self._actual_pc_time:
            for durations in value.values():
                counts.add(len(durations))
        self.exe_count = max(counts) if counts else 0
        return self.exe_count != 0

    def _compute_exe_time(self: any) -> None:
        time_set = set()
        merged_time = []
        for value in self._actual_pc_time:
            for durations in value.values():
                for start_end_time in durations:
                    time_set.add(start_end_time)
        sorted_time = sorted(time_set, key=lambda x: x[0])
        if not sorted_time:
            return
        merged_time.append(sorted_time[0])
        # 合并重合的时间信息
        for time in sorted_time[1:]:
            if len(merged_time[-1]) < 2 or len(time) < 2:
                continue
            if merged_time[-1][1] >= time[0]:
                s_e_time = [merged_time[-1][0], time[1]]
                merged_time.pop()
                merged_time.append(s_e_time)
            else:
                merged_time.append(time)
        for s_e_time in merged_time:
            self.exe_time += s_e_time[1] - s_e_time[0] + 1


class CodeStatistics:

    def __init__(self, line2pc: list, instr_list: list, print_path: str, core_name: str) -> None:
        self.line2pc = line2pc
        self.instr_list = instr_list
        self.print_path = print_path
        self.core_name = core_name

    def _get_code_prof(self, sorted_line2pc: list, pc_time: dict) -> list:
        hot_list = []
        for line, pc_addr in sorted_line2pc:
            exe_info = ExeInfo(":".join(line), pc_addr, pc_time)
            if exe_info.exe_count:
                hot_list.append(
                    [":".join(line), exe_info.exe_count, exe_info.exe_time])
        return sorted(hot_list, key=lambda x: x[2], reverse=True)

    def show_hot_spot(self):
        instr_exe_list, code_exe_list = self.gather_exe_hotspot()
        if instr_exe_list and instr_exe_list[0].get(Const.PARAM, ""):
            exe_head = (Const.INSTR_NAME, Const.PC_ADDR, Const.CALL_COUNT, Const.CYCLE,
                        Const.INSTR_DETAIL)
            instr_prof_path = os.path.join(
                self.print_path, f"{self.core_name}_instr_exe_prof.csv")
            utils.print_csv_file(exe_head, [prof.values() for prof in instr_exe_list],
                                 instr_prof_path)
        if code_exe_list:
            code_exe_head = (
                Const.LINE, Const.CALL_COUNT, Const.CYCLE)
            code_prof_path = os.path.join(
                self.print_path, f"{self.core_name}_code_exe_prof.csv")
            utils.print_csv_file(code_exe_head, code_exe_list, code_prof_path)
            table_gen = TableGen(code_exe_head, code_exe_list)
            output_str = f"Operator kernel {self.core_name} execute info:\n" + \
                table_gen.get_table_str()
            utils.logger.info(output_str)

    def gather_exe_hotspot(self):
        func_dict = {}
        for instr in self.instr_list:
            key = instr.instr_pc
            if key not in func_dict:
                func_dict[key] = {
                    Const.INSTR_NAME: instr.instr_name,
                    Const.PC_ADDR: instr.instr_pc,
                    Const.CALL_COUNT: 1,
                    Const.CYCLE: 0,
                    Const.PARAM: instr.instr_detail,
                    Const.START_END: [(instr.start, instr.end)]
                }
            else:
                func_dict[key][Const.CALL_COUNT] += 1
                func_dict[key][Const.START_END].append(
                    (instr.start, instr.end))
        hot_spot_list = []
        pc_time = {}
        for key in func_dict:
            item = func_dict[key]
            start_end = sorted(item[Const.START_END], key=lambda x: x[0])
            pc_time[key] = start_end
            cycles = 0
            prev_end = -1
            for start, end in start_end:
                if start > prev_end:
                    cycles += end + 1 - start
                else:
                    cycles += end - prev_end
                prev_end = end
            item[Const.CYCLE] = cycles
            item.pop(Const.START_END)
            hot_spot_list.append(item)
        instr_exe_list = sorted(
            hot_spot_list, key=lambda x: x[Const.CYCLE], reverse=True)
        sorted_line2pc = sorted(zip(self.line2pc.keys(), self.line2pc.values()))
        code_exe_list = self._get_code_prof(sorted_line2pc, pc_time)
        return instr_exe_list, code_exe_list
