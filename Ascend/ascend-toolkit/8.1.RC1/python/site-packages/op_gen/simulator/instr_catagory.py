#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Function:
instr catagory
Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
import re
from op_gen.simulator.sim_const import Const


class InstrCatagory:
    """
    Instruction classification
    """
    def __init__(self, pipe, instr_name):
        self.pipe = pipe
        self.instr_type = None
        self.instr_classif(instr_name)

    def mte1_classif(self, instr_name):
        if re.match("load_l1_to_l0.*", instr_name):
            self.instr_type = "From L1 to L0"
        elif re.match("(mov|load)_l1_to_ub", instr_name):
            self.instr_type = "From L1 to UB"
        elif re.match("set_(l0(a|b)|dst)_2d", instr_name):
            self.instr_type = "SET_{DST}_2D"
        else:
            self.instr_type = instr_name

    def mte2_classif(self, instr_name):
        if re.match("(mov|decompress)_out_to_ub", instr_name):
            self.instr_type = "out to ub"
        elif re.match("(mov|decompress)_out_to_l1|load_out_to_l1_unzip", instr_name):
            self.instr_type = "out to L1"
        elif re.match("load_out_to_l0(a|b)_unzip", instr_name):
            self.instr_type = "out to L0A/L0B"
        elif re.match("load_out_to_smask|decompress_out_to_dst", instr_name):
            self.instr_type = "out to sparse mask table"
        else:
            self.instr_type = instr_name

    def mte3_classif(self, instr_name):
        if re.match("(mov|compress)_ub_to_out", instr_name):
            self.instr_type = "UB to OUT"
        elif re.match("mov_ub_to_l1", instr_name):
            self.instr_type = "UB to L1"
        else:
            self.instr_type = instr_name

    def scalar_classif(self, instr_name):
        self.pipe = "SCALAR"
        if re.match("scalar_ld.*", instr_name):
            self.instr_type = "scalar_load"

        elif re.match("scalar_st.*", instr_name):
            self.instr_type = "scalar_store"
        else:
            self.instr_type = "others"

    def vector_classif(self, instr_name):
        self.instr_type = instr_name

    def flowctrl_classif(self, instr_name):
        if re.match("jump(i|ci)", instr_name):
            self.instr_type = "jump"

        elif re.match("calli?", instr_name):
            self.instr_type = "call"
        else:
            self.instr_type = "others"

    def event_classif(self, instr_name):
        self.instr_type = instr_name

    def instr_classif(self, instr_name):
        if self.pipe == Const.MTE1:
            self.mte1_classif(instr_name)
        elif self.pipe == Const.MTE2:
            self.mte2_classif(instr_name)
        elif self.pipe == Const.MTE3:
            self.mte3_classif(instr_name)
        elif self.pipe == Const.SCALAR:
            self.scalar_classif(instr_name)
        elif self.pipe == Const.VECTOR:
            self.vector_classif(instr_name)
        elif self.pipe == Const.FLOWCTRL:
            self.flowctrl_classif(instr_name)
        elif self.pipe == Const.EVENT:
            self.event_classif(instr_name)
