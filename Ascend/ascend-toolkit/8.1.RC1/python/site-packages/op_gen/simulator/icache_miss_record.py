#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Function:
ichache miss record
Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
import re
from op_gen.simulator import utils
from op_gen.simulator.sim_const import Const


class IcacheMissRecord:
    """
    icache miss file parameters
    """
    def __init__(self: any, init_dict: dict) -> None:
        try:
            self.start = int(init_dict.get(Const.START_TIME, 0))
            self.end = int(init_dict.get(Const.END_TIME, 0))
        except ValueError:
            self.start = 0
            self.end = 0
        self.addr = init_dict.get(Const.PC_ADDR, "")
        self.req_id = init_dict.get(Const.REQ_ID, "")
        self.raw_str = init_dict.get(Const.RAW_STR, "")


class IcacheMissList:
    def __init__(self: any, unify_lines: list, cache_name: str) -> None:
        self.unify_lines = unify_lines
        self.cache_name = cache_name
        self.num_miss = 0
        self.accum_clk = 0
        self.pipe_clk = 0
        self.records = self.parse()

    @staticmethod
    def get_icache_reqid_key(obj: object) -> str:
        return obj.req_id

    def parse(self: any) -> list:
        req_list = []
        ack_list = []
        self._update_icache_list(req_list, ack_list)
        return self._merge_list(req_list, ack_list)

    def _merge_list(self: any, req_list: list, ack_list: list) -> list:
        # merge requests
        record_list = []
        if len(req_list) != len(ack_list):
            utils.logger.error("icache req noe equal ack")
            return record_list
        # sort to Merge
        sorted_ack_list = sorted(ack_list, key=IcacheMissList.get_icache_reqid_key)
        sorted_req_list = sorted(req_list, key=IcacheMissList.get_icache_reqid_key)
        prev_end = 0
        ack_len = len(sorted_ack_list)
        i = 0
        while i < ack_len:
            start = sorted_req_list[i].start
            end = sorted_ack_list[i].end
            req_id0 = sorted_req_list[i].req_id
            req_id1 = sorted_ack_list[i].req_id
            addr0 = sorted_req_list[i].addr
            addr1 = sorted_ack_list[i].addr
            if (req_id0 != req_id1) or (addr0 != addr1):
                utils.logger.error("Icache req does not match [%s:%s] [%s:%s]" % (req_id0, req_id1, addr0, addr1))
                return record_list
            init_dic = {Const.START_TIME: start, Const.END_TIME: end, Const.PC_ADDR: addr0,
                        Const.REQ_ID: req_id0,
                        Const.RAW_STR: sorted_req_list[i].raw_str + sorted_ack_list[i].raw_str}
            rec = IcacheMissRecord(init_dic)
            record_list.append(rec)
            self.num_miss += 1
            self.accum_clk += end - start + 1
            if start <= prev_end:
                if end > prev_end:
                    self.pipe_clk += end - prev_end
            else:
                self.pipe_clk += end - start + 1
            prev_end = end
            i += 1
        return record_list

    def _update_req_list(self: any, line: str, req_list):
        clk = re.search(r"\[([0-9]{8})\]: " + self.cache_name + " refill request", line)
        req_id = re.search(r"id is (0x[0-9a-z]{8}), address", line)
        addr = re.search(r"address is (0x[0-9a-z]{8})", line)
        if clk and req_id and addr:
            init_dic = {Const.START_TIME: clk.group(1), Const.END_TIME: 0, Const.PC_ADDR: addr.group(1),
                        Const.REQ_ID: req_id.group(1), Const.RAW_STR: line}
            rec = IcacheMissRecord(init_dic)
            req_list.append(rec)

    def _update_ack_list(self, line, ack_list):
        clk = re.search(r"\[([0-9]{8})\]: " + self.cache_name + " refill acknowledge", line)
        req_id = re.search(r"id is (0x[0-9a-z]{8}), address", line)
        addr = re.search(r"address is (0x[0-9a-z]{8})", line)
        if clk and req_id and addr:
            init_dic = {Const.START_TIME: 0, Const.END_TIME: clk.group(1), Const.PC_ADDR: addr.group(1),
                        Const.REQ_ID: req_id.group(1), Const.RAW_STR: line}
            rec = IcacheMissRecord(init_dic)
            ack_list.append(rec)

    def _update_icache_list(self, req_list, ack_list):
        for line in self.unify_lines:
            if line.find("cache refill request") != -1:
                self._update_req_list(line, req_list)
            elif line.find("cache refill acknowledge") != -1:
                self._update_ack_list(line, ack_list)
