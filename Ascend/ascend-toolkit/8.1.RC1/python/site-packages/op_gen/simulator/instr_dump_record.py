#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
import re
from op_gen.simulator import utils
from op_gen.simulator.singleton import Singleton
from op_gen.simulator.instr_bean import InstrBean


# Parse instr.dump file
# [00000000](PC: 0x00000000)@CORE0 SCALAR :
# (Binary: 0x00000000) xxx(xx:0x000,  xx[0] : 0x000, xx[0] : 0x000, xx : 0x000)
# [00000000](PC: 0x00000000)@CORE0 MTE2 :
# (Binary: 0x00000000) xxx(xx:0, xx:0, xx:0x000, xx:0x000, xx:0x000,
# xx:0x000, xx:0, xx:0, xx:0, xx:0) instr ID is: 0
@Singleton
class InstrDumpRecord:
    """
    parse instr.dump
    """
    def __init__(self: any):
        self._tick_regex = re.compile(r"\[([0-9]{8})\]")
        self._pc_regex = re.compile(r"\(PC: (0x[0-9a-z]{8})\)")
        self._instr_pipe_regex = re.compile(r"@CORE([0-9]{1,2}) ([A-Za-z0-3 ]*)")
        self._binary_regex = re.compile(r": \(Binary: (0x[0-9a-z]{8})\)")
        self._info_regex = re.compile(r"\) ([0-9a-zA-Z_]*)([\(]{0,1}.*[\)]{0,1})")
        self._instr_id_regex = re.compile(r"instr ID is: ([0-9]*)")

    @classmethod
    def _get_instr_params(cls: any, instr_bean: InstrBean):
        if not instr_bean.instr_detail or "(" not in instr_bean.instr_detail or ")" not in instr_bean.instr_detail:
            return
        params_str = instr_bean.instr_detail[instr_bean.instr_detail.index("(") + 1:instr_bean.instr_detail.index(")")]
        params_list = params_str.split(",")
        params_dic = {}
        for params_item in params_list:
            if "=" in params_item:
                params_dic[params_item.split("=")[0].strip()] = params_item.split("=")[1].strip()
            if ":" in params_item:
                params_dic[params_item.split(":")[0].strip()] = params_item.split(":")[1].strip()
        instr_bean.params = params_dic

    def parse(self: any, raw_record: str) -> InstrBean:
        tick = self._tick_regex.search(raw_record)
        pc = self._pc_regex.search(raw_record)
        instr_pipe = self._instr_pipe_regex.search(raw_record)
        binary = self._binary_regex.search(raw_record)
        info = self._info_regex.search(raw_record)
        re_instr_id = self._instr_id_regex.search(raw_record)
        instr_bean = InstrBean()
        if tick and pc and instr_pipe:
            instr_bean.tick = int(tick.group(1))
            instr_bean.pc = pc.group(1)
            instr_bean.core_id = instr_pipe.group(1)
            instr_bean.instr_pipe = instr_pipe.group(2).rstrip()
            if binary and info:
                instr_bean.instr_binary = binary.group(1)
                instr_bean.instr_name = info.group(1)
                instr_bean.instr_detail = info.group(2)
            self._get_instr_params(instr_bean)
        else:
            utils.logger.error("Parse a instr dump record failed: %s", raw_record)
        if re_instr_id:
            instr_bean.instr_id = re_instr_id.group(1)
        return instr_bean
