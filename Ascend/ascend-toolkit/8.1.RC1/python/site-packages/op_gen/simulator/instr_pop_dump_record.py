#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Function:
parse instr pop dump
Copyright Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
import re
from op_gen.simulator import utils
from op_gen.simulator.singleton import Singleton
from op_gen.simulator.instr_bean import InstrBean


@Singleton
class InstrPopDumpRecord:
    """
    Parse instr_popped.dump file: instruction start
    This file is a little different formatted with instr.dump,
    secondary pipe instr popped twice.
    [00000000](PC: 0x00000000)@CORE0 SCALAR : (Binary: 0x00000000) \
    xxx(xx:0x000,  xx[0] : 0x000, xx[0] : 0x000, xx : 0x000)
    [00000000](PC: 0x00000000)@CORE0 MTE1 : (Binary: 0x00000000) \
    xxx(xx:0, xx:0, xx:0x000, xx:0x000, xx:0x000, \
    xx:0x000, xx:0, xx:0, xx:0, \
    xx:0) instr ID is: 0. pop success
    """
    unresolve_instr_list = []

    def __init__(self: any):
        self._re_pop_info0 = re.compile(r"poped from IQ")
        self._re_pop_info1 = re.compile(r"instr ID is: ([0-9]*)")
        self._re_tick = re.compile(r"\[([0-9]{8})\]")
        self._re_pc = re.compile(r"\(PC: (0x[0-9a-z]{8})\)")
        self._re_instr_pipe = re.compile(r"@CORE([0-9]{1,2}) ([A-Z0-3 ]*)")
        self._re_binary = re.compile(r": \(Binary: (0x[0-9a-z]{8})\)")
        self._re_info = re.compile(r"\) ([0-9a-zA-Z_]*)([\(]{0,1}.*[\)]{0,1})")

    def parse(self: any, raw_record: str) -> InstrBean:
        instr = InstrBean()
        if not self._parse_basic_parameters(raw_record, instr):
            return instr
        # inst now is issued from its own queue, complete issue
        is_pop_ex = False

        # lsu_mov_special_xn inst is in MTE but not issue twice.
        pop_info0 = self._re_pop_info0.search(raw_record)
        pop_info1 = self._re_pop_info1.search(raw_record)

        # This inst just issued from the main pipe, and is partial done
        instr.is_partial_issue = pop_info0 and instr.instr_name != "lsu_mov_special_xn"
        if pop_info1:
            is_pop_ex = True
            instr.instr_id = pop_info1.group(1)

        # inst that poped from EX, must have a previous partialIssue
        if is_pop_ex:
            if len(InstrPopDumpRecord.unresolve_instr_list) == 0:
                utils.logger.warn("a pop from Ex inst must have a previous partial issue inst" + raw_record)
            for prev_record in InstrPopDumpRecord.unresolve_instr_list:
                if instr.pc != prev_record.pc:
                    # try to find next
                    continue
                else:
                    instr.tick_pipe = str(instr.tick)
                    instr.tick = prev_record.tick
                    InstrPopDumpRecord.unresolve_instr_list.remove(prev_record)
                    break
        else:
            instr.tick_pipe = '        '
        return instr

    def _parse_basic_parameters(self: any, raw_record: str, instr: InstrBean) -> bool:
        tick = self._re_tick.search(raw_record)
        pc = self._re_pc.search(raw_record)
        instr_pipe = self._re_instr_pipe.search(raw_record)
        binary = self._re_binary.search(raw_record)
        info = self._re_info.search(raw_record)
        if tick and pc and instr_pipe:
            instr.tick = int(tick.group(1))
            instr.pc = pc.group(1)
            instr.core_id = instr_pipe.group(1)
            instr.instr_pipe = instr_pipe.group(2).rstrip()
            if binary and info:
                instr.instr_binary = binary.group(1)
                instr.instr_name = info.group(1)
                instr.instr_detail = info.group(2)
        else:
            utils.logger.error("Parse a instr dump record failed: %s", raw_record)
            return False
        return True
