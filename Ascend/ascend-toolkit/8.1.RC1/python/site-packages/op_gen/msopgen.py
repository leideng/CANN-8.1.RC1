#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves main function of op generation module.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""

import sys
from op_gen.interface.arg_parser import ArgParser
from op_gen.interface.op_file_generator import OpFileGenerator
from op_gen.interface.op_file_compile import OpFileCompile
from op_gen.interface.op_info_parser import OpInfoParser
from op_gen.interface import utils
from op_gen.interface.const_manager import ConstManager
from op_gen.simulator import Simulator, Dump2TraceException


def _do_gen_cmd(argument: ArgParser) -> None:
    op_file_generator = OpFileGenerator(argument)
    op_file_generator.generate()


def _do_mi_cmd(argument: ArgParser) -> None:
    if argument.mi_cmd == ConstManager.INPUT_ARGUMENT_CMD_MI_QUERY:
        OpInfoParser(argument)


def _do_compile_cmd(argument: ArgParser) -> None:
    op_project_compile = OpFileCompile(argument)
    op_project_compile.compile()


def _do_sim_cmd(argument: ArgParser) -> None:
    Simulator.run(argument)


def _msopgen_task():
    # 1.parse input argument and check arguments valid
    argument = ArgParser()
    # 2.generate file, according to gen and mi
    if argument.gen_flag:
        _do_gen_cmd(argument)
    elif argument.compile_flag:
        _do_compile_cmd(argument)
    elif argument.mi_flag:
        _do_mi_cmd(argument)
    else:
        _do_sim_cmd(argument)


def main():
    """
    main function
    """
    # 1.parse input argument and check arguments valid
    try:
        _msopgen_task()
    except (utils.MsOpGenException, Dump2TraceException) as ex:
        sys.exit(ex.error_info)
    finally:
        pass
    utils.print_info_log("Generation completed.")
    sys.exit(ConstManager.MS_OP_GEN_NONE_ERROR)


if __name__ == "__main__":
    main()
