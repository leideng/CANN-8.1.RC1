#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves class for parsing input arguments.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""
import os
import re
import sys
import argparse
from op_gen.interface import utils
from op_gen.interface.const_manager import ConstManager
from op_gen.simulator import Simulator


class ArgParser:
    """
    CLass for parsing input arguments
    """

    def __init__(self: any) -> None:
        parse = argparse.ArgumentParser()
        subparsers = parse.add_subparsers(help='commands')
        mi_parser = subparsers.add_parser(
            ConstManager.INPUT_ARGUMENT_CMD_MI, help='Machine interface for IDE.',
            allow_abbrev=False)
        gen_parser = subparsers.add_parser(
            ConstManager.INPUT_ARGUMENT_CMD_GEN, help='Generator operator project.',
            allow_abbrev=False)
        compile_parser = subparsers.add_parser(
            ConstManager.INPUT_ARGUMENT_CMD_COMPILE, help='Compile operator project.',
            allow_abbrev=False)
        sim_parser = subparsers.add_parser(
            ConstManager.INPUT_ARGUMENT_CMD_SIM, help='Simulator-related operations.',
            allow_abbrev=False
        )
        self._gen_parse_add_arguments(gen_parser)
        self._mi_parse_add_arguments(mi_parser)
        self._compile_parse_add_arguments(compile_parser)
        Simulator.add_arguments(sim_parser)
        if len(sys.argv) <= 1:
            parse.print_usage()
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PARAM_ERROR)
        args = parse.parse_args(sys.argv[1:])
        if sys.argv[1] == ConstManager.INPUT_ARGUMENT_CMD_GEN:
            self.gen_flag = True
            self.compile_flag = True
            self.mi_flag = True
            self.input_path = ""
            self.framework = ""
            self.compute_unit = ""
            self.output_path = ""
            self.mode = 0
            self.core_type = -1
            self.op_type = ""
            self.op_lan = ""
            self._check_input_path(args.input)
            self._check_framework(args.framework)
            self._check_compute_unit_valid(args.compute_unit)
            self._check_output_path(args.output)
            self._check_mode_valid(args.mode)
            self._check_op_type_valid(args.operator)
            self._check_lan_valid(args.language)
            return
        if sys.argv[1] == ConstManager.INPUT_ARGUMENT_CMD_MI:
            self.gen_flag = False
            self.compile_flag = False
            self.mi_flag = True
            if len(sys.argv) <= 2:
                mi_parser.print_usage()
                raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PARAM_ERROR)
            self.mi_cmd = sys.argv[2]
            self._check_mi_cmd_param(args)
        if sys.argv[1] == ConstManager.INPUT_ARGUMENT_CMD_COMPILE:
            self.gen_flag = False
            self.compile_flag = True
            self.mi_flag = False
            if len(sys.argv) <= 2:
                compile_parser.print_usage()
                raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PARAM_ERROR)
            self._check_compile_cmd_param(args)
        if sys.argv[1] == ConstManager.INPUT_ARGUMENT_CMD_SIM:
            self.gen_flag = False
            self.compile_flag = False
            self.mi_flag = False
            if len(sys.argv) <= 6:
                sim_parser.print_usage()
                raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PARAM_ERROR)
            Simulator.check_simulator_args(args)
            for name, arg in vars(args).items():
                setattr(self, name, arg)

    @staticmethod
    def get_gen_result() -> str:
        """
        get gen result
        """
        return ""

    @staticmethod
    def _compile_parse_add_arguments(compile_parser: any) -> None:
        compile_parser.add_argument(
            "-i", "--input", dest="input_project", default="",
            help="<Required> the input project path", required=True)
        compile_parser.add_argument(
            "-c", "--cann", dest="cann_path", default="/usr/local/Ascend/latest",
            help="<Optional> the CANN install path", required=False)
        compile_parser.add_argument(
            '-q', "--quiet", dest="quiet", action="store_true", default=False,
            help="<Optional> quiet mode, skip human-computer interactions",
            required=False)

    @staticmethod
    def _mi_parse_add_arguments(mi_parser: any) -> None:
        mi_subparsers = mi_parser.add_subparsers(help='commands')
        query_parser = mi_subparsers.add_parser(
            ConstManager.INPUT_ARGUMENT_CMD_MI_QUERY, help='Query the operators from '
                                                           'the \"Op\" sheet in IR '
                                                           'excel.')
        # query Op parser and add arguments
        query_parser.add_argument("-i", "--input",
                                  dest="input",
                                  default="",
                                  help="<Required> the input file, %s file, "
                                       "which needs to be existed and "
                                       "readable." % (ConstManager.MI_VALID_TYPE,),
                                  required=True)
        query_parser.add_argument("-out", "--output",
                                  dest="output",
                                  default=os.getcwd(),
                                  help="<Optional> output path",
                                  required=False)

    @staticmethod
    def _gen_parse_add_arguments(gen_parser: any) -> None:
        gen_parser.add_argument("-i", "--input",
                                dest="input",
                                default="",
                                help="<Required> the input file, %s file, "
                                     "which needs to be existed and readable." % (ConstManager.GEN_VALID_TYPE,),
                                required=True)
        gen_parser.add_argument("-f", "--framework",
                                dest="framework",
                                default="TF",
                                help="<Optional> op framework type(case "
                                     "insensitive) tf, tensorflow, caffe, "
                                     "ms, mindspore, onnx, aclnn, pytorch.",
                                required=False)
        gen_parser.add_argument("-c", "--compute_unit",
                                dest="compute_unit",
                                default="",
                                help="<Required> compute unit, of which the "
                                     "format should be like "
                                     "ai_core-ascend310 or aicpu or vector_core-ascend610.",
                                required=True)
        gen_parser.add_argument("-out", "--output",
                                dest="output",
                                default="./",
                                help="<Optional> output path.",
                                required=False)
        gen_parser.add_argument("-m", "--mode",
                                dest="mode",
                                default='0',
                                help="<Optional> 0:default, generator "
                                     "project;1: add a new operator.",
                                required=False)
        gen_parser.add_argument("-op", "--operator",
                                dest="operator",
                                default="",
                                help="<Optional> op type in IR excel.",
                                required=False)
        gen_parser.add_argument("-lan", "--language",
                                dest="language",
                                default="PY",
                                help="<Optional> py: default, dsl and tik coding "
                                     "language; cpp: for op coding with tikcpp.",
                                required=False)

    @staticmethod
    def _print_compute_unit_invalid_log() -> None:
        utils.print_error_log("Invalid compute unit format. "
                              "Please check whether the format of the input "
                              "compute unit is ${core_type}-${"
                              "unit_type}, like ai_core-ascend310 or aicpu.")
        raise utils.MsOpGenException(
            ConstManager.MS_OP_GEN_CONFIG_INVALID_COMPUTE_UNIT_ERROR)

    @staticmethod
    def _is_mdc(unit_parse_list: list) -> bool:
        return (len(unit_parse_list[1]) >= len("bs9sx1a")
                and unit_parse_list[1][:7].lower() in ConstManager.MDC_SOC_VERSION) \
               or (len(unit_parse_list[1]) >= len("ascendxxx")
                   and unit_parse_list[1][:9].lower() in ConstManager.MDC_SOC_VERSION)

    @staticmethod
    def _check_soc_version_valid(soc_version: str) -> None:
        res = re.search("^[aA]scend[A-Za-z0-9-_]{3,20}$|^[bB][sS]9[sS][xX]1[aA]+$|^[hH][iI][A-Za-z0-9]{3,20}",
                        soc_version.lower())
        if not res:
            utils.print_error_log("Invalid unit type format. "
                                  "Please check whether the format of the input "
                                  "compute unit is ${core_type}-${"
                                  "unit_type}, and unit type like ascend310 or ascend910A.")
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_CONFIG_INVALID_COMPUTE_UNIT_ERROR)

    @staticmethod
    def _check_compile_path(path, isdir=False):
        if isdir and not os.path.exists(path):
            utils.print_error_log('The path {} does not exist. Please check whether '
                                  'the path exists.'.format(path))
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        utils.check_path_valid(path, True, access_type=os.W_OK)

    def get_gen_flag(self: any) -> bool:
        """
        get gen flag
        """
        return self.gen_flag

    def _check_compile_cmd_param(self: any, args: any) -> None:
        self._check_compile_path(args.input_project, isdir=True)
        self.input_path = os.path.realpath(args.input_project)
        self._check_compile_path(args.cann_path, isdir=True)
        self.cann_path = args.cann_path

    def _check_mi_cmd_param(self: any, args: any) -> None:
        if self.mi_cmd == ConstManager.INPUT_ARGUMENT_CMD_MI_QUERY:
            if not args.input.endswith(ConstManager.MI_VALID_TYPE):
                utils.print_error_log(
                    'The file "%s" is invalid. Only the %s file is supported. Please '
                    'modify it.' % (args.input, ConstManager.MI_VALID_TYPE))
                raise utils.MsOpGenException(
                    ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
            utils.check_path_valid(args.input)
            self.input_path = args.input
            self._check_output_path(args.output)

    def _check_op_type_valid(self: any, args_operator: str) -> None:
        if args_operator != '':
            utils.check_name_valid(args_operator)
            self.op_type = args_operator

    def _check_framework(self: any, args_framework: str) -> None:
        lower_args_framework = args_framework.lower()
        if lower_args_framework in ConstManager.FMK_LIST:
            self.framework = lower_args_framework
        else:
            utils.print_error_log(
                "Unsupported framework type: " + args_framework)
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_CONFIG_UNSUPPORTED_FMK_TYPE_ERROR)

    def _check_output_path(self: any, args_output_path: str) -> None:
        utils.check_path_is_valid(args_output_path)
        args_output_path = os.path.realpath(args_output_path)
        if not os.path.exists(args_output_path):
            utils.make_dirs(args_output_path)
        if os.path.exists(args_output_path) and os.access(args_output_path,
                                                          os.W_OK):
            self.output_path = args_output_path
        else:
            utils.print_error_log(args_output_path +
                                  " does not exist or does not allow data "
                                  "write.")
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_CONFIG_INVALID_OUTPUT_PATH_ERROR)
        if not utils.check_path_owner_consistent(args_output_path):
            utils.print_error_log('You are not the owner of path {}.'.format(args_output_path))
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_CONFIG_INVALID_OUTPUT_PATH_ERROR)

    def _check_input_path(self: any, args_input: str) -> None:
        if not args_input.endswith(ConstManager.GEN_VALID_TYPE):
            utils.print_error_log(
                'The file "%s" is invalid. Only the %s file is supported. Please '
                'modify it.' % (args_input, ConstManager.GEN_VALID_TYPE))
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        utils.check_path_is_valid(args_input)
        utils.check_input_permission_valid(args_input)
        dir_path = os.path.dirname(os.path.realpath(args_input))
        utils.check_input_permission_valid(dir_path)
        args_op_info = os.path.realpath(args_input)
        if os.path.isfile(args_op_info) and os.access(args_op_info, os.R_OK) and \
                os.path.getsize(args_op_info) < ConstManager.TEN_MB:
            self.input_path = args_op_info
        else:
            utils.print_error_log("Input path: " + args_input +
                                  " error. Please check whether it is an existing "
                                  "and readable file. Or check it is larger than 10 MB.")
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_CONFIG_INVALID_OPINFO_FILE_ERROR)
        if not utils.check_path_owner_consistent(self.input_path):
            utils.print_error_log('You are not the owner of path {}.'.format(self.input_path))
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)

    def _init_core_type(self: any, unit_parse_list: list, type_list: list, core_type: any) -> None:
        if unit_parse_list[0].lower() in type_list:
            if self.core_type == -1:
                self.core_type = core_type
            else:
                if self.core_type != core_type:
                    utils.print_error_log("Invalid compute unit "
                                          "format. Only one core type is "
                                          "supported.")
                    raise utils.MsOpGenException(
                        ConstManager.MS_OP_GEN_CONFIG_INVALID_COMPUTE_UNIT_ERROR)
        else:
            self._print_compute_unit_invalid_log()

    def _check_compute_unit_valid(self: any, args_compute_unit: str) -> int:
        compute_unit_list = args_compute_unit.split(",")
        compute_unit_valid = []
        if len(compute_unit_list) > 100:
            utils.print_error_log("Input too many args in --compute_unit")
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_CONFIG_INVALID_COMPUTE_UNIT_ERROR)
        for unit in compute_unit_list:
            compute_unit_valid.append(unit.lower())
            unit_parse_list = unit.split("-", 1)
            if len(unit_parse_list) == 1:
                self._init_core_type(unit_parse_list,
                                     ConstManager.AICPU_CORE_TYPE_LIST,
                                     ConstManager.AICPU)
            elif len(unit_parse_list) == 2:
                self._check_soc_version_valid(unit_parse_list[1])
                if self._is_mdc(unit_parse_list):
                    if unit_parse_list[0].lower() in ConstManager.VECTOR_CORE_TYPE_LIST:
                        self._init_core_type(unit_parse_list,
                                             ConstManager.VECTOR_CORE_TYPE_LIST,
                                             ConstManager.VECTORCORE)
                    else:
                        self._init_core_type(unit_parse_list,
                                             ConstManager.AICORE_CORE_TYPE_LIST,
                                             ConstManager.AICORE)
                else:
                    self._init_core_type(unit_parse_list,
                                         ConstManager.AICORE_CORE_TYPE_LIST + ConstManager.VECTOR_CORE_TYPE_LIST,
                                         ConstManager.AICORE)
            else:
                self._print_compute_unit_invalid_log()
        self.compute_unit = compute_unit_valid
        return ConstManager.MS_OP_GEN_NONE_ERROR

    def _check_mode_valid(self: any, mode: any) -> int:
        if str(mode) not in ConstManager.GEN_MODE_LIST:
            utils.print_error_log('Unsupported mode: %s. Only %s is supported. '
                                  'Please check the input mode.' %
                                  (str(mode), ','.join(ConstManager.GEN_MODE_LIST)))
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_CONFIG_UNSUPPORTED_MODE_ERROR)
        self.mode = mode
        return ConstManager.MS_OP_GEN_NONE_ERROR

    def _check_lan_valid(self: any, lan: str) -> int:
        lan_set = lan.lower()
        if lan_set in ConstManager.OP_LAN_LIST:
            self.op_lan = lan_set
        else:
            utils.print_error_log(f'Unsupported language: {lan}. Only {ConstManager.OP_LAN_LIST} is supported. '
                                  'Please check the input op language.')
            raise utils.MsOpGenException(1005)
        return ConstManager.MS_OP_GEN_NONE_ERROR
