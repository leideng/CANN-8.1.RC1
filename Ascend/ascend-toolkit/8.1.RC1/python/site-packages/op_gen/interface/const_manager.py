#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves the common function.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""


import os
import stat
import platform


class ConstManager:
    """
    The class for const manager
    """
    # error code for user:success
    MS_OP_GEN_NONE_ERROR = 0
    # error code for user: config error
    MS_OP_GEN_CONFIG_UNSUPPORTED_FMK_TYPE_ERROR = 11
    MS_OP_GEN_CONFIG_INVALID_OUTPUT_PATH_ERROR = 12
    MS_OP_GEN_CONFIG_INVALID_OPINFO_FILE_ERROR = 13
    MS_OP_GEN_CONFIG_INVALID_COMPUTE_UNIT_ERROR = 14
    MS_OP_GEN_CONFIG_UNSUPPORTED_MODE_ERROR = 15
    MS_OP_GEN_CONFIG_OP_DEFINE_ERROR = 16
    MS_OP_GEN_INVALID_PARAM_ERROR = 17
    MS_OP_GEN_INVALID_SHEET_PARSE_ERROR = 18
    # error code for user: generator error
    MS_OP_GEN_INVALID_PATH_ERROR = 101
    MS_OP_GEN_PARSE_DUMP_FILE_ERROR = 102
    MS_OP_GEN_OPEN_FILE_ERROR = 103
    MS_OP_GEN_CLOSE_FILE_ERROR = 104
    MS_OP_GEN_OPEN_DIR_ERROR = 105
    MS_OP_GEN_INDEX_OUT_OF_BOUNDS_ERROR = 106
    MS_OP_GEN_PARSER_JSON_FILE_ERROR = 107
    MS_OP_GEN_WRITE_FILE_ERROR = 108
    MS_OP_GEN_READ_FILE_ERROR = 109
    MS_OP_GEN_UNKNOWN_CORE_TYPE_ERROR = 110
    MS_OP_GEN_PARSER_EXCEL_FILE_ERROR = 111
    MS_OP_GEN_JSON_DATA_ERROR = 112
    MS_OP_GEN_INVALID_FILE_ERROR = 113
    MS_OP_GEN_INCONSISTENT_NUMBER = 114
    # error code for user: un know error
    MS_OP_GEN_UNKNOWN_ERROR = 1001
    # call os/sys error:
    MS_OP_GEN_MAKE_DIRS_ERROR = 1002
    MS_OP_GEN_COPY_DIRS_ERROR = 1003
    MS_OP_GEN_IMPORT_MODULE_ERROR = 1004
    MS_OP_GEN_SIMULATOR_ERROR = 300

    LEFT_BRACES = "{"
    RIGHT_BRACES = "}"
    SUPPORT_PATH_PATTERN = r"^[A-Za-z0-9_\./:()=\\-]+$"
    FMK_MS = ["ms", "mindspore"]
    FMK_LIST = ["tf", "tensorflow", "caffe", "pytorch", "ms", "mindspore", "onnx", "aclnn"]
    PROJ_MS_NAME = "mindspore"
    FMK_ACLNN = "aclnn"
    GEN_MODE_LIST = ['0', '1']
    MS_PROTO_PATH = "op_proto"
    
    OP_ASCENDC_CMAKE_PATH_LINUX = "./cmake/util/makeself"
    OP_TEMPLATE_PATH_LINUX = "./tools/op_project_templates/op_project_tmpl"
    OP_TEMPLATE_TBE_PATH_LINUX = "./tools/op_project_templates/tbe"
    OP_TEMPLATE_AICPU_PATH_LINUX = "./tools/op_project_templates/cpukernel"
    OP_TEMPLATE_ASCENDC_PATH_LINUX = "./tools/op_project_templates/ascendc/customize"
    OP_TEMPLATE_ASCENDC_ACLNN_PATH_LINUX = "./tools/op_project_templates/ascendc/aclnn"
    OP_ASCENDC_CMAKE_MAKESELF_PATH_LINUX = "../customize/cmake/util/makeself"

    OP_ASCENDC_CMAKE_PATH_WINDOWS = r".\cmake\util\makeself"
    OP_TEMPLATE_PATH_WINDOWS = r".\tools\op_project_templates\op_project_tmpl"
    OP_TEMPLATE_TBE_PATH_WINDOWS = r".\tools\op_project_templates\tbe"
    OP_TEMPLATE_AICPU_PATH_WINDOWS = r".\tools\op_project_templates\cpukernel"
    OP_TEMPLATE_ASCENDC_PATH_WINDOWS = r".\tools\op_project_templates\ascendc\customize"
    OP_TEMPLATE_ASCENDC_ACLNN_PATH_WINDOWS = r".\tools\op_project_templates\ascendc\aclnn"
    OP_ASCENDC_CMAKE_MAKESELF_PATH_WINDOWS = r".\..\customize\cmake\util\makeself"

    OP_ASCENDC_CMAKE_PATH = (OP_ASCENDC_CMAKE_PATH_WINDOWS if platform.system() == 'Windows' 
                             else OP_ASCENDC_CMAKE_PATH_LINUX)
    OP_TEMPLATE_PATH = (OP_TEMPLATE_PATH_WINDOWS if platform.system() == 'Windows' 
                        else OP_TEMPLATE_PATH_LINUX)
    OP_TEMPLATE_TBE_PATH = (OP_TEMPLATE_TBE_PATH_WINDOWS if platform.system() == 'Windows' 
                            else OP_TEMPLATE_TBE_PATH_LINUX)
    OP_TEMPLATE_AICPU_PATH = (OP_TEMPLATE_AICPU_PATH_WINDOWS if platform.system() == 'Windows' 
                              else OP_TEMPLATE_AICPU_PATH_LINUX)
    OP_TEMPLATE_ASCENDC_PATH = (OP_TEMPLATE_ASCENDC_PATH_WINDOWS if platform.system() == 'Windows' 
                                else OP_TEMPLATE_ASCENDC_PATH_LINUX)
    OP_TEMPLATE_ASCENDC_ACLNN_PATH = (OP_TEMPLATE_ASCENDC_ACLNN_PATH_WINDOWS if platform.system() == 'Windows' 
                                      else OP_TEMPLATE_ASCENDC_ACLNN_PATH_LINUX)
    OP_ASCENDC_CMAKE_MAKESELF_PATH = (OP_ASCENDC_CMAKE_MAKESELF_PATH_WINDOWS if platform.system() == 'Windows'
                                       else OP_ASCENDC_CMAKE_MAKESELF_PATH_LINUX)


    SPACE = ' '
    EMPTY = ''
    FILE_AUTHORITY = stat.S_IWUSR | stat.S_IRUSR | stat.S_IXUSR
    DIR_MODE = 0o750
    EXECUTABLE_MODE = 0o750
    CONFIG_MODE = 0o640
    OTHERS_MODE = 0o640
    WRITE_FLAGS = os.O_WRONLY | os.O_CREAT
    RDWR_FLAGS = os.O_RDWR | os.O_CREAT
    EXECUTABLE_SUFFIX = ["sh", "bash", "py", "cmake", "0", "1"]
    CONFIG_SUFFIX = ["", "txt", "json", "md", "info", "temp", "lsm", "ini", "cpp", "cc", "cce", "h", "proto"]
    WITH_WRITE_MODE = ["2", "3", "6", "7"]

    TEN_MB = 10 * 1024 * 1024
    LINUX_PATH_LENGTH_LIMIT = 4000
    LINUX_FILE_NAME_LENGTH_LIMIT = 200
    WINDOWS_FILE_PATH_LENGTH_LIMIT = 200

    # path
    IMPL_DIR = "tbe/impl/"
    MS_IMPL_DIR = "mindspore/impl"
    IMPL_NAME = "_impl"
    IMPL_SUFFIX = ".py"
    FRAMEWORK = 'framework'
    CPP_KERNEL_DIR = "op_kernel"
    CPP_HOST_DIR = "op_host"
    CMAKE_CONFIG_DIR = "cmake"
    CMAKE_PRESET_FILE = "CMakePresets.json"
    KERNEL_CMAKELISTS_FILE = "./op_kernel/CMakeLists.txt"

    # input arguments
    INPUT_ARGUMENT_CMD_GEN = 'gen'
    INPUT_ARGUMENT_CMD_MI = 'mi'
    INPUT_ARGUMENT_CMD_MI_QUERY = 'query'
    INPUT_ARGUMENT_CMD_COMPILE = 'compile'
    INPUT_ARGUMENT_CMD_SIM = 'sim'

    OP_INFO_WITH_PARAM_TYPE_LEN = 3
    OP_INFO_WITH_FORMAT_LEN = 4
    AICPU_CORE_TYPE_LIST = ['aicpu', 'ai_cpu']
    AICORE_CORE_TYPE_LIST = ['aicore', 'ai_core']
    VECTOR_CORE_TYPE_LIST = ['vectorcore', 'vector_core']
    MDC_SOC_VERSION = ['ascend610', 'bs9sx1a']
    PARAM_TYPE_DYNAMIC = "dynamic"
    PARAM_TYPE_REQUIRED = "required"
    PARAM_TYPE_OPTIONAL = "optional"
    PARAM_TYPE_MAP_INI = {"1": PARAM_TYPE_REQUIRED, "0": PARAM_TYPE_OPTIONAL}
    INPUT_OUTPUT_PARAM_TYPE = [PARAM_TYPE_DYNAMIC, PARAM_TYPE_REQUIRED,
                               PARAM_TYPE_OPTIONAL]
    ATTR_PARAM_TYPE = [PARAM_TYPE_REQUIRED, PARAM_TYPE_OPTIONAL]

    # input file type
    INPUT_FILE_XLSX = ".xlsx"
    INPUT_FILE_XLS = ".xls"
    INPUT_FILE_TXT = ".txt"
    INPUT_FILE_JSON = ".json"
    INPUT_FILE_EXCEL = (INPUT_FILE_XLSX, INPUT_FILE_XLS)
    MI_VALID_TYPE = (INPUT_FILE_XLSX, INPUT_FILE_XLS, INPUT_FILE_JSON)
    GEN_VALID_TYPE = (INPUT_FILE_XLSX, INPUT_FILE_XLS, INPUT_FILE_TXT,
                      INPUT_FILE_JSON)

    # keys in map
    INFO_IR_TYPES_KEY = "ir_type_list"
    INFO_PARAM_TYPE_KEY = "param_type"
    INFO_PARAM_FORMAT_KEY = "format_list"
    NEXT_LINE = '\n    '
    # GenModeType
    GEN_PROJECT = '0'
    GEN_OPERATOR = '1'

    # CoreType
    AICORE = 0
    AICPU = 1
    VECTORCORE = 2

    # coding language
    OP_LAN_PY = 'py'
    OP_LAN_CPP = 'cpp'
    OP_LAN_LIST = [OP_LAN_PY, OP_LAN_CPP]

    # cann toolkit path
    ASCEND_HOME_PATH = 'ASCEND_HOME_PATH'
    CANN_USR_LOCAL_PATH = '/usr/local/Ascend/ascend-toolkit/latest'
    cann_path = os.getenv("ASCEND_HOME_PATH")
    BASE_LIBS_PATH = os.getenv("BASE_LIBS_PATH")
    cann_ci_path = BASE_LIBS_PATH if BASE_LIBS_PATH else CANN_USR_LOCAL_PATH
    CANN_HOME_PATH = cann_path if cann_path else cann_ci_path

    # compile operator
    DEFAULT_CANN_PATH = "/usr/local/Ascend"
    VALID_DELIVERYS = ['tbe', 'op_proto', 'framework', 'op_tiling', 'cpukernel']
    KEY_DELIVERY_TBE = ['tbe', 'op_proto']
    KEY_DELIVERY_AICPU = ['cpukernel', 'op_proto']
    UNNECESSARY_DELIVERY = ('framework', 'op_tiling')
    KEY_DELIVERY_FRAMEWORK = ('tf_plugin', 'onnx_plugin', 'caffe_plugin')
    COMPILE_DEPEND_FILES = ['CMakeLists.txt', 'build.sh', 'cmake', 'scripts']
    ALL_DELIVERYS = ['CMakeLists.txt', 'build.sh', 'cmake', 'scripts', 'tbe',
                     'op_proto', 'framework', 'op_tiling', 'cpukernel']
    CMAKELIST_TXT = 'CMakeLists.txt'
    TOOLCHAIN_CMAKE = 'toolchain.cmake'
    DELIVERABLE_SHOW = """
       +--input_dir
       |      +--cpukernel (AICPU operator Required)
       |             +--impl
       |                    +--xxx.cc
       |                    +--xxx.h
       |             +--op_info_cfg
       |                    +--aicpu_kernel
       |                           +--xxx.ini
       |      +--op_proto (Mandatory)
       |             +--xxx.cc
       |             +--xxx.h
       |      +--tbe (TBE operator Required)
       |             +--impl
       |                    +--xxx.py
       |             +--op_info_cfg
       |                    +--ai_core
       |                           +--{soc_version}
       |                                  +--xxx.ini
       |      +--framework (Optional, ignore the PyTorch framework.)
       |             +--tf_plugin
       |             +--onnx_plugin
       |             +--caffe_plugin
       |      +--op_tiling (Optional)
       |             +--xxx.cc
       |-------------+--xxx.h
       """
    MODIFY_BUILD = """#!/bin/bash
if [ -z "$BASE_LIBS_PATH" ]; then 
  if [ -z "$ASCEND_HOME_PATH" ]; then 
    if [ -z "$ASCEND_AICPU_PATH" ]; then 
      echo "please set env."
      exit 1
    else
      export ASCEND_HOME_PATH=$ASCEND_AICPU_PATH
    fi
  else 
    export ASCEND_HOME_PATH=$ASCEND_HOME_PATH
  fi
else
  export ASCEND_HOME_PATH=$BASE_LIBS_PATH
fi
echo "using ASCEND_HOME_PATH: $ASCEND_HOME_PATH"
"""

    def get_aicore(self: any) -> int:
        """
        get ai_core flag
        :return: ai_core flag
        """
        return self.AICORE

    def get_aicpu(self: any) -> int:
        """
        get aicpu flag
        :return: aicpu flag
        """
        return self.AICPU
