#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves class for compiling operator project.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2022-2023
"""
import os
import os.path
import subprocess
import collections
import shutil
from shutil import copytree
from shutil import copy2
from shutil import Error

from op_gen.interface.const_manager import ConstManager
from op_gen.interface.arg_parser import ArgParser
from op_gen.interface.op_tmpl import OPTmpl
from op_gen.interface import utils


class OpFileCompile:
    """
    Compile operator project
    """
    def __init__(self: any, argument: ArgParser) -> None:
        self.input_path = argument.input_path
        self.cann_path = argument.cann_path
        self.need_copy_template = True

    @staticmethod
    def _get_listdir_name(path):
        return os.listdir(path)

    @staticmethod
    def _replace_build_content(op_file: str, old_str: str, new_str: str) -> any:
        utils.check_path_valid(op_file, isdir=False, access_type=os.W_OK)
        file_data = ""
        with open(op_file, 'r+', encoding="utf-8") as fout:
            all_the_lines = fout.readlines()
            fout.seek(0)
            fout.truncate()
            for line in all_the_lines:
                if old_str in line:
                    line = line.replace(old_str, new_str).replace('# export', 'export')
                file_data += line
        with os.fdopen(os.open(op_file, ConstManager.WRITE_FLAGS, ConstManager.EXECUTABLE_MODE), 'w') as new_fout:
            new_fout.write(file_data)

    @staticmethod
    def _copy_cmake_file(src_path, dst_path, obj_file):
        src_file = os.path.join(src_path, obj_file)
        dst_file = os.path.join(dst_path, obj_file)
        shutil.copyfile(src_file, dst_file)
        utils.modify_permission(dst_file)

    @staticmethod
    def _execute_command(cmd):
        utils.print_info_log('Execute command line: %s' % cmd)
        process = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        while process.poll() is None:
            line = process.stdout.readline()
            line = line.strip()
            if line:
                print(line)
        if process.returncode != 0:
            utils.print_error_log('Failed to execute command: %s' % cmd)
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)

    def compile(self):
        """
        compile operator project
        """
        self.check_project_invalid()
        build_path = os.path.join(self.input_path, 'build.sh')
        os.chdir(self.input_path)
        execute_cmd = [build_path]
        if not self.need_copy_template:
            if not utils.check_execute_file(build_path):
                utils.print_error_log('Not allowed to execute %s' % build_path)
                raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_FILE_ERROR)
            self._execute_command(execute_cmd)
            return
        self.copy_template_files(self.input_path)
        # replace export content in build.sh
        self._replace_build_content(build_path, utils.ConstManager.DEFAULT_CANN_PATH, self.cann_path)
        # execute command line
        if not utils.check_execute_file(build_path):
            utils.print_error_log('Not allowed to execute %s' % build_path)
            raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_FILE_ERROR)
        self._execute_command(execute_cmd)

    def check_project_invalid(self):
        """
        Check whether the project contains key delivery.
        """
        valid_op_delivery = []
        project_files = self._get_listdir_name(self.input_path)
        for file_name in project_files:
            if file_name in ConstManager.VALID_DELIVERYS:
                file_path = os.path.join(self.input_path, file_name)
                utils.check_path_valid(file_path, True, access_type=os.W_OK)
                valid_op_delivery.append(file_name)
        if set(ConstManager.KEY_DELIVERY_TBE).issubset(set(valid_op_delivery)) or \
                set(ConstManager.KEY_DELIVERY_AICPU).issubset(set(valid_op_delivery)):
            self.check_compile_file_exist()
            return
        utils.print_error_log(
            "The project does not contain operator deliverables, such as %s. "
            "Please refer to the following directory structure:\n %s"
            % ((', '.join(ConstManager.VALID_DELIVERYS)), ConstManager.DELIVERABLE_SHOW))
        raise utils.MsOpGenException(ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)

    def check_compile_file_exist(self):
        """
        check_compile_files_exist
        :param dst: dst dir
        """
        names = self._get_listdir_name(self.input_path)
        valid_dir = []
        for name in names:
            if name in ConstManager.ALL_DELIVERYS:
                valid_dir.append(name)
        tbe_delivery = ConstManager.COMPILE_DEPEND_FILES + ConstManager.KEY_DELIVERY_TBE
        aicpu_delivery = ConstManager.COMPILE_DEPEND_FILES + ConstManager.KEY_DELIVERY_AICPU
        if set(tbe_delivery).issubset(set(valid_dir)) or set(aicpu_delivery).issubset(set(valid_dir)):
            self.need_copy_template = False

    def copy_template_files(self, dst_path):
        """
        copy template project files
        :param dst_path: dst_path dir
        """
        template_proj_path = os.path.join(
            ConstManager.CANN_HOME_PATH,
            ConstManager.OP_TEMPLATE_PATH)
        if not os.path.exists(template_proj_path):
            utils.print_error_log(
                "Get template file path failed. Please check if your cann-toolkit is installed and envs."
            )
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        # copy template file from src dir to dst dir
        self._copy_template_compile_file(template_proj_path, dst_path)
        # copy CMakeList.txt to dst operator deliverable directory
        self._copy_deliverable_cmake_file(dst_path)

    def _copy_deliverable_cmake_file(self, dst_path):
        template_tbe_path = os.path.join(
            ConstManager.CANN_HOME_PATH,
            ConstManager.OP_TEMPLATE_TBE_PATH)
        if not os.path.exists(template_tbe_path):
            utils.print_error_log(
                "Get template TBE file path failed. Please check if your cann-toolkit is installed and envs."
            )
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        template_aicpu_path = os.path.join(
            ConstManager.CANN_HOME_PATH,
            ConstManager.OP_TEMPLATE_AICPU_PATH)
        if not os.path.exists(template_aicpu_path):
            utils.print_error_log(
                "Get template AICPU file path failed. Please check if your cann-toolkit is installed and envs."
            )
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        dst_tbe_path = os.path.join(dst_path, 'tbe')
        dst_aicpu_path = os.path.join(dst_path, 'cpukernel')
        if os.path.isdir(dst_tbe_path):
            self._copy_cmake_file(template_tbe_path, dst_tbe_path, ConstManager.CMAKELIST_TXT)
        if os.path.isdir(dst_aicpu_path):
            self._copy_cmake_file(template_aicpu_path, dst_aicpu_path, ConstManager.CMAKELIST_TXT)
            self._copy_cmake_file(template_aicpu_path, dst_aicpu_path, ConstManager.TOOLCHAIN_CMAKE)
        self._copy_framework_cmake(dst_path)

    def _copy_framework_cmake(self, dst_path):
        """
        copy framework cmake file to plugin directory
        :param dst_path: dst_path dir
        """
        dst_framework_path = os.path.join(dst_path, 'framework')
        plugin_cmake_dict = {
            'tf_plugin': OPTmpl.PLUGIN_CMAKLIST,
            'onnx_plugin': OPTmpl.ONNX_PLUGIN_CMAKLIST,
            'caffe_plugin': OPTmpl.CAFFE_PLUGIN_CMAKLIST,
        }
        if not os.path.isdir(dst_framework_path):
            return
        names = self._get_listdir_name(dst_framework_path)
        for plugin_name in names:
            if plugin_name in ConstManager.KEY_DELIVERY_FRAMEWORK:
                plugin_dir = os.path.join(dst_framework_path, plugin_name)
                cmake_list_path = os.path.join(plugin_dir, ConstManager.CMAKELIST_TXT)
                if os.path.exists(cmake_list_path):
                    return
                if plugin_name in plugin_cmake_dict.keys():
                    utils.write_files(cmake_list_path, plugin_cmake_dict.get(plugin_name))
                    break
        return

    def _copy_template_compile_file(self, src, dst):
        """
        copy template from src dir to dst dir
        :param src: template src dir
        :param dst: dst dir
        """
        names = os.listdir(src)
        errors = []
        for name in names:
            srcname = os.path.join(src, name)
            dstname = os.path.join(dst, name)
            dir_info = collections.namedtuple("DirInfo", ["name", "src", "dst", "srcname", "dstname"])
            try:
                self._copy_src_to_dst(dir_info(name, src, dst, srcname, dstname))
            except (IOError, OSError) as why:
                errors.append((srcname, dstname, str(why)))
            finally:
                pass
        if errors:
            raise Error(errors)

    def _copy_src_to_dst(self, dir_info):
        if os.path.isdir(dir_info.dstname) and os.listdir(dir_info.dstname):
            if dir_info.name in ConstManager.VALID_DELIVERYS:
                src_path = os.path.join(dir_info.src, dir_info.name)
                dst_path = os.path.join(dir_info.dst, dir_info.name)
                if os.path.exists(dst_path):
                    self._copy_cmake_file(src_path, dst_path, ConstManager.CMAKELIST_TXT)
                return
        if os.path.isdir(dir_info.dstname) and not os.listdir(dir_info.dstname):
            shutil.rmtree(dir_info.dstname, ignore_errors=True)
        if os.path.exists(dir_info.dstname):
            return
        if os.path.isdir(dir_info.srcname):
            copytree(dir_info.srcname, dir_info.dstname)
        else:
            copy2(dir_info.srcname, dir_info.dstname)
        utils.modify_permission(dir_info.dstname, ignore_root_dir=False)
