#!/usr/bin/env python
# coding=utf-8

"""
Function:
This file mainly involves class for IR operator info.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""

import re
import collections

from op_gen.interface import utils
from op_gen.interface.op_info import OpInfo
from op_gen.interface.arg_parser import ArgParser
from op_gen.interface.const_manager import ConstManager


class TFOpInfo(OpInfo):
    """
    CLass representing operator info.
    """

    def __init__(self: any, argument: ArgParser) -> None:
        super().__init__()
        self.op_path = argument.input_path
        self.attr_info = []
        self.input_info = []
        self.output_info = []
        self.type_attr = {}
        self.op_type = None

    @staticmethod
    def _parse_name_info(line: str) -> any:
        if ":" not in line:
            utils.print_warn_log(
                "Name info \"" + line + "\" error ,Failed to find \":\".")
            return '', ''
        return line.split(":", 1)

    @staticmethod
    def _check_info_str(info_str: str, op_name: str) -> (bool, str):
        if info_str is None or len(info_str) == 0:
            return True, op_name
        if "REGISTER_OP" in info_str:
            match_list = utils.get_content_from_double_quotes(info_str)
            if match_list:
                utils.print_info_log(
                    "The op type is %s." % str(match_list[0]))
                op_name = match_list[0]
            else:
                op_name = ""
            return True, op_name
        return False, op_name

    @staticmethod
    def _parse_info_lines(info_str: str, operator_info: any) -> any:
        if info_str.startswith("Input") or info_str.startswith("Output") \
                or info_str.startswith("Attr"):
            match_list = utils.get_content_from_double_quotes(info_str)
            if not match_list:
                utils.print_warn_log(
                    "An error occurs during parsing by (\"key:value\"), "
                    "continue.")
                return True, operator_info
            if info_str.startswith("Input"):
                operator_info.input_info_lines.append(match_list[0])
            elif info_str.startswith("Output"):
                operator_info.output_info_lines.append(match_list[0])
            elif info_str.startswith("Attr"):
                operator_info.attr_info_lines.append(match_list[0])
            else:
                return True, operator_info
        return False, operator_info

    @staticmethod
    def _get_dynamic_input_output_type(value: str) -> str:
        if "N*" in value:
            return value.replace("N*", "")
        return ""

    @staticmethod
    def _check_dynamic_io_attr_info(name: str, value: str) -> bool:
        return bool(name == 'N' and ('>' or '<' in value))

    @staticmethod
    def _mapping_attr_type(tf_type: str) -> str:
        return utils.CheckFromConfig().trans_tf_attr_type(tf_type)

    @staticmethod
    def _mapping_input_output_type(tf_type: str, name: str) -> str:
        # mapping from tf type to D enum
        return utils.CheckFromConfig().trans_tf_io_dtype(tf_type, name)

    def get_op_path(self: any) -> str:
        """
        get op path
        """
        return self.op_path

    def parse(self: any) -> None:
        """
        Function Description:
        parse tensorflow operator
        Parameter:
        tf_file: tensorflow operator file
        Return Value:
        """
        utils.print_info_log("Start to parse the tensorflow ir: %s" %
                             self.op_path)
        txt = utils.read_file(self.op_path)
        input_info_lines = []
        output_info_lines = []
        attr_info_lines = []
        op_name = ""
        OperatorInfo = collections.namedtuple("OperatorInfo", ["input_info_lines",
                                                               "output_info_lines",
                                                               "attr_info_lines"])
        operator_info = OperatorInfo(input_info_lines, output_info_lines, attr_info_lines)
        new_line = txt.replace('\n', ConstManager.EMPTY).replace('\r', ConstManager.EMPTY) \
            .replace('\t', ConstManager.EMPTY)
        pattern = re.compile(ConstManager.SPACE)
        line = pattern.sub(ConstManager.EMPTY, new_line)
        line = line.replace('\"\"', ConstManager.EMPTY).replace('\\', ConstManager.EMPTY)
        line_point_list = line.split(".")
        for info_str in line_point_list:
            continue_flag, op_name = self._check_info_str(info_str, op_name)
            if continue_flag:
                continue
            continue_flag, operator_info = self._parse_info_lines(info_str, operator_info)
            if continue_flag:
                continue
        self._init_op_info(op_name, operator_info.input_info_lines, operator_info.output_info_lines,
                           operator_info.attr_info_lines)

    def _init_op_info(self: any, op_name: str, input_info_lines: list, output_info_lines: list,
                      attr_info_lines: list) -> None:
        if not op_name:
            utils.print_warn_log(
                "Failed to parse the op type. Please check.")
        if not input_info_lines and not output_info_lines:
            utils.print_warn_log(
                "There is no input and output information. Please check.")
        self.op_type = op_name
        self.fix_op_type = utils.fix_name_lower_with_under(op_name)
        for input_line in input_info_lines:
            utils.print_info_log("One input line has been handled: %s" % input_line)
            name, info = self._parse_name_info(input_line)
            self._add_input(name, info)
        for output_line in output_info_lines:
            utils.print_info_log("One output line has been handled: %s" %
                                 output_line)
            name, info = self._parse_name_info(output_line)
            self._add_output(name, info)
        for attr_line in attr_info_lines:
            utils.print_info_log("One attribute line has been handled: %s" %
                                 attr_line)
            name, info = self._parse_name_info(attr_line)
            self._add_attr(name, info)

        self._generate_input_info()
        self._generate_output_info()
        self._generate_attr_info()

    def _add_input(self: any, op_name: str, op_info: str) -> None:
        op_name = utils.fix_name_lower_with_under(op_name.strip())
        op_info = op_info.strip()
        self.input_info.append([op_name, op_info])
        # for dynamic type(eg:N*T), the key store in type_attr should to
        # remove the "N*", only "T"
        dynamic_type = self._get_dynamic_input_output_type(op_info)
        if dynamic_type:
            self.type_attr[dynamic_type] = 0
        else:
            self.type_attr[op_info] = 0

    def _add_output(self: any, op_name: str, op_info: str) -> None:
        op_name = utils.fix_name_lower_with_under(op_name.strip())
        op_info = op_info.strip()
        self.output_info.append([op_name, op_info])
        # for dynamic type(eg:N*T), the key store in type_attr should to
        # remove the "N*", only "T"
        dynamic_type = self._get_dynamic_input_output_type(op_info)
        if dynamic_type:
            self.type_attr[dynamic_type] = 0
        else:
            self.type_attr[op_info] = 0

    def _add_attr(self: any, op_name: str, op_info: str) -> None:
        op_name = op_name.strip()
        op_info = op_info.strip()
        if op_name in self.type_attr:
            self.type_attr[op_name] = op_info
        else:
            self.attr_info.append([op_name, op_info])

    def _generate_type_info(self: any, types: str, name: str) -> str:
        attr_info = {}
        if types.startswith("{"):
            if "}" not in types:
                utils.print_error_log(
                    "The attr type '%s' error. Failed to find '}'." % types)
                return ""
            type_info = types[1:types.index("}")]
            types = type_info.split(",")
            attr_info["types"] = (
                self._mapping_input_output_type(t.strip(), name)
                for t in types)
            if "=" in types:
                default_type = types[types.index("="):]
                attr_info["default_type"] = default_type
            attr_info["types"] = (x for x in attr_info.get("types") if x != "")
            return ",".join(attr_info.get("types"))
        return self._mapping_input_output_type(types.strip(), name)

    def _get_ir_type_and_param_type(self: any, name: str, value: str) -> any:
        # parse dynamic input/output
        dynamic_type = self._get_dynamic_input_output_type(value)
        if dynamic_type:
            param_type = ConstManager.PARAM_TYPE_DYNAMIC
            ir_type = dynamic_type
        else:
            param_type = ConstManager.PARAM_TYPE_REQUIRED
            ir_type = value
        # mapping ir type list
        if (self.type_attr.get(ir_type) is not None) and (self.type_attr.get(ir_type) != 0):
            ir_types = self._generate_type_info(
                self.type_attr.get(ir_type), name)
        else:
            ir_types = self._mapping_input_output_type(ir_type, name)
        ir_type_list = ir_types.split(',')
        return ir_type_list, param_type

    def _generate_input_info(self: any) -> None:
        for name, value in self.input_info:
            ir_type_list, param_type = self._get_ir_type_and_param_type(name, value)
            # update op_info.parsed_input_info
            self.parsed_input_info.update({name: {
                ConstManager.INFO_IR_TYPES_KEY: ir_type_list,
                ConstManager.INFO_PARAM_TYPE_KEY: param_type}})

    def _generate_output_info(self: any) -> None:
        for name, value in self.output_info:
            ir_type_list, param_type = self._get_ir_type_and_param_type(name, value)
            # update op_info.parsed_input_info
            self.parsed_output_info.update({name: {
                ConstManager.INFO_IR_TYPES_KEY: ir_type_list,
                ConstManager.INFO_PARAM_TYPE_KEY: param_type}})

    def _generate_attr_info(self: any) -> None:
        for name, value in self.attr_info:
            if self._check_dynamic_io_attr_info(name, value):
                utils.print_info_log("The attr '%s:%s' belongs to dynamic "
                                     "input/output. Do not parse it."
                                     % (name, value))
                return
            attr_name = utils.fix_name_lower_with_under(name)
            if "=" in value:
                attr_splits = value.split("=")
                attr_type = self._mapping_attr_type(attr_splits[0].strip())
                default_value = attr_splits[1].strip()
                self.parsed_attr_info.append(
                    [attr_name, attr_type, default_value])
            else:
                attr_type = self._mapping_attr_type(value.strip())
                self.parsed_attr_info.append([attr_name, attr_type])
