#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves class for generating aicore operator files.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""
import os
import re
from functools import partial
import json
from op_gen.interface.op_file import OPFile
from op_gen.interface.op_tmpl import OPTmpl
from op_gen.interface import utils
from op_gen.interface.const_manager import ConstManager


class OpFileAiCore(OPFile):
    """
    CLass for generate aicore op files
    """

    CFG_INFO_TYPE_MAP = {
        'DT_FLOAT': 'float',
        'DT_FLOAT16': 'float16',
        'DT_FLOAT32': 'float32',
        'DT_BF16': 'bfloat16',
        'DT_INT8': 'int8',
        'DT_INT16': 'int16',
        'DT_INT32': 'int32',
        'DT_INT64': 'int64',
        'DT_UINT8': 'uint8',
        'DT_UINT16': 'uint16',
        'DT_UINT32': 'uint32',
        'DT_UINT64': 'uint64',
        'DT_BOOL': 'bool',
        "DT_COMPLEX64": "complex64",
        "DT_COMPLEX128": "complex128",
        "DT_DOUBLE": "double"
    }

    PARAM_CHECK_TYPE_MAP = {
        "required": "REQUIRED",
        "optional": "OPTION",
        "dynamic": "DYNAMIC"
    }

    ASCEND_C_PARAM_TYPE_MAP = {
        "required": "REQUIRED",
        "optional": "OPTIONAL",
        "dynamic": "DYNAMIC"
    }

    @staticmethod
    def _mapping_attr_type_for_ini(attr_type: str) -> str:
        attr_type = attr_type.strip()
        return utils.CheckFromConfig().trans_ini_attr_type(attr_type)

    @staticmethod
    def _mapping_info_cfg_type(op_type: str) -> str:
        op_type = op_type.strip()
        if op_type in OpFileAiCore.CFG_INFO_TYPE_MAP:
            return OpFileAiCore.CFG_INFO_TYPE_MAP.get(op_type)
        utils.print_warn_log("The input/output type '%s' "
                             "is not supported by the .ini file. "
                             "Please check. If "
                             "you do not have this problem, ignore "
                             "the warning." % op_type)
        return ""

    def generate_impl(self: any) -> None:
        """
        Function Description:
        generate operator implementation.
        Parameter:
        Return Value:
        """
        if self.op_lan == ConstManager.OP_LAN_CPP:
            self._generate_cpp_impl()
        elif self.op_lan == ConstManager.OP_LAN_PY:
            self._generate_py_impl()
        else:
            utils.print_warn_log('op language {} is wrong!'.format(self.op_lan))

    def generate_info_cfg(self: any) -> None:
        """
        Function Description:
        generate operator info config file
        Parameter:
        Return Value:
        """
        if not self.op_info.fix_op_type:
            utils.print_warn_log("The op type is empty. Failed to generate "
                                 "the info config file. Please check.")
            return
        # 1.make [OpType], eg:[Add]
        new_str = OPTmpl.INI_OP.format(op_type=self.op_info.op_type)
        # 2.make input string
        new_str += self._generate_input_output_info_cfg(
            self.op_info.parsed_input_info, OPTmpl.INI_INPUT)
        # 3.make output string
        new_str += self._generate_input_output_info_cfg(
            self.op_info.parsed_output_info, OPTmpl.INI_OUTPUT)
        # 4.make attr string
        if len(self.op_info.parsed_attr_info) > 0:
            attr_info = ", ".join(x[0] for x in self.op_info.parsed_attr_info)
            new_str += OPTmpl.INI_ATTR_LIST.format(attr_info=attr_info)
            for attr in self.op_info.parsed_attr_info:
                new_str = self._generate_attr_aicore(attr, new_str)

        # 5.make bin file string
        new_str += OPTmpl.INI_BIN_FILE.format(name=self.op_info.fix_op_type)
        self._make_info_cfg_file(new_str)

    def _generate_cpp_impl(self: any) -> None:
        """
        Function Description:
        generate operator implementation.
        Parameter:
        Return Value:
        """
        cpp_list = ['#include "kernel_operator.h"']
        cpp_list.append('')
        kern_args = []
        for op_input in list(self.op_info.parsed_input_info):
            kern_args.append('GM_ADDR {}'.format(op_input))
        for op_output in list(self.op_info.parsed_output_info):
            op_output_param_name = op_output
            if op_output in list(self.op_info.parsed_input_info):
                op_output_param_name += '_ref'
            kern_args.append('GM_ADDR {}'.format(op_output_param_name))
        kern_args.append('GM_ADDR workspace')
        kern_args.append('GM_ADDR tiling')
        arg_list = ', '.join(kern_args)
        cpp_list.append('extern "C" __global__ __aicore__ void {}({}) {{'.format(
            self.op_info.fix_op_type, arg_list))
        cpp_list.append('    GET_TILING_DATA(tiling_data, tiling);')
        cpp_list.append('    // TODO: user kernel impl')
        cpp_list.append('}')
        # create py_dir
        cpp_dir = os.path.join(self.output_path, ConstManager.CPP_KERNEL_DIR)
        cpp_path = os.path.join(cpp_dir, self.op_info.fix_op_type + '.cpp')
        utils.make_dirs(cpp_dir)
        utils.write_files(cpp_path, '\n'.join(cpp_list))

    def _generate_py_impl(self: any) -> None:
        """
        Function Description:
        generate operator implementation.
        Parameter:
        Return Value:
        """
        op_params_for_check = self._generate_op_params_for_check()
        if not self.op_info.fix_op_type:
            utils.print_warn_log("The op type is empty. Failed to generate "
                                 "impl files. Please check.")
            return
        # 1.make head string
        head_str = OPTmpl.PY_HEAD
        # 2.make [op_type]_compute()
        op_input = ", ".join(list(self.op_info.parsed_input_info))
        op_output = ", ".join(list(self.op_info.parsed_output_info))
        head_str = self._generate_impl_compute(head_str, op_input, op_output)
        # 3.make [op_type]()
        head_str = self._generate_impl_define_head(head_str, op_input, op_output, op_params_for_check)
        input_data = ", ".join("data_" + x
                               for x in self.op_info.parsed_input_info)
        output_data = ", ".join(y for y in self.op_info.parsed_output_info)
        if len(self.op_info.parsed_attr_info) == 0:
            head_str += OPTmpl.PY_RES_WITHOUT_ATTR.format(
                name=self.op_info.fix_op_type,
                input_data=input_data,
                output_data=output_data)
        else:
            attr = ", ".join(a[0] for a in self.op_info.parsed_attr_info)
            head_str += OPTmpl.PY_RES_WIT_ATTR.format(
                name=self.op_info.fix_op_type,
                input_data=input_data,
                output_data=output_data,
                attr=attr)
        head_str += OPTmpl.PY_TARGET_CCE
        head_str += OPTmpl.PY_BUILD.format(input_data=input_data,
                                           left_braces=ConstManager.LEFT_BRACES,
                                           right_braces=ConstManager.RIGHT_BRACES)
        # create py_dir
        py_dir = os.path.join(self.output_path, ConstManager.IMPL_DIR)
        py_path = os.path.join(py_dir, self.op_info.fix_op_type +
                               ConstManager.IMPL_SUFFIX)
        utils.make_dirs(py_dir)
        utils.write_files(py_path, head_str)

    def _generate_cmake_lists(self: any) -> None:
        tbe_dir = os.path.join(self.output_path, 'tbe')
        if os.path.exists(tbe_dir):
            return
        utils.make_dirs(tbe_dir)
        cann_install_path = ConstManager.CANN_HOME_PATH
        template_path = os.path.join(
            cann_install_path,
            ConstManager.OP_TEMPLATE_TBE_PATH)
        if not os.path.exists(template_path):
            utils.print_error_log(
                "Get template TBE file path failed. Please check if your cann-toolkit is installed and envs."
            )
            raise utils.MsOpGenException(
                ConstManager.MS_OP_GEN_INVALID_PATH_ERROR)
        utils.copy_template(template_path, tbe_dir, True)
        utils.modify_permission(tbe_dir)

    def _generate_op_params_for_check(self: any) -> str:
        op_params_for_check = ""
        for op_input in self.op_info.parsed_input_info.values():
            input_type = OpFileAiCore.PARAM_CHECK_TYPE_MAP.get(op_input.get("param_type"))
            input_for_check = "para_check.%s_INPUT, " % input_type
            op_params_for_check = "{}{}".format(op_params_for_check, input_for_check)
        for op_output in self.op_info.parsed_output_info.values():
            output_type = OpFileAiCore.PARAM_CHECK_TYPE_MAP.get(op_output.get("param_type"))
            output_for_check = "para_check.%s_OUTPUT, " % output_type
            op_params_for_check = "{}{}".format(op_params_for_check, output_for_check)
        for op_attr in self.op_info.parsed_attr_info:
            attr_type = op_attr[1].strip()
            check_from_config = utils.CheckFromConfig()
            attr_type = check_from_config.trans_check_attr_type(attr_type)
            if ConstManager.PARAM_TYPE_OPTIONAL in op_attr:
                opt_attr_for_check = "para_check.OPTION_ATTR_%s, " % attr_type
                op_params_for_check = "{}{}".format(op_params_for_check, opt_attr_for_check)
            else:
                required_attr_for_check = "para_check.REQUIRED_ATTR_%s, " % attr_type
                op_params_for_check = "{}{}".format(op_params_for_check, required_attr_for_check)
        op_params_for_check += "para_check.KERNEL_NAME"
        return op_params_for_check

    def _generate_impl_compute(self: any, head_str: str, op_input: str, op_output: str) -> str:
        if len(self.op_info.parsed_attr_info) == 0:
            head_str += OPTmpl.PY_COMPUTE_WITHOUT_ATTR.format(
                name=self.op_info.fix_op_type,
                input_name=op_input,
                output=op_output)
        else:
            attr = ", ".join(a[0] for a in self.op_info.parsed_attr_info)
            head_str += OPTmpl.PY_COMPUTE_WITH_ATTR.format(
                name=self.op_info.fix_op_type,
                input_name=op_input,
                output=op_output,
                attr=attr)
        head_str += OPTmpl.PY_COMPUTE_END.format(input_name=op_input)
        return head_str

    def _generate_impl_define_head(self: any, head_str: str, op_input: str, op_output: str,
                                   op_params_for_check: str) -> str:
        if len(self.op_info.parsed_attr_info) == 0:
            head_str += OPTmpl.PY_DEF_WITHOUT_ATTR.format(
                op_params=op_params_for_check,
                name=self.op_info.fix_op_type,
                input_name=op_input,
                output=op_output)
        else:
            attr = ", ".join(a[0] for a in self.op_info.parsed_attr_info)
            head_str += OPTmpl.PY_DEF_WITH_ATTR.format(
                op_params=op_params_for_check,
                name=self.op_info.fix_op_type,
                input_name=op_input,
                output=op_output,
                attr=attr)
        for name in self.op_info.parsed_input_info:
            head_str += OPTmpl.PY_PLACEHOLDER.format(name=name)
        return head_str

    def _generate_attr_aicore(self: any, attr: list, new_str: str) -> str:
        attr_type = self._mapping_attr_type_for_ini(attr[1])
        new_str += OPTmpl.INI_ATTR_TYPE_VALUE.format(name=attr[0],
                                                      type=attr_type)
        if len(attr) == 4:
            new_str += OPTmpl.INI_ATTR_PARAM_TYPE.format(
                name=attr[0],
                paramType=attr[3]
            )
            if attr[2]:
                new_str += OPTmpl.INI_ATTR_DEFAULT_VALUE.format(
                    name=attr[0],
                    defaultValue=attr[2]
                )
        elif len(attr) == 3 and attr[2] != "":
            new_str += OPTmpl.INI_ATTR_PARAM_TYPE.format(
                name=attr[0],
                paramType=ConstManager.PARAM_TYPE_OPTIONAL
            )
            new_str += OPTmpl.INI_ATTR_DEFAULT_VALUE.format(
                name=attr[0],
                defaultValue=attr[2]
            )
        else:
            new_str += OPTmpl.INI_ATTR_PARAM_TYPE.format(
                name=attr[0],
                paramType=ConstManager.PARAM_TYPE_REQUIRED
            )
        return new_str

    def _generate_input_output_info_cfg(self: any, parsed_info: any, template_string: str) -> str:
        new_str = ""
        for (index, name) in enumerate(parsed_info):
            ir_types = (x for x in parsed_info[name][ConstManager.INFO_IR_TYPES_KEY] if x != "")
            ini_types = (self._mapping_info_cfg_type(x) for x in ir_types)
            ini_types = (x for x in ini_types if x != "")
            ini_types = ",".join(ini_types)

            # pram_type, when generator from tf ir, default param is 'required'
            param_type = parsed_info[name][ConstManager.INFO_PARAM_TYPE_KEY]
            # format, the default format is 'ND'
            if ConstManager.INFO_PARAM_FORMAT_KEY in parsed_info[name]:
                if len(parsed_info[name].get(ConstManager.INFO_PARAM_FORMAT_KEY)) == 1:
                    completion_format = parsed_info[name].get(ConstManager.INFO_PARAM_FORMAT_KEY)[0]
                    op_format = ",".join(completion_format for _ in ini_types.split(','))
                else:
                    op_format = ",".join(parsed_info[name][ConstManager.INFO_PARAM_FORMAT_KEY])
            else:
                op_format = ",".join("ND" for _ in ini_types.split(','))
            new_str += template_string.format(index=index,
                                              name=name,
                                              dtype=ini_types,
                                              format=op_format,
                                              paramType=param_type)
        return new_str

    def _make_info_cfg_file(self: any, new_str: str) -> None:
        for unit in self.compute_unit:
            compute_unit_parse_list = unit.split("-", 1)
            if len(compute_unit_parse_list) < 2:
                continue
            info_dir = os.path.join(self.output_path, 'tbe', 'op_info_cfg')
            utils.make_dirs(info_dir)
            core_type_dir = os.path.join(info_dir, compute_unit_parse_list[0])
            utils.make_dirs(core_type_dir)
            soc_dir = os.path.join(core_type_dir,
                                   utils.CheckFromConfig().trans_soc_version(compute_unit_parse_list[1]))
            utils.make_dirs(soc_dir)
            # create dir and write ini file
            info_path = os.path.join(soc_dir, self.op_info.fix_op_type +
                                     ".ini")
            utils.write_files(info_path, new_str)

    def _generate_cpp_tiling(self: any) -> None:
        th_path = os.path.join(self.output_path, ConstManager.CPP_HOST_DIR)
        th_file = os.path.join(th_path, self.op_info.fix_op_type + "_tiling.h")
        utils.make_dirs(th_path)
        utils.write_files(th_file, OPTmpl.OP_HOST_TILING_DEF_H.format(
                          op_type=self.op_info.op_type))

    def _generate_cpp_params(self: any, is_output: bool) -> str:
        param_str = ""
        if is_output:
            param_api = "Output"
            param_info = self.op_info.parsed_output_info
        else:
            param_api = "Input"
            param_info = self.op_info.parsed_input_info
        for (name, value) in param_info.items():
            param_type = OpFileAiCore.ASCEND_C_PARAM_TYPE_MAP.get(value[ConstManager.INFO_PARAM_TYPE_KEY])
            ge_types = ", ".join(["ge::" + t for t in value[ConstManager.INFO_IR_TYPES_KEY]]).\
                                            replace("DT_FLOAT32", "DT_FLOAT")
            ge_fmts = ", ".join(["ge::FORMAT_" + f for f in value[ConstManager.INFO_PARAM_FORMAT_KEY]])
            param_str += "        this->{api}(\"{name}\")\n".format(api=param_api, name=name)
            param_str += "            .ParamType({type})\n".format(type=param_type)
            param_str += "            .DataType({{{dtype}}})\n".format(dtype=ge_types)
            param_str += "            .Format({{{fmt}}})\n".format(fmt=ge_fmts)
            param_str += "            .UnknownShapeFormat({{{fmt}}});\n".format(fmt=ge_fmts)
        return param_str

    def _generate_cpp_attrs(self: any) -> str:
        attr_str = ""
        for attr in self.op_info.parsed_attr_info:
            if len(attr) < 4:
                utils.print_error_log("attr {name} has no attr_type".format(name=attr[0]))
                continue
            attr_api = attr[1]
            attr_val = attr[2]
            if attr_api == "String":
                attr_val = "\"{val}\"".format(val=attr[2])
            if attr[3] == "optional":
                attr_str += "        this->Attr(\"{name}\").AttrType(OPTIONAL).{api}({val});\n".format(
                    name=attr[0], api=attr_api, val=attr_val)
            else:
                attr_str += "        this->Attr(\"{name}\").{api}();\n".format(
                    name=attr[0], api=attr_api)
        return attr_str

    def _generate_cpp_aicore(self: any) -> str:
        aic_str = ""
        for compute_unit in self.compute_unit:
            units = compute_unit.split("-", 1)
            if len(units) < 2:
                continue
            if units[0] != "ai_core":
                continue
            aic_str += "        this->AICore().AddConfig(\"{soc_ver}\");\n".format(
                soc_ver = utils.CheckFromConfig().trans_soc_version(units[1]))
        return aic_str

    def _generate_cpp_opdef(self: any) -> None:
        def_path = os.path.join(self.output_path, ConstManager.CPP_HOST_DIR)
        def_file = os.path.join(def_path, self.op_info.fix_op_type + ".cpp")
        utils.make_dirs(def_path)
        file_str = OPTmpl.OP_HOST_CPP_HEADER.format(op_fix=self.op_info.fix_op_type)
        file_str += OPTmpl.OP_HOST_TILING_FUNC.format(op_type=self.op_info.op_type)
        file_str += OPTmpl.OP_HOST_INFER_FUNC
        file_str += OPTmpl.OP_HOST_DEF_BEGIN.format(op_type=self.op_info.op_type)
        file_str += self._generate_cpp_params(False)
        file_str += self._generate_cpp_params(True)
        file_str += self._generate_cpp_attrs()
        file_str += OPTmpl.OP_HOST_INFER_REG
        file_str += OPTmpl.OP_HOST_TILING_REG
        file_str += self._generate_cpp_aicore()
        file_str += OPTmpl.OP_HOST_DEF_END.format(op_type=self.op_info.op_type)
        utils.write_files(def_file, file_str)
        
    def _generate_op_host(self: any) -> None:
        self._generate_cpp_tiling()
        self._generate_cpp_opdef()

    def _update_cmake_variable_value(self: any, env: dict, match: any) -> str:
        variable = match.group('variable')
        if variable in env.keys():
            return match.group(0).replace(match.group('value'), env[variable])
        return match.group(0)

    def _update_config_cmake(self: any, config_content: str, env: dict) -> str:
        repl_func = partial(self._update_cmake_variable_value, env)
        return re.sub(r'set\s*\(\s*(?P<variable>[\w{}]+)\s+(?P<value>.*?)((\s+CACHE\s+.+)|(PARENT_SCOPE)?)\)',
                    repl_func,
                    config_content,
                    flags=re.IGNORECASE)

    def _check_config_cmake_env(self: any, content: str, config_env: dict, config_type: str) -> None:
        check_list = ["ASCEND_COMPUTE_UNIT"]
        if config_type == "aclnn":
            check_list.append("ASCEND_CANN_PACKAGE_PATH")
        else:
            check_list.append("ASCEND_FRAMEWORK_TYPE")
        for env in check_list:
            if env in content:
                check_list.remove(env)
        if check_list:
            res = ", ".join(check_list)
            utils.print_warn_log("File config.cmake lack of {}. Please check your config env.".format(res))

    def _update_aclnn_config_cmake(self: any, dst_path, config_env: dict) -> None:
        config_path = os.path.join(ConstManager.CANN_HOME_PATH,
                                    ConstManager.OP_TEMPLATE_ASCENDC_ACLNN_PATH,
                                    'cmake/config.cmake')
        template_config = utils.read_file(config_path)
        self._check_config_cmake_env(template_config, config_env, "aclnn")
        utils.write_files(dst_path, self._update_config_cmake(template_config, config_env))

    def _update_customize_config_cmake(self: any, dst_path, config_env: dict) -> None:
        config_path = os.path.join(ConstManager.CANN_HOME_PATH,
                                    ConstManager.OP_TEMPLATE_ASCENDC_PATH,
                                    'cmake/config.cmake')
        template_config = utils.read_file(config_path)
        self._check_config_cmake_env(template_config, config_env, "customize")
        utils.write_files(dst_path, self._update_config_cmake(template_config, config_env))

    def _generate_cmake_config_cpp(self: any) -> None:
        cfg_path = os.path.join(self.output_path, ConstManager.CMAKE_CONFIG_DIR)
        cfg_file = os.path.join(cfg_path, "config.cmake")
        utils.make_dirs(cfg_path)
        socs = []
        for compute_unit in self.compute_unit:
            units = compute_unit.split("-", 1)
            if len(units) < 2:
                continue
            if units[0] != "ai_core":
                continue
            socs.append(units[1])
        soc = ";".join(socs)
        plugin = self.fmk_type
        if plugin == "tf":
            plugin = "tensorflow"
        config_env = {
            'ASCEND_COMPUTE_UNIT': utils.CheckFromConfig().trans_soc_version(soc),
            'ASCEND_FRAMEWORK_TYPE': plugin
        }

        if plugin == "aclnn":
            cann_path = os.getenv(ConstManager.ASCEND_HOME_PATH)
            if not cann_path:
                cann_path = ConstManager.CANN_USR_LOCAL_PATH
            config_env['ASCEND_CANN_PACKAGE_PATH'] = cann_path
            self._update_aclnn_config_cmake(cfg_file, config_env)
            return
            
        self._update_customize_config_cmake(cfg_file, config_env)
        # modify CMakePreset.json soc version
        json_file = os.path.join(self.output_path, ConstManager.CMAKE_PRESET_FILE)
        preset_json_data = utils.read_json_file(json_file)
        cann_install_path = ConstManager.CANN_HOME_PATH
        if 'configurePresets' in preset_json_data:
            cache_variables = "cacheVariables"
            preset_value = "value"
            for preset in preset_json_data['configurePresets']:
                if preset.get(cache_variables).get('ASCEND_COMPUTE_UNIT').get(preset_value) is not None:
                    preset[cache_variables]['ASCEND_COMPUTE_UNIT'][preset_value] = \
                        utils.CheckFromConfig().trans_soc_version(soc)
                if preset.get(cache_variables).get('ASCEND_CANN_PACKAGE_PATH').get(preset_value) is not None:
                    preset[cache_variables]['ASCEND_CANN_PACKAGE_PATH'][preset_value] = \
                        cann_install_path
        # write presets json
        os.chmod(json_file, ConstManager.CONFIG_MODE)
        fd = os.open(json_file, ConstManager.WRITE_FLAGS | os.O_TRUNC, ConstManager.CONFIG_MODE)
        with os.fdopen(fd, 'w+') as file:
            json.dump(preset_json_data, file, indent=4)
        return

    def _generate_aclnn_op_kernel_cmakelist(self: any):
        cmake_file_path = os.path.join(self.output_path, ConstManager.KERNEL_CMAKELISTS_FILE)
        utils.write_files(cmake_file_path, OPTmpl.CMAKE_KERNEL_CMAKELISTS_FILE.format(
            op_name=self.op_info.op_type, kernel_name=self.op_info.fix_op_type))

    def _file_enable_edit_cpp(self: any) -> None:
        if self.fmk_type != "aclnn":
            os.chmod(os.path.join(self.output_path, ConstManager.CMAKE_PRESET_FILE), ConstManager.CONFIG_MODE)

    def _new_operator(self: any) -> None:
        if self.op_lan == ConstManager.OP_LAN_CPP:
            self._generate_cmake_config_cpp()
            self._generate_op_host()
            self._file_enable_edit_cpp()
        else:
            self._generate_cmake_lists()
            self.generate_info_cfg()
            self._generate_op_proto()
        self.generate_impl()
        self._generate_plugin()
        if self.fmk_type == "aclnn":
            self._generate_aclnn_op_kernel_cmakelist()
