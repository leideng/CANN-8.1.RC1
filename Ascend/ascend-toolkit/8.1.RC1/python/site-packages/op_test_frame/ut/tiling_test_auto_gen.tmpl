/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2024. All rights reserved.

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Apache License Version 2.0.You may not use this file except in compliance with the License.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Apache License for more details at
 * http://www.apache.org/licenses/LICENSE-2.0
 */

/* Please put this file in folder of op tiling ut like: ops/built-in/tests/ut/op_tiling_test
   and then run `build.sh --ops_cpp_op_tiling_utest` for full tiling ut
   or run `build.sh --ops_cpp_op_tiling_utest --gtest_filter={{op_type}}TilingTestAutoGen` for current ut
 */
#include "common_tiling_ut.h"

class {{op_type}}TilingTestAutoGen : public tiling_test::TilingTest {
 protected:
  static void SetUpTestCase() {
    std::cout << "{{op_type}} Tiling SetUp" << std::endl;
  }

  static void TearDownTestCase() {
    std::cout << "{{op_type}} Tiling TearDown" << std::endl;
  }
};

{% for case in test_cases -%}
TEST_F({{op_type}}TilingTestAutoGen, ut_case_{{case.case_name}}) {
  std::string op_type = "{{op_type}}";
  std::string compile_info =  R"({{case.tiling_params.compile_info_c}})";
  std::string compile_info_hash = "{{case.tiling_params.compile_info_hash_c}}";
  std::string inputs = R"({{case.tiling_params.inputs_c}})";
  std::string outputs = R"({{case.tiling_params.outputs_c}})";
  /* tiling_data_expect convert as:
     Int64 Arrays: "{{case.tiling_ret.tiling_data_expect_int64}}"
     Int32 Arrays: "{{case.tiling_ret.tiling_data_expect_int32}}"
  */
  std::string tiling_data_expect_hex = "{{case.tiling_ret.tiling_data_expect_hex}}";
  uint64_t tiling_key_expect = {{case.tiling_ret.tiling_key_expect}};

  char run_info_buff[40960] = "\n";
  auto ret = TbeOpTilingPyInterface(op_type.c_str(), compile_info.c_str(), compile_info_hash.c_str(), inputs.c_str(),
                                    outputs.c_str(), nullptr, run_info_buff, sizeof(run_info_buff), nullptr);
  ASSERT_EQ(ret, 1);

  nlohmann::json json;
  ASSERT_TRUE(ParseJsonRunInfo(run_info_buff, json));
  ASSERT_TRUE(json.contains("tiling_data"));
  ASSERT_TRUE(json.contains("tiling_key"));

  auto tiling_data_str = json["tiling_data"].get<std::string>();
  auto tiling_key = json["tiling_key"].get<uint64_t>();
  ASSERT_EQ(tiling_data_str, tiling_data_expect_hex);
  ASSERT_EQ(tiling_key, tiling_key_expect);
}

{% endfor -%}
