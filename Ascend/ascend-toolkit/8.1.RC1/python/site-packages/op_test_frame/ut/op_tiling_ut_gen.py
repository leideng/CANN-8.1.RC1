#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
generate op tiling ut
"""
import hashlib
import os
import json
import stat
import numpy as np
from jinja2 import Environment, FileSystemLoader

from op_test_frame.ut.op_ut_case_info import OpUTCase


class OpTilingUtGen(object):
    def __init__(self, op_type: str):
        file_loader = FileSystemLoader(os.path.dirname(os.path.realpath(__file__)))
        tmpl_env = Environment(loader=file_loader)
        self.template = tmpl_env.get_template("tiling_test_auto_gen.tmpl")
        self.tiling_cases: dict = {}
        self.op_type = op_type
        self.gen_dir = os.path.realpath("./tiling_ut_auto_gen")

    def collect_tiling_ut_gen_info(self, case_info: OpUTCase,
                                   tiling_params: dict):
        if not case_info.gen_tiling_ut:
            return
        case_name = case_info.ori_case_name if case_info.ori_case_name else case_info.case_name
        if case_name in self.tiling_cases:
            return
        inputs, outputs = tiling_params.get("inputs"), tiling_params.get("outputs")
        compile_info, run_info = tiling_params.get("compile_info"), tiling_params.get("run_info")

        compile_info_c = json.dumps(compile_info)
        compile_info_hash = hashlib.sha256()
        compile_info_hash.update(compile_info_c.encode('utf_8'))
        compile_info_hash = compile_info_hash.hexdigest()
        tiling_params = {"compile_info_c": compile_info_c, "compile_info_hash_c": compile_info_hash,
                         "inputs_c": json.dumps(inputs), "outputs_c": json.dumps(outputs)}

        tde_int64, tde_int32, tde_hex = "", "", run_info['tiling_data'].hex().upper()
        if len(run_info['tiling_data']) % 8 == 0:
            # int64 compare
            be_int64 = np.dtype(np.int64)
            be_int64 = be_int64.newbyteorder('<')
            tde_int64 = ' '.join(list(map(str, np.frombuffer(run_info['tiling_data'], dtype=be_int64))))
        if len(run_info['tiling_data']) % 4 == 0:
            # int32 compare
            be_int32 = np.dtype(np.int32)
            be_int32 = be_int32.newbyteorder('<')
            tde_int32 = ' '.join(list(map(str, np.frombuffer(run_info['tiling_data'], dtype=be_int32))))
        tiling_ret = {"tiling_data_expect_int64": tde_int64,
                      "tiling_data_expect_int32": tde_int32,
                      "tiling_data_expect_hex": tde_hex,
                      "tiling_key_expect": run_info['tiling_key']}
        self.tiling_cases[case_name] = {"case_name": case_name,
                                        "tiling_params": tiling_params, "tiling_ret": tiling_ret}

    def gen_tiling_ut(self):
        if not self.tiling_cases:
            return
        tiling_ut_path = os.path.join(self.gen_dir, f"test_{self.op_type}_tiling.cpp")
        os.makedirs(self.gen_dir, exist_ok=True)
        test_cases = list(self.tiling_cases.values())
        tiling_ut_str = self.template.render(op_type=self.op_type, test_cases=test_cases)
        write_flags = os.O_WRONLY | os.O_CREAT | os.O_TRUNC
        write_modes = stat.S_IWUSR | stat.S_IRUSR
        with os.fdopen(os.open(tiling_ut_path, write_flags, write_modes), 'w') as f:
            f.write(tiling_ut_str)
