#!/usr/bin/env python
# coding=utf-8
"""
Function:
This file mainly involves AscendC operator call of kernel function file content.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2023-2023
"""


class AscendcCodeTemplate:
    """
    class CodeTemplate
    """
    # cce information
    MALLOC_SIZE = "size_t {input}ByteSize = {shape} * sizeof({dtype});"
    MALLOC_SIZE_WITH_NO_SHAPE = "size_t {input}ByteSize = sizeof({dtype});"

    # acl
    ACL_MALLOC_INPUT = """
    uint8_t *{input}Host;
    uint8_t *{input}Device;
    CALL_RT(aclrtMallocHost((void**)(&{input}Host), {input}ByteSize));
    CALL_RT(aclrtMalloc((void**)&{input}Device, {input}ByteSize, ACL_MEM_MALLOC_HUGE_FIRST));
    ReadFile("{filepath}", {input}ByteSize, {input}Host, {input}ByteSize);
    CALL_RT(aclrtMemcpy({input}Device, {input}ByteSize, {input}Host, {input}ByteSize, ACL_MEMCPY_HOST_TO_DEVICE));"""
    ACL_MALLOC_OUTPUT = """
    uint8_t *{output}Host;
    uint8_t *{output}Device;
    CALL_RT(aclrtMallocHost((void**)(&{output}Host), {output}ByteSize));
    CALL_RT(aclrtMalloc((void**)&{output}Device, {output}ByteSize, ACL_MEM_MALLOC_HUGE_FIRST));
    """
    # ----------------------------cpu code ----------------------------------------------------------
    GET_INPUT_MALLOC = "uint8_t *{input} = (uint8_t *)AscendC::GmAlloc({input}ByteSize);"
    READ_INPUT_FILE = "ReadFile(\"{filepath}\", {input}ByteSize, {input}, {input}ByteSize);"
    WRITE_OUTPUT_FILE = "WriteFile(\"{filepath}\", {output}, {output}ByteSize);"
    FREE_PARAM = "AscendC::GmFree((void *){input});"

    CPU_CODE_TEMPLATE = """
    {get_cpu_input_malloc}
    {get_cpu_output_malloc}

    {read_input_file}

    ICPU_RUN_KF({kernel_func_name}, blockDim, {param_info});

    {write_output_file}

    {free_param}
    """
    # ---------------
    MALLOC_OP_DESC_SIZE = """
    {input_malloc_desc}
    {output_malloc_desc}"""
    # ----------------------------cpu code ----------------------------------------------------------
    MALLOC_NPU_SIZE = """{npu_input_malloc}
    {npu_output_malloc}"""
    MEMCPY_HOST_TO_DEVICE = """
    CALL_RT(aclrtMemcpy({output}Host, {output}ByteSize, {output}Device, {output}ByteSize, ACL_MEMCPY_DEVICE_TO_HOST));
"""
    FREE_OUTPUT = """ 
    WriteFile("{filepath}", {output}Host, {output}ByteSize);
    RETURN_IF_NOT_SUCCESS(aclrtFree({output}Device),
        "Failed to free devInputs memory.", GetRecentErrMsg());
    RETURN_IF_NOT_SUCCESS(aclrtFreeHost({output}Host),
        "Failed to free host or device outputs memory.", GetRecentErrMsg());"""
    MAIN_CPP_CONTENT = """
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.
 * This file constains code of cpu debug and npu code.We read data from bin file
 * and write result to file.
 */
#include "data_utils.h"
#ifndef __CCE_KT_TEST__
#include "acl/acl.h"
extern {kernel_do_func};
#else
#include "tikicpulib.h"
extern "C" {kernel_func};
#endif


int32_t main(int32_t argc, char* argv[])
{{
    {malloc_op_desc_size}
    uint32_t blockDim = {block_dim};

#ifdef __CCE_KT_TEST__
    {cpu_code_template}
#else
    aclInit(nullptr);
    aclrtContext context;
    aclError error;
    int32_t deviceId = {device_id};
    CALL_RT(aclrtCreateContext(&context, deviceId));
    aclrtStream stream = nullptr;
    CALL_RT(aclrtCreateStream(&stream));
    {npu_malloc_size}
    {kernel_do_func_name}(blockDim, nullptr, stream, {npu_input_param}); // call kernel in this function
    CALL_RT(aclrtSynchronizeStream(stream));
    {copy_out_malloc}
    {free_output}

    if (aclrtDestroyStream(stream) != ACL_SUCCESS) {{
        ERROR_LOG("aclrtDestroyStream failed.");
    }}
    INFO_LOG("aclrtDestroyStream successfully.");
    aclrtResetDevice(deviceId);
    if (aclFinalize() != ACL_SUCCESS) {{
        ERROR_LOG("aclFinalize failed.");
    }}
#endif
    return 0;
}}
"""

    def get_main_cpp_content(self):
        """
        get main cpp content
        :return: main_cpp_content
        """
        return self.MAIN_CPP_CONTENT
