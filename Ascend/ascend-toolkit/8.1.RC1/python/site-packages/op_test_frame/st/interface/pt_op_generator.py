#!/usr/bin/env python
# coding=utf-8
"""
Function:
PtOpGenerator class.
This class mainly implements pytorch op src code generation.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2022-2023
Change History: 2020-07-11 file Created
"""

from string import Template

from op_test_frame.st.interface import op_st_case_info
from op_test_frame.st.interface.const_manager import ConstManager
from op_test_frame.st.interface.gen_template_test import GenTemplateTest
from op_test_frame.st.template.code_snippet import CodeTemplate
from op_test_frame.common import op_status
from op_test_frame.st.interface import utils


class PtOpGenerator(GenTemplateTest):
    """
    Class for generating pytorch op test code.
    """

    def __init__(self, testcase_list, path_and_device_id, machine_type,
                 report_and_advance_args):
        super(PtOpGenerator, self).__init__(
            testcase_list, path_and_device_id, machine_type, report_and_advance_args[0])
        self.advance_args = report_and_advance_args[1]
        self.is_module = False

    @staticmethod
    def _gen_execute_tmpl(torch_api, input_params):
        cpu_out = CodeTemplate.TORCH_API_CPU_COMMON_CONTENT.format(
            torch_api=torch_api,
            input_params=input_params)
        npu_out = CodeTemplate.TORCH_API_NPU_COMMON_CONTENT.format(
            torch_api=torch_api,
            input_params=input_params)
        return cpu_out, npu_out

    @staticmethod
    def _gen_module_execute_tmpl(torch_api, input_name, attr_name):
        cpu_out = CodeTemplate.TORCH_API_CPU_MODULE_CONTENT.format(
            torch_api=torch_api,
            attr_name=attr_name,
            input_name=input_name)
        npu_out = CodeTemplate.TORCH_API_NPU_MODULE_CONTENT.format(
            input_name=input_name)
        return cpu_out, npu_out

    @staticmethod
    def _get_attr_value(testcase_struct):
        set_attr_value_list = []
        attr_name_list = []
        set_attr_value = ''
        if testcase_struct.get('attr'):
            for index, attr_desc in enumerate(testcase_struct.get('attr')):
                if attr_desc.get('type') == "string":
                    attr_value = "\"{}\"".format(attr_desc.get('value'))
                else:
                    attr_value = attr_desc.get('value')
                set_attr_value_list.append(CodeTemplate.SET_ATTR_VALUE.format(
                    attr_name=attr_desc.get('name'),
                    value=attr_value))
                attr_name_list.append(attr_desc.get('name'))
        if set_attr_value_list:
            set_attr_value = ConstManager.NEXT_LINE_TORCH.join(set_attr_value_list)
        return set_attr_value, attr_name_list

    @staticmethod
    def _get_input_name(input_name):
        if not input_name:
            input_name = 'input{0}'.format(input_name)
        return input_name

    def gen_test_func(self):
        """
        generate func content
        """
        test_func_str = ''
        for testcase_struct in self.testcase_list:
            # create input data path
            self._check_str_upper(testcase_struct.get(ConstManager.PYTORCH_API))
            testcase_name = testcase_struct.get('case_name')
            input_data_abs_paths = self._mkdir_input_data_path(testcase_struct)
            input_value_dict = self._get_input_value(testcase_struct, input_data_abs_paths)
            set_attr_value, attr_name_list = self._get_attr_value(testcase_struct)
            input_params_template = CodeTemplate.SET_INPUT_DESC_VALUE.format(
                set_input_value=input_value_dict.get("set_np_value"),
                input_from_numpy=input_value_dict.get("set_cpu_value"),
                input_to_npu=input_value_dict.get("set_npu_value"),
                set_attr_value=set_attr_value)
            input_name = input_value_dict.get("input_name")
            cpu_input_name = list(map(lambda name: 'cpu_{0}'.format(name), input_name))
            npu_input_name = list(map(lambda name: 'npu_{0}'.format(name), input_name))
            if not self.is_module:
                test_func_str += CodeTemplate.TORCH_TEMPLATE_TEST_CASE.format(
                    cpu_output='cpu_output',
                    case_name=testcase_name,
                    set_params_value=input_params_template,
                    cpu_input_params=', '.join(cpu_input_name + attr_name_list),
                    npu_input_params=', '.join(npu_input_name + attr_name_list))
            else:
                test_func_str += CodeTemplate.TORCH_TEMPLATE_TEST_CASE.format(
                    cpu_output='cpu_output, cpu_model',
                    case_name=testcase_name,
                    set_params_value=input_params_template,
                    cpu_input_params=', '.join(cpu_input_name + attr_name_list),
                    npu_input_params='cpu_model, {0}'.format(', '.join(npu_input_name + attr_name_list)))
        return test_func_str

    def gen_test_template_content(self):
        """
        generate python file for test code template
        """
        get_performance_mode = False
        if self.advance_args:
            get_performance_mode = self.advance_args.get_performance_mode_flag()
        if get_performance_mode:
            torch_main_content = CodeTemplate.TORCH_TEMPLATE_MAIN_PROFILING_FUNC
        else:
            torch_main_content = CodeTemplate.TORCH_TEMPLATE_MAIN_FUNC
        test_func_str = self.gen_test_func()
        input_params, cpu_output, calc_out = self._gen_execute_output()
        op_name, op_name_lower = self._get_op_name()
        template_sample = Template(CodeTemplate.TORCH_TEMPLATE_CODE)
        sample_dict = {
            'op_name': op_name,
            'input_params_cpu': input_params[0],
            'input_params_npu': input_params[1],
            'cpu_output': cpu_output,
            'calc_cpu': calc_out[0],
            'calc_npu': calc_out[1],
            'test_func': test_func_str,
            'main_func': torch_main_content
        }
        torch_test_py_content = template_sample.substitute(sample_dict)
        return torch_test_py_content

    def _get_input_value(self, testcase_struct, input_data_abs_paths):
        np_value_list = []
        cpu_input_list = []
        input_name_list = []
        npu_input_list = []
        for index, input_desc in enumerate(testcase_struct.get('input_desc')):
            input_name = self._get_input_name(input_desc.get('name'))
            input_name_list.append(input_name)
            if input_desc.get('type') == 'UNDEFINED':
                continue
            np_value_list.append(CodeTemplate.TORCH_TEMPLATE_SET_INPUT_VALUE.format(
                input_name=input_name,
                input_bin_file=input_data_abs_paths[index],
                data_type=input_desc.get('type')
            ))
            cpu_input_list.append(CodeTemplate.TORCH_TEMPLATE_INPUT_FROM_NUMPY.format(input_name=input_name))
            npu_input_list.append(CodeTemplate.TORCH_TEMPLATE_INPUT_TO_NPU.format(
                input_name=input_name
            ))
        input_value_dict = {
            "set_np_value": ConstManager.NEXT_LINE_TORCH.join(np_value_list),
            "set_cpu_value": ConstManager.NEXT_LINE_TORCH.join(cpu_input_list),
            "set_npu_value": ConstManager.NEXT_LINE_TORCH.join(npu_input_list),
            "input_name": input_name_list
        }
        return input_value_dict

    def _check_str_upper(self, character):
        if not character:
            utils.print_error_log("There is no 'run_torch_api' field in input *.json, please check.")
            raise utils.OpTestGenException(
                ConstManager.OP_TEST_GEN_INVALID_DATA_ERROR)
        for alpha in character:
            if alpha.isupper():
                self.is_module = True
                break

    def _gen_execute_output(self):
        """
        generate execute output func
        """
        testcase = self.testcase_list[0]
        input_name_list = []
        attr_name_list = []
        attr_name = ''
        torch_api = testcase.get(ConstManager.PYTORCH_API)
        for input_desc in testcase.get('input_desc'):
            input_name = self._get_input_name(input_desc.get('name'))
            input_name_list.append(input_name)
        input_name = ', '.join(input_name_list)
        if testcase.get('attr'):
            for attr_desc in testcase.get('attr'):
                attr_name_list.append(attr_desc.get('name'))
        if attr_name_list:
            attr_name = ', '.join(attr_name_list)
            input_params_cpu = '{}, {}'.format(input_name, attr_name)
        else:
            input_params_cpu = input_name
        if not self.is_module:
            calc_cpu_out, calc_npu_out = self._gen_execute_tmpl(torch_api, input_params_cpu)
            input_params_npu = input_params_cpu
            cpu_output = 'cpu_output'
        else:
            calc_cpu_out, calc_npu_out = self._gen_module_execute_tmpl(torch_api, input_name, attr_name)
            input_params_npu = 'cpu_model, {}'.format(input_params_cpu)
            cpu_output = 'cpu_output, m1'
        return (input_params_cpu, input_params_npu), cpu_output, (calc_cpu_out, calc_npu_out)

    def _rewrite_files_for_output_dir(self):
        # generate test_op.py template content.
        torch_test_py_content = self.gen_test_template_content()
        # create test_op.py path
        _, op_name_lower = self._get_op_name()
        output_testcase_py_path = self.get_path()
        # write test_op.py to path
        self.append_content_to_file(torch_test_py_content,
                                    output_testcase_py_path)
        gen_ms_result = op_st_case_info.OpSTStageResult(
            op_status.SUCCESS,
            "gen_torch_st_code",
            output_testcase_py_path)
        for case_report in self.report.report_list:
            case_report.trace_detail.add_stage_result(gen_ms_result)
