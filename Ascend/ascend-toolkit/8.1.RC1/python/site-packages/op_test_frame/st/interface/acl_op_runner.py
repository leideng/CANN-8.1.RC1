#!/usr/bin/env python
# coding=utf-8
"""
Function:
This class mainly involves compile and run acl op.
Copyright Information:
Huawei Technologies Co., Ltd. All Rights Reserved Â© 2020
"""

import os
import sys
import time
import platform
import glob
import stat
import shutil
from op_test_frame.common import op_status

from op_test_frame.st.interface import utils
from op_test_frame.st.interface.const_manager import ConstManager
from op_test_frame.st.interface import op_st_case_info


class AclOpRunner:
    """
    Class for compile and run acl op test code.
    """

    def __init__(self, path, soc_version, report, advance_args=None):
        self.path = path
        self.soc_version = soc_version
        self.report = report
        self.advance_args = advance_args

    @staticmethod
    def _execute_cmake_cmd(cmake_cmd):
        utils.execute_command(cmake_cmd)
        utils.execute_command(['make'])

    @staticmethod
    def _prof_get_op_case_info_from_csv_file(csv_file, op_name_list):
        op_case_info = []
        if not csv_file:
            utils.print_error_log("The CSV file is empty. Please check.")
            return op_case_info
        if not op_name_list:
            utils.print_error_log("The op name list is empty. Please check.")
            return op_case_info
        op_case_info = get_op_case_info_from_csv_file(
            csv_file, op_name_list)
        return op_case_info

    @staticmethod
    def _get_job_path(prof_base_path):
        scan = utils.ScanFile(prof_base_path, first_prefix="PROF",
                              second_prefix="mindstudio_profiler_output")
        scan_dirs = scan.scan_subdirs()
        if not scan_dirs:
            utils.print_error_log("Profiling job directory"
                                  " is not found, skip according analysis")
            return ''
        if len(scan_dirs) > 1:
            utils.print_error_log(
                "Multiple profiling job directories are found, "
                "please clear the prof directory"
                " and retry: %s" % ','.join(scan_dirs))
            return ''
        job_path = scan_dirs[0]
        os.chdir(job_path)
        utils.print_info_log(
            "Start to analyze profiling data in %s" % job_path)
        return job_path

    @staticmethod
    def _get_pta_and_prof_path(prof_base_path):
        if not os.path.isdir(prof_base_path):
            return "", ""
        pta_path = ""
        pta_dir_path_list = os.listdir(prof_base_path)
        for pta_path_ in pta_dir_path_list:
            if pta_path_.endswith("_ascend_pt"):
                pta_path = os.path.join(prof_base_path, pta_path_)
        if not pta_path:
            return "", ""
        dir_list = os.listdir(pta_path)
        if not dir_list:
            return pta_path, ""
        for prof_dir_name in dir_list:
            if prof_dir_name.startswith("PROF"):
                return pta_path, os.path.join(pta_path, prof_dir_name)
        return pta_path, ""

    @staticmethod
    def _get_csv_file_path(job_path):
        csv_file_path_glob = os.path.join(job_path, ConstManager.OP_SUMMARY_CSV)
        csv_file_paths = glob.glob(csv_file_path_glob)
        if not csv_file_paths or len(csv_file_paths) > 1 or not os.access(csv_file_paths[0], os.R_OK):
            utils.print_error_log("Failed to get %s. Please check the CSV "
                                  "summary file glob." % csv_file_path_glob)
            return ''
        return csv_file_paths[0]

    def acl_compile(self):
        """
        Compile acl op
        """
        utils.print_step_log("[%s] Compile testcase test code." % (os.path.basename(__file__)))
        utils.print_info_log('Start to compile %s.' % self.path)
        cmakelist_path = os.path.join(self.path, ConstManager.CMAKE_LIST_FILE_NAME)
        if not os.path.exists(cmakelist_path):
            utils.print_error_log(
                'There is no %s in %s. Please check the path for compile.' % (
                    ConstManager.CMAKE_LIST_FILE_NAME, self.path))
            raise utils.OpTestGenException(
                ConstManager.OP_TEST_GEN_INVALID_DATA_ERROR)

        # do cmake and make
        origin_path = os.path.realpath(os.getcwd())
        build_host_path = os.path.join(self.path, ConstManager.BUILD_INTERMEDIATES_HOST)
        utils.check_path_valid(build_host_path, True)
        os.chdir(build_host_path)
        compiler_option = '-DCMAKE_CXX_COMPILER=' + self._get_tool_chain()
        cmake_cmd = ['cmake', '../../..', compiler_option, '-DCMAKE_SKIP_RPATH=TRUE']
        cmd_str = "cd %s && %s && %s" % (build_host_path, " ".join(cmake_cmd), " ".join(['make']))
        utils.print_info_log("Compile command line: %s " % cmd_str)
        main_path = os.path.join(self.path, 'run', 'out', ConstManager.MAIN)
        try:
            self._execute_cmake_cmd(cmake_cmd)
        except utils.OpTestGenException as err:
            self.add_op_st_stage_result(op_status.FAILED, "compile_acl_code",
                                        None, cmd_str)
            if not os.path.exists(main_path):
                utils.print_error_log("Please check the env LD_LIBRARY_PATH or env NPU_HOST_LIB.")
                raise utils.OpTestGenException(ConstManager.ACL_COMPILE_ERROR) from err
        finally:
            pass
        if os.path.exists(main_path):
            os.chmod(main_path, stat.S_IRUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP)
        build_path = os.path.join(self.path, "build")
        if os.path.exists(build_path) and os.path.isdir(build_path):
            shutil.rmtree(build_path)
        utils.print_info_log('Finish to compile %s.' % self.path)
        os.chdir(origin_path)
        self.add_op_st_stage_result(op_status.SUCCESS, "compile_acl_code",
                                    None, cmd_str)

    def add_op_st_stage_result(self, status=op_status.FAILED,
                               stage_name=None, result=None, cmd=None):
        """
        add op st stage_result
        """
        stage_result = op_st_case_info.OpSTStageResult(
            status, stage_name, result, cmd)
        for case_report in self.report.report_list:
            case_report.trace_detail.add_stage_result(stage_result)

    def run(self):
        """
        Run acl op
        """
        main_path = os.path.join(self.path, 'run', 'out', ConstManager.MAIN)
        if not os.path.exists(main_path):
            utils.print_error_log(
                'There is no execute file "%s" in %s. Please check the path '
                'for running.' % (ConstManager.MAIN, os.path.dirname(main_path)))
            raise utils.OpTestGenException(
                ConstManager.OP_TEST_GEN_INVALID_DATA_ERROR)
        out_path = os.path.dirname(main_path)
        utils.check_path_valid(out_path, True)
        os.chdir(out_path)
        run_cmd = ['./' + ConstManager.MAIN]
        self._execute_run_command(out_path, run_cmd, main_path)

    def run_torch_api(self, op_name):
        """
        Run torch api
        """
        op_name = utils.fix_name_lower_with_under(op_name)
        test_file = ConstManager.TEST_PY.format(op_name=op_name)
        test_py_path = os.path.join(self.path, 'src', test_file)
        run_out_dir_path = os.path.dirname(os.path.join(self.path))
        utils.print_info_log('Start to run %s.' % test_py_path)
        if not os.path.exists(test_py_path):
            utils.print_error_log(
                'There is no execute file "%s" in %s. Please check the path '
                'for running.' % (test_file, os.path.dirname(test_py_path)))
            raise utils.OpTestGenException(
                ConstManager.OP_TEST_GEN_INVALID_DATA_ERROR)
        utils.check_path_valid(run_out_dir_path, isdir=True)
        src_path = os.path.dirname(test_py_path)
        utils.check_path_valid(src_path, True)
        os.chdir(run_out_dir_path)
        run_cmd = ['python3', test_py_path]
        self._execute_run_command(run_out_dir_path, run_cmd, test_file, run_mode='torch_api')

    @utils.get_execute_time('System performance data')
    def prof_run(self, out_path, run_cmd, run_mode):
        """
        use msprof to run main.
        :param out_path: path of binary main
        :param run_cmd: run command
        :param run_mode: run mode is acl or torch api
        :return:
        """
        toolkit_root_path = os.getenv(ConstManager.INSTALL_PATH)
        if not toolkit_root_path or not os.path.exists(toolkit_root_path):
            utils.print_error_log("Path of env install_path: "
                                  "%s does not exist" % toolkit_root_path)
            return
        if os.path.exists(toolkit_root_path):
            utils.print_info_log("Env install_path is " + toolkit_root_path)
        if not run_mode:
            self.run_msprof(out_path, toolkit_root_path)
        else:
            run_out_dir = os.path.join(out_path, 'run', 'out')
            self.run_msprof_py(run_out_dir, run_cmd, toolkit_root_path)

    def get_op_name_list(self):
        """
        get operator name list
        """
        op_name_list = []
        for report_elem in self.report.report_list:
            case_report = self.report.get_case_report(report_elem.case_name)
            if not case_report:
                utils.print_error_log("According case info in "
                                      "st_report.json is not found, please check")
                return []
            op_name = case_report.trace_detail.st_case_info.op_params.get(ConstManager.OP)
            if not op_name:
                utils.print_error_log("The op name got from st_report.json is empty. Please check")
                return []
            op_name_list.append(op_name)
        return op_name_list

    def run_msprof_py(self, out_path, run_cmd, toolkit_root_path):
        """
        run msprof.py to execute torch api
        """
        utils.print_info_log("It may take some time to run command line with getting profiling data. Please waitâ¦")
        utils.execute_command(run_cmd)
        prof_base_path = os.path.join(out_path, ConstManager.PROF)
        if not os.path.exists(prof_base_path):
            utils.print_error_log('Failed to collect profiling data.')
            raise utils.OpTestGenException(ConstManager.OP_TEST_GEN_INVALID_DATA_ERROR)
        utils.print_info_log('Collecting profiling data in %s successfully!.' % prof_base_path)
        utils.print_info_log('Start to Start analyzing data.')
        pta_path, prof_base_path = self._get_pta_and_prof_path(prof_base_path)
        job_path = self._get_job_path(pta_path)
        if not job_path:
            return
        # start to do export summary
        analyze_cmd = ['python3', toolkit_root_path + ConstManager.MSPROF_PYC_REL_PATH, 'import', '-dir',
                       prof_base_path]
        utils.print_info_log("Run command line: cd %s && %s " % (
            out_path, " ".join(analyze_cmd)))
        utils.execute_command(analyze_cmd)
        analyze_timeline_cmd = ['python3', toolkit_root_path + ConstManager.MSPROF_PYC_REL_PATH,
                                'export', 'timeline', '-dir', prof_base_path]
        utils.print_info_log("Run command line: cd %s && %s " % (
            out_path, " ".join(analyze_timeline_cmd)))
        utils.execute_command(analyze_timeline_cmd)
        op_name_list = self.get_op_name_list()
        csv_file = self._get_csv_file_path(job_path)
        self._get_op_case_result_and_show_data(csv_file, op_name_list)

    def run_msprof(self, out_path, toolkit_root_path):
        """
        run msporf to execute operator with calling ACL api
        """
        run_cmd = [toolkit_root_path + ConstManager.MSPROF_REL_PATH, '--application=./main',
                   '--aicpu=on', '--runtime-api=on', '--output=./' + ConstManager.PROF]
        utils.print_info_log("Run command line: cd %s && %s " % (
            out_path, " ".join(run_cmd)))
        utils.execute_command(run_cmd)
        utils.print_info_log('Finish to run main with msprof.')
        self.prof_analyze(os.path.join(out_path, ConstManager.PROF))

    def prof_analyze(self, prof_base_path):
        """
        do profiling analysis.
        :param prof_base_path: base path of profiling data: run/out/prof
        :return:
        """
        try:
            self._profiling_analysis(prof_base_path)
        except IOError:
            utils.print_error_log("Operate directory of profiling data failed")
        finally:
            pass

    def _execute_run_command(self, out_path, run_cmd, main_path, run_mode=''):
        get_performance_mode = False
        if self.advance_args:
            get_performance_mode = self.advance_args.get_performance_mode_flag()
        if get_performance_mode:
            utils.print_step_log("[%s] Get system performance data." % (os.path.basename(__file__)))
            self.prof_run(out_path, run_cmd, run_mode)
        else:
            utils.print_step_log("[%s] Start to execute testcase." % (os.path.basename(__file__)))
            utils.print_info_log("Run command line: cd %s && %s " % (
                out_path, " ".join(run_cmd)))
            main_run_start = time.time()
            utils.execute_command(run_cmd)
            main_run_end = time.time()
            utils.print_info_log('Testcase execute in %s, cost time: %f s.'
                                 % (self.soc_version, (main_run_end - main_run_start)))
            utils.print_info_log('Finish to run %s.' % main_path)

    def _get_tool_chain(self):
        compile_options = {}
        acl_mode = None
        if self.advance_args is not None:
            compile_options = self.advance_args.get_compile_options()
            acl_mode = self.advance_args.get_mode_flag()

        config_arch = ""
        config_tool_chain = ""
        if compile_options:
            config_arch = compile_options.get(ConstManager.HOST_ARCH)
            config_tool_chain = compile_options.get(ConstManager.TOOL_CHAIN)

        if not config_arch \
                or acl_mode != ConstManager.ONLY_GEN_WITHOUT_RUN_ACL_PROJ:
            return ConstManager.C_PLUS_PLUS_COMPILER

        real_arch = platform.machine()
        if real_arch.lower() == config_arch.lower():
            tool_chain = config_tool_chain if config_tool_chain else ConstManager.C_PLUS_PLUS_COMPILER
        else:
            if config_tool_chain:
                tool_chain = config_tool_chain
            else:
                utils.print_error_log(
                    'the toolchain must be correctly configured '
                    'in the cross compilation scenario.')
                raise utils.OpTestGenException(ConstManager.OP_TEST_GEN_INVALID_PATH_ERROR)
        return tool_chain

    def _prof_get_op_name_from_report(self, run_result_list):
        op_name_list = []
        for line in run_result_list:
            if len(line.split("  ")) != ConstManager.RESULT_FILE_COLUMN_NUM:
                continue
            case_name = line.split("  ")[ConstManager.RESULT_FILE_CASE_NAME_COLUMN_NUM]
            case_report = self.report.get_case_report(case_name)
            if not case_report:
                utils.print_error_log("According case info in "
                                      "st_report.json is not found, please check")
                return []
            op_name = case_report.trace_detail.st_case_info.op_params.get(ConstManager.OP)
            if not op_name:
                utils.print_error_log("The op name got from st_report.json is empty. Please check")
                return []
            op_name_list.append(op_name)
        return op_name_list

    def _get_op_case_result_and_show_data(self, csv_file, op_name_list):
        # start to get op time from csv summary files
        op_case_info = self._prof_get_op_case_info_from_csv_file(
            csv_file, op_name_list)
        if not op_case_info:
            utils.print_error_log(
                "Failed to get the time result from CSV files. Please check.")
            return
        # show op case data.
        display_op_case_info(op_case_info)

        # start to write op time into st report
        for idx, report_obj in enumerate(self.report.report_list):
            if idx >= len(op_case_info):
                utils.print_error_log("Length of report list"
                                      " exceeds length of time result.")
                break
            prof_result = op_st_case_info.OpSTStageResult(
                op_status.SUCCESS,
                "profiling_analysis",
                op_case_info[idx][ConstManager.TASK_DURATION_INDEX] + ConstManager.PROF_TIME_UNIT)
            report_obj.trace_detail.add_stage_result(prof_result)

    def _read_result_txt(self):
        result_txt = os.path.join(self.path, ConstManager.RUN_OUT, 'result_files',
                                  'result.txt')
        if not os.path.exists(result_txt) or \
                not os.access(result_txt, os.R_OK):
            utils.print_error_log("Failed to get %s. Please check "
                                  "run result." % result_txt)
            return []

        txt = utils.read_file(result_txt)
        run_result_list = txt.split('\n')
        if len(run_result_list) <= ConstManager.NULL_RESULT_FILE_LINE_NUM:
            utils.print_error_log("Only got less than or equal to"
                                  " one line in result.txt, please check "
                                  "%s" % result_txt)
            return []
        run_result_list.pop()
        return run_result_list

    def _get_data_from_csv_summary(self, job_path, run_result_list):
        csv_file = self._get_csv_file_path(job_path)
        if not csv_file:
            return
        # start to get op names from report
        op_name_list = self._prof_get_op_name_from_report(run_result_list)
        if not op_name_list:
            utils.print_error_log(
                "Failed to get the op name from the st report. Please check.")
            return
        if op_name_list:
            utils.print_info_log(
                "Get op names from report: %s" % ','.join(op_name_list))

        # start to get op time from csv summary files and save in report
        self._get_op_case_result_and_show_data(csv_file, op_name_list)

    def _profiling_analysis(self, prof_base_path):
        job_path = self._get_job_path(prof_base_path)
        if not job_path:
            return
        # start to read result.txt and get op execute times
        run_result_list = self._read_result_txt()
        if not run_result_list:
            return
        # start to do export summary
        self._get_data_from_csv_summary(job_path, run_result_list)


def _get_op_case_info_list(column_line_list, row_list, op_name_list, op_case_info_list):
    each_case_info_list = []
    task_id_column_idx = column_line_list.index(
        ConstManager.OP_CASE_INFO_IN_CSV_COLUMN_NAME_LIST[
            ConstManager.TASK_ID_INDEX])
    op_time_column_idx = column_line_list.index(
        ConstManager.OP_CASE_INFO_IN_CSV_COLUMN_NAME_LIST[
            ConstManager.TASK_DURATION_INDEX])
    op_name_column_idx = column_line_list.index(
        ConstManager.OP_CASE_INFO_IN_CSV_COLUMN_NAME_LIST[
            ConstManager.OP_NAME_INDEX])
    task_type_column_idx = column_line_list.index(
        ConstManager.OP_CASE_INFO_IN_CSV_COLUMN_NAME_LIST[
            ConstManager.TASK_TYPE_INDEX])
    row_list_sorted = sorted(row_list,
                             key=lambda x: int(x[task_id_column_idx]))

    op_idx = 0
    for _, row in enumerate(row_list_sorted):
        if op_idx == len(op_name_list):
            break
        if op_name_list[op_idx] in os.path.split(
                row[op_name_column_idx])[1]:
            op_time = row[op_time_column_idx]
            op_type = row[op_name_column_idx]
            op_idx = op_idx + 1
            each_case_info_list.extend([op_type,  row[task_type_column_idx],
                                        op_time.strip('"')])
            op_case_info_list.append(each_case_info_list)
            each_case_info_list = []
    return op_case_info_list


def get_op_case_info_from_csv_file(csv_file, op_name_list):
    """
    get op case info from csv file
    """
    op_case_info_list = []
    with open(csv_file, 'r') as csv_file_obj:
        try:
            import csv
        except ImportError as import_error:
            utils.print_error_log(
                "[acl_op_runner] Unable to import the CSV file: %s. Please check."
                % str(import_error))
            return op_case_info_list
        finally:
            pass
        row_list = list(csv.reader(csv_file_obj))
        if not row_list:
            utils.print_error_log("The CSV summary file is empty. Please check.")
            return op_case_info_list
        column_line_list = row_list.pop(0)  # remove column line
        for each_case_iter in ConstManager.OP_CASE_INFO_IN_CSV_COLUMN_NAME_LIST:
            if each_case_iter not in column_line_list:
                utils.print_error_log("%s not found in the column line. Please check."
                                      % each_case_iter)
                return op_case_info_list
        op_case_info_list = _get_op_case_info_list(
            column_line_list, row_list, op_name_list, op_case_info_list)
    return op_case_info_list


def display_op_case_info(op_case_info_list):
    """
    display_op_case_info
    """
    utils.print_info_log(
        '---------------------------------------------------')
    utils.print_info_log(
        'OP Type \t Task Type \t Task Duration(us)')
    utils.print_info_log(
        '---------------------------------------------------')
    op_case_count = len(op_case_info_list)
    if op_case_count <= ConstManager.SHOW_DATA_UPPER_LIMLT:
        for i in range(op_case_count):
            utils.print_info_log('%s \t %s \t %f' % (
                op_case_info_list[i][ConstManager.OP_NAME_INDEX], op_case_info_list[i][ConstManager.TASK_TYPE_INDEX],
                float(op_case_info_list[i][ConstManager.TASK_DURATION_INDEX])))
    else:
        for i in range(ConstManager.SHOW_TOP_TEN_DATA):
            utils.print_info_log('%s \t %s \t %f' % (
                op_case_info_list[i][ConstManager.OP_NAME_INDEX], op_case_info_list[i][ConstManager.TASK_TYPE_INDEX],
                float(op_case_info_list[i][ConstManager.TASK_DURATION_INDEX])))
        utils.print_info_log('...   \t   ...   \t   ...')
        for i in range(op_case_count - ConstManager.SHOW_LAST_TEN_DATA, op_case_count):
            utils.print_info_log('%s \t %s \t %f' % (
                op_case_info_list[i][ConstManager.OP_NAME_INDEX], op_case_info_list[i][ConstManager.TASK_TYPE_INDEX],
                float(op_case_info_list[i][ConstManager.TASK_DURATION_INDEX])))
