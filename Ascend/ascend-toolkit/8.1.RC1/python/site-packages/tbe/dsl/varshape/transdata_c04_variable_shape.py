#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
transdata c04 variable shape
"""
from tbe.common.utils.errormgr import get_error_message
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation
from tbe import tvm


DIM_3 = 3
DIM_4 = 4
INT64 = "int64"


@register_variable("transdatac04")
def variable_shape(inputs):
    """
    Only support C04 NCHW->FZC04, FZC04->NCHW
    """
    def is_const_model(_input):
        return -1 not in _input


    def init_shape(_input):
        # Dynamic scence should fill dim
        result = []
        for k, v in enumerate(_input):
            result.append(v if v != -1 else operation.var_inner(f"_dim_{k}", [1, None], dtype=INT64))
        return result


    def src_infer_dst(_input):
        n, c, h = _input
        c4 = 4
        hc4 = c4 * h
        t1 = (hc4 + 15) / 16
        t0 = 16
        n1 = (n + 15) / 16
        n0 = 16
        return [t1, n1, n0, t0]


    def infershape(input_shape, output_shape, is_forward):
        if not is_const:
            input_shape = init_shape(input_shape)
            output_shape = src_infer_dst(input_shape)

        # Adapt backwardScene
        if not is_forward:
            input_shape, output_shape = output_shape, input_shape
        return input_shape, output_shape


    is_forward = inputs[0].get("is_forward")

    if len(inputs) != DIM_3:
        dict_args = {"errCode": "E80001", "detailed_cause": "inputs' size error"}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    src_shape = inputs[0].get("shape")
    dst_shape = inputs[1]
    axes_map = inputs[2]
    is_const = is_const_model(src_shape)

    # Adapt backwardScene
    if not is_forward:
        src_shape, dst_shape = dst_shape, src_shape
        axes_map = {(3, 0): (1, 2, 3), (1, 2): 0}

    current_compute = operation.get_context().get_current_compute()
    category = inputs[0].get("transdata_category", None)
    if category is None:
        dict_args = {"errCode": "E80001", "detailed_case": "category is None"}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    current_compute.add("_transdata_category", category)
    return infershape(src_shape, dst_shape, is_forward)
