#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2022-2023 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
pooling with arg variable shape
"""
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation

INPUT_FORMAT = "_input_format"
FORMAT_MAPPING = {
    0: "NC1HWC0",
    1: "NDC1HWC0",
    2: "NCHW",
    3: "NHWC"
}


def _normalize_value(inputs: list, prefix: str, real_range=(0, None)):
    result = []
    for _idx, _value in enumerate(inputs):
        if isinstance(_value, list):
            _var = []
            for _ilist, _vlist in enumerate(_value):
                tmp_var = _vlist if _vlist != -1 else operation.var_inner("{}_{}".format(prefix, _idx * 2 + _ilist),
                                                                          real_range)
                _var.append(tmp_var)
        else:
            _var = _value if _value != -1 else operation.var_inner("{}_{}".format(prefix, _idx), real_range)
        result.append(_var)
    return result


@register_variable("pooling_with_arg")
def variable_shape(inputs):
    # type: (list) -> list
    input_shape = _normalize_value(inputs[0], "_input_dim", (1, None))

    window_axes = _normalize_value(inputs[1], "_axis")
    window_dimensions = _normalize_value(inputs[2], "_dimension", (1, None))
    window_strides = _normalize_value(inputs[3], "_stride", (1, None))
    window_paddings = _normalize_value(inputs[4], "_padding")
    window_dilations = _normalize_value(inputs[5], "_dilation")

    input_format = FORMAT_MAPPING.get(operation.get_context().get(INPUT_FORMAT))
    if input_format == "NC1HWC0":
        operation.get_context().get_current_compute().add("_fm_n", input_shape[0])
        operation.get_context().get_current_compute().add("_fm_c1", input_shape[1])
        operation.get_context().get_current_compute().add("_fm_h", input_shape[2])
        operation.get_context().get_current_compute().add("_fm_w", input_shape[3])
        operation.get_context().get_current_compute().add("_fm_c0", input_shape[4])
    elif input_format == "NCHW":
        operation.get_context().get_current_compute().add("_fm_h", input_shape[1])
        operation.get_context().get_current_compute().add("_fm_w", input_shape[2])

    operation.get_context().get_current_compute().add("_axis", window_axes)
    operation.get_context().get_current_compute().add("_kh", window_dimensions[0])
    operation.get_context().get_current_compute().add("_kw", window_dimensions[1])

    operation.get_context().get_current_compute().add("_stride_h", window_strides[0])
    operation.get_context().get_current_compute().add("_stride_w", window_strides[1])

    operation.get_context().get_current_compute().add("_padding_top", window_paddings[0][0])
    operation.get_context().get_current_compute().add("_padding_bottom", window_paddings[0][1])
    operation.get_context().get_current_compute().add("_padding_left", window_paddings[1][0])
    operation.get_context().get_current_compute().add("_padding_right", window_paddings[1][1])

    operation.get_context().get_current_compute().add("_dilation_h", window_dilations[0])
    operation.get_context().get_current_compute().add("_dilation_w", window_dilations[1])

    operation.get_context().get_current_compute().add("_compute_calculate_mode", inputs[6])

    is_static = operation.get_op_mode() == "static"
    if is_static:
        return inputs[:-1]

    return [input_shape, window_axes, window_dimensions, window_strides, window_paddings, window_dilations]
