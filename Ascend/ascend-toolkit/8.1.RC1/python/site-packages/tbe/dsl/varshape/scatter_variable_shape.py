#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
scatter variable shape
"""
from itertools import chain

from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation


@register_variable("scatter")
def variable_shape(inputs):
    # type: (list) -> list
    var = inputs[0]
    indices = inputs[1]
    update = inputs[2]

    scatter_mode = operation.get_context().get("_scatter_mode")

    if scatter_mode == "scatter":
        rank_info = 1
    else:
        rank_info = indices.get("shape")[-1]

    current_compute = operation.get_context().get_current_compute()
    current_compute.add("_axis", 0)
    current_compute.add("_rank", rank_info)
    current_compute.add("_var_shape", var.get("shape"))
    current_compute.add("_indices_shape", indices.get("shape"))
    current_compute.add("_update_shape", update.get("shape"))
    if (0 in var.get("shape")) or (0 in indices.get("shape")) or \
            (0 in update.get("shape")):
        current_compute.add("_zero_shape", True)
    else:
        current_compute.add("_zero_shape", False)
    var_shape = _get_var_shape(var, "_var")
    indices_shape = _get_var_shape(indices, "_indices")
    update_shape = _get_var_shape(update, "_update")

    return var_shape, indices_shape, update_shape


def _get_var_shape(params, name):
    res = []
    for index, value in enumerate(params.get("shape")):
        _var = None
        if value == -1:
            _var = operation.var_inner(name + "_dim_{}".format(index), params["range"][index], "int64")
            res.append(_var)
        else:
            res.append(value)

    return res
