#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
segment variable shape
"""
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation


@register_variable("segment")
def variable_shape(inputs):
    # type: (list) -> list
    x_info = inputs[0]
    segments_ids_info = inputs[1]
    num_segments_info = inputs[2]
    x_dtype = x_info.get("dtype")
    one_block = 8
    one_repeat = 64
    if x_dtype == "float16":
        one_block = 16
        one_repeat = 128
    elif x_dtype == "bfloat16":
        one_block = 16
        one_repeat = 64
    current_compute = operation.get_context().get_current_compute()
    if (0 in x_info.get("shape")) or (0 in segments_ids_info.get("shape")) or \
            (0 in x_info.get("range")) or (0 in segments_ids_info.get("range")):
        current_compute.add("_zero_shape", True)
    else:
        current_compute.add("_zero_shape", False)

    x_shape = []
    for index, value in enumerate(x_info.get("shape")):
        _var = None
        if index == 1:
            last_range = x_info.get("range")[1]
            if last_range[0] < one_block:
                current_compute.add("_is_small_1_block", True)
            elif last_range[0] <= one_repeat:
                current_compute.add("_is_small_1_repeat", True)
            else:
                current_compute.add("_is_more_1_repeat", True)
        if value == -1:
            _var = operation.var_inner("_x_dim_{}".format(index), x_info.get("range")[index], "int64")
            x_shape.append(_var)
        else:
            x_shape.append(value)
    if num_segments_info.get("shape") is not None:
        _num = operation.var_inner("_num_segments_{}".format(0), num_segments_info.get("range")[0], "int64")
    else:
        _num = num_segments_info.get("const_value")

    is_static = operation.get_op_mode() == "static"
    if "const_value" in segments_ids_info or is_static:
        segments_ids_shape = list(segments_ids_info.get("shape"))
    else:
        segments_ids_shape = [x_shape[0]]
    return [x_shape, segments_ids_shape, _num]
