#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2022-2023 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
pooling variable shape
"""
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation

UNKNOWN_DIM_VALUE = -1


@register_variable("pooling")
def variable_shape(inputs):
    # type: (list) -> list
    """
    variable shape for pooling ops
    """
    shape = inputs[0].get("shape")
    shape_range = inputs[0].get("range")
    strategy = inputs[0].get("strategy")
    dimensions = inputs[0].get("window_dimensions")
    strides = inputs[0].get("window_strides")
    dilations = inputs[0].get("window_dilations")
    paddings = inputs[0].get("padding_dimensions")
    mode = inputs[0].get("mode")
    window_axis_len = len(strategy)

    variabled_shape = []
    for i, (d, r) in enumerate(zip(shape, shape_range)):
        if d == UNKNOWN_DIM_VALUE:
            cur_var = operation.var_inner(f"_dim_{i}", r)
            variabled_shape.append(cur_var)
        else:
            variabled_shape.append(d)

    variable_shape_out = [variabled_shape for _ in range(len(inputs))]

    current_operator = operation.get_context()
    if current_operator:
        current_compute = current_operator.get_current_compute()
        if current_compute:
            current_compute.add("_mode", mode)
            current_compute.add("_strategy", strategy)
            exist_window_info = dimensions is not None and strides is not None and \
                dilations is not None and paddings is not None
            if exist_window_info:
                window_info = [
                    dimensions[:], strides[:], dilations[:],
                    [item for sub_list in paddings for item in sub_list]
                ]
                current_compute.add("_window_info", window_info)

    if dimensions is None:
        inputs[0]["window_dimensions"] = [operation.var_inner(f"_dimension_{i}") for i in range(window_axis_len)]
    if strides is None:
        inputs[0]["window_strides"] = [operation.var_inner(f"_stride_{i}") for i in range(window_axis_len)]
    if dilations is None:
        inputs[0]["window_dilations"] = [operation.var_inner(f"_dilation_{i}") for i in range(window_axis_len)]
    if paddings is None:
        inputs[0]["padding_dimensions"] = [
            [operation.var_inner(f"_padding_{i * 2}"),
             operation.var_inner(f"_padding_{i * 2 + 1}")] for i in range(window_axis_len)
        ]

    return variable_shape_out
