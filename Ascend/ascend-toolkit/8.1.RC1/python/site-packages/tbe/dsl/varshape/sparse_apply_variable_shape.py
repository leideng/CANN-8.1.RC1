#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2022-2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
sparse apply variable shape
"""
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation


@register_variable("sparse_apply")
def variable_shape(inputs):
    def get_inputs_by_type(inputs, input_type):
        res = []
        for _in in inputs:
            if _in.get("input_shape_type") == input_type:
                res.append(_in)
        return res

    var_inputs = get_inputs_by_type(inputs, 0)
    grad_inputs = get_inputs_by_type(inputs, 1)
    indices_inputs = get_inputs_by_type(inputs, 2)

    if operation.get_op_mode() == "dynamic":
        var_row_value = operation.var_inner("_var_row_value", var_inputs[0].get("range")[0], dtype="int64")
        var_col_value = operation.var_inner("_var_col_value", var_inputs[0].get("range")[1], dtype="int64")
        indices_row_value = operation.var_inner("_indices_row_value", indices_inputs[0].get("range")[0], dtype="int64")

    input_shape_list = []
    for _in in inputs:
        _in_shape = []
        for _idx, dim_value in enumerate(_in.get("shape")):
            if dim_value == -1:
                if _idx == 0:
                    if _in.get("input_shape_type") == 0:
                        _in_shape.append(var_row_value)
                    elif _in.get("input_shape_type") == 1 or _in.get("input_shape_type") == 2:
                        _in_shape.append(indices_row_value)
                else:
                    _in_shape.append(var_col_value)
            else:
                _in_shape.append(dim_value)
        input_shape_list.append(_in_shape)
    return input_shape_list
