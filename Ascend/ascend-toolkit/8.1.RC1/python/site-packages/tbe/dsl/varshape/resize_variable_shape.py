#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2022. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the Apache License Version 2.0.
You may not use this file except in compliance with the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
Apache License for more details at
http://www.apache.org/licenses/LICENSE-2.0

positive resize variable shape
"""
from tbe.common.utils.errormgr import get_error_message
from tbe.common.utils.varshape.variable_shape import register_variable
from tbe.dsl.base import operation


@register_variable("resize")
def variable_shape(inputs):
    # type: (list) -> list
    if len(inputs) <= 1:
        dict_args = {"errCode": "E90001", "detailed_cause": "input numbers error, it should be 2!"}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    def _gen_image_varshape():
        tmp_image_out = []
        image_shape = image_tensor.get("shape")
        image_range = image_tensor.get("range")
        for idx, val in enumerate(image_shape):
            if val == -1:
                _var = operation.var_inner(f"_image_dim_{idx}", image_range[idx])
                tmp_image_out.append(_var)
            else:
                tmp_image_out.append(val)
        return tmp_image_out

    image_tensor = inputs[0]
    image_out = _gen_image_varshape()

    # used by tiling case
    cur_compute = operation.get_context().get_current_compute()
    cur_mode = image_tensor.get("mode")
    cur_compute.add("_mode", cur_mode)

    def _gen_size_varshape():
        tmp_size_out = []
        for idx, val in enumerate(size_list):
            if val == -1:
                if cur_mode == "first_hw":  # different from pure_copy
                    range_beg = 2
                    _var_size = operation.var_inner(f'_size_dim_{idx}', (range_beg, None))
                else:
                    _var_size = operation.var_inner(f'_size_dim_{idx}', (1, None))
                tmp_size_out.append(_var_size)
            else:
                tmp_size_out.append(val)
        return tmp_size_out

    size_list = inputs[1]
    size_out = _gen_size_varshape()

    return [image_out, size_out]
