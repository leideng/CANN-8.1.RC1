# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
reduce record
"""

import functools

from tbe.dsl.base import operation
from tbe.dsl.base.record import action
from tbe.dsl.base.record.records import list_record
from tbe.dsl.base.record.records import tensor

from . import common


def reduce(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0 = args[0]
        r_axis = list(args[1]) if isinstance(args[1], (tuple, list)) else [args[1]]

        if len(args) > 2:
            keepdims = args[2]
        else:
            keepdims = kwargs.get("keepdims", False)

        x_shape = x0.shape
        x_shape_len = len(x_shape)

        for i, x, in enumerate(r_axis):
            if x < 0:
                r_axis[i] = x + x_shape_len

        if isinstance(args[1], list_record.ListRecord):
            r_axis_wrap = args[1]
        else:
            r_axis_wrap = list_record.ListRecord(r_axis)

        new_args = list(args)
        new_args[1] = r_axis_wrap

        shape = []
        for i, x in enumerate(x_shape):
            if i in r_axis:
                if keepdims:
                    shape.append(1)
            else:
                shape.append(x)

        r_value = tensor.ReduceTensor(shape, x0.dtype, r_axis_wrap)
        r_value.input_tensors = [x0]

        operation.get_context().get("_actions").append(action.Action(func, tuple(new_args), kwargs, r_value))

        return r_value
    return inner
