# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
elewise record
"""

import functools
import inspect

from tbe.dsl.base import operation
from tbe.dsl.base.record import action
from tbe.dsl.base.record.records import tensor

from . import common


def single(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0 = args[0]
        shape, dtype = x0.shape, x0.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = [x0]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def single_scalar(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, s0 = args[0], args[1]
        shape, dtype = x0.shape, x0.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)

        input_tensors = [x0]
        if isinstance(s0, tensor.TensorSlice):
            input_tensors.append(s0.get_tensor())
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def binary(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, x1 = args[0], args[1]
        shape, dtype = x0.shape, x0.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = [x0, x1]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def binary_scalar(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, x1, s0 = args[0], args[1], args[2]
        shape, dtype = x0.shape, x0.dtype

        func_name = func.__name__
        if func_name == "vaxpy":
            dtype = x1.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)

        input_tensors = [x0, x1]
        if isinstance(s0, tensor.TensorSlice):
            input_tensors.append(s0.get_tensor())
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def triple(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, x1, x2 = args[0], args[1], args[2]
        shape, dtype = x0.shape, x0.dtype

        func_name = func.__name__
        if func_name == "vmla":
            dtype = x2.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = [x0, x1, x2]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def vcmp(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        lhs, rhs = args[0], args[1]

        if len(args) > 3:
            mode = args[3]
        else:
            mode = kwargs.get("mode", "bool")

        shape = lhs.shape
        dtype = "uint1" if mode == "bit" else "bool"

        input_tensors = [lhs]
        if isinstance(rhs, tensor.Tensor):
            input_tensors.append(rhs)
        elif isinstance(rhs, tensor.TensorSlice):
            input_tensors.append(rhs.get_tensor())

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def vsel(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        condition = args[0]
        lhs, rhs = args[1], args[2]
        if isinstance(lhs, tensor.Tensor):
            dtype = lhs.dtype
        elif isinstance(rhs, tensor.Tensor):
            dtype = rhs.dtype
        else:
            dtype = "float16"

        shape = condition.shape

        input_tensors = [condition]
        for x in [lhs, rhs]:
            if isinstance(x, tensor.Tensor):
                input_tensors.append(x)
            elif isinstance(x, tensor.TensorSlice):
                input_tensors.append(x.get_tensor())

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def vcmpsel(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        def get_param(index, key):
            if len(args) > index:
                return args[index]

            if key in kwargs:
                return kwargs.get(key)

            args_count = len(inspect.getargspec(func).args)
            defalut_values = inspect.getargspec(func).defaults
            return defalut_values[index - args_count]

        lhs = args[0]
        rhs = get_param(1, "rhs")
        slhs = get_param(3, "slhs")
        srhs = get_param(4, "srhs")

        shape, dtype = lhs.shape, lhs.dtype

        input_tensors = [lhs]
        for x in [rhs, slhs, srhs]:
            if isinstance(x, tensor.Tensor):
                input_tensors.append(x)
            elif isinstance(x, tensor.TensorSlice):
                input_tensors.append(x.get_tensor())

        r_value = tensor.ElewiseTensor(shape, dtype)
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def vlrelu(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0 = args[0]
        shape, dtype = x0.shape, x0.dtype

        if len(args) > 1:
            alpha = args[1]
        else:
            alpha = kwargs.get("alpha", 0)

        r_value = tensor.ElewiseTensor(shape, dtype)

        input_tensors = [x0]
        if isinstance(alpha, tensor.TensorSlice):
            input_tensors.append(alpha.get_tensor())
        r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def clip(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, s0, s1 = args[0], args[1], args[2]
        shape, dtype = x0.shape, x0.dtype

        r_value = tensor.ElewiseTensor(shape, dtype)

        input_tensors = [x0]
        for x in [s0, s1]:
            if isinstance(x, tensor.TensorSlice):
                input_tensors.append(x.get_tensor())
            r_value.input_tensors = input_tensors

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner
