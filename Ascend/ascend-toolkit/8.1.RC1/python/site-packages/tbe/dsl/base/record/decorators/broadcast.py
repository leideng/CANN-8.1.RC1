# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
broadcast record
"""

import functools

from tbe.dsl.base import operation
from tbe.dsl.base.record.actions import broadcast_action
from tbe.dsl.base.record.records import list_record
from tbe.dsl.base.record.records import tensor

from . import common


def broadcast(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        var = args[0]

        shape = args[1]
        if isinstance(shape, (list, tuple)):
            shape = list_record.ListRecord(shape)

        if len(args) > 2:
            output_dtype = args[2]
        else:
            output_dtype = kwargs.get("output_dtype")

        if isinstance(var, tensor.Tensor):
            dtype = var.dtype
        elif output_dtype is not None:
            dtype = output_dtype
        elif hasattr(var, "dtype"):
            dtype = var.dtype
        elif isinstance(var, float):
            dtype = "float16"
        else:
            dtype = "int32"

        r_value = tensor.BroadcastTensor(shape, dtype)
        if isinstance(var, tensor.Tensor):
            r_value.input_tensors = [var]
        elif isinstance(var, tensor.TensorSlice):
            r_value.input_tensors = [var.get_tensor()]

        operation.get_context().get("_actions").append(broadcast_action.BroadcastAction(func, args, kwargs, r_value))

        return r_value
    return inner


def broadcast_shapes(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        shape1, shape2, target_shape = func(*args, **kwargs)

        shape1 = list_record.ListRecord(shape1)
        shape2 = list_record.ListRecord(shape2)
        target_shape = list_record.ListRecord(target_shape)

        r_values = [shape1, shape2, target_shape]
        brc_shapes_action = broadcast_action.BrcShapesAction(func, args, kwargs, r_values)

        operation.get_context().get("_actions").append(brc_shapes_action)

        return shape1, shape2, target_shape
    return inner
