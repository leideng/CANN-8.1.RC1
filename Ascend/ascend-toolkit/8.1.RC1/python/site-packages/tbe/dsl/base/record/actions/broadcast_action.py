# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
broadcast action
"""

from tbe.dsl.base.record import action
from tbe.dsl.base.record.records import list_record
from tbe.dsl.base.record.records import shape_record
from tbe.dsl.base.record.records import tensor


class BroadcastAction(action.Action):
    def __init__(self, func, args, kwargs, r_values):
        super().__init__(func, args, kwargs, r_values)

        self._var = args[0]
        self._shape = args[1]
        self._output_dtype = args[2] if len(args) > 2 else kwargs.get("output_dtype")

        self._r_value = r_values

    def execute(self):
        var = self._var
        if isinstance(self._var, tensor.Tensor):
            var = self._var.get_ori()

        shape = self._shape
        if isinstance(shape, shape_record.ShapeRecord):
            shape = shape.get_tensor().get_ori().shape
        elif isinstance(shape, list_record.ListRecord):
            shape = shape.get_ori()

        args = [var, shape]
        kwargs = {"output_dtype": self._output_dtype}

        r_tvm_tensor = self._func(*args, **kwargs)

        self._r_value.set_ori(r_tvm_tensor)


class BrcShapesAction(action.Action):
    def __init__(self, func, args, kwargs, r_values):
        super().__init__(func, args, kwargs, r_values)

        self._r_shape1 = r_values[0]
        self._r_shape2 = r_values[1]
        self._brc_shape = r_values[2]

    def execute(self):
        args = list(self._args)

        shape1, shape2 = args[0], args[1]

        shape1 = shape1.get_tensor().get_ori().shape
        shape2 = shape2.get_tensor().get_ori().shape

        args[0] = shape1
        args[1] = shape2

        r_shape1, r_shape2, brc_shape = self._func(*args, **self._kwargs)

        self._r_shape1.set_ori(r_shape1)
        self._r_shape2.set_ori(r_shape2)
        self._brc_shape.set_ori(brc_shape)
