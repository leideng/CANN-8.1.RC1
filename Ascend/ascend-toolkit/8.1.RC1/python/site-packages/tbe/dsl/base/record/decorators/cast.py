# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
cast record
"""

import functools

from tbe.dsl.base import operation
from tbe.dsl.base.record import action
from tbe.dsl.base.record.records import tensor

from . import common


def cast_to(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0, dtype = args[0], args[1]
        shape = x0.shape

        r_value = tensor.CastTensor(shape, dtype)
        r_value.input_tensors = [x0]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def cast_tensor_dtype(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0 = args[0]
        if len(args) > 1:
            dst_dtype = args[1]
        elif "dst_dtype" in kwargs:
            dst_dtype = kwargs.get("dst_dtype")
        else:
            dst_dtype = "int32"

        shape, dtype = x0.shape, dst_dtype

        r_value = tensor.CastTensor(shape, dtype)
        r_value.input_tensors = [x0]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner


def round_d(func):
    @common.route(func)
    @functools.wraps(func)
    def inner(*args, **kwargs):
        x0 = args[0]
        shape = x0.shape
        dtype = "int32"

        r_value = tensor.CastTensor(shape, dtype)
        r_value.input_tensors = [x0]

        operation.get_context().get("_actions").append(action.Action(func, args, kwargs, r_value))

        return r_value
    return inner
