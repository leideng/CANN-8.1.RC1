# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
tensor record
"""

from tbe.common.utils.errormgr import get_error_message
from tbe.dsl.base import operation
from tbe.dsl.base.record import record
from tbe.dsl.base.record.records import list_record
from tbe.dsl.base.record.records import shape_record


class Tensor(record.Record):
    def __init__(self, shape, dtype):
        self._shape = self._get_shape(shape)
        self._dtype = dtype
        self._tvm_tensor = None
        self._input_tensors = []

    def __getitem__(self, indices):
        return TensorSlice(self, indices)

    @property
    def shape(self):
        return self._shape

    @property
    def dtype(self):
        return self._dtype

    @property
    def input_tensors(self):
        return self._input_tensors

    @input_tensors.setter
    def input_tensors(self, tensors):
        self._input_tensors = tensors

    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.UNKNOWN

    def get_ori(self):
        return self._tvm_tensor

    def set_ori(self, x):
        self._tvm_tensor = x

    def _get_shape(self, shape):
        if isinstance(shape, list_record.ListRecord):
            shape = shape.get_ori()
        shape = shape_record.ShapeRecord(shape, self)

        return shape


class Placeholder(Tensor):
    def __init__(self, x, name, attrs=None):
        super().__init__(x["shape"], x["dtype"])

        self._x = x
        self._name = name
        self._attrs = attrs if attrs else {}

        operation.start_record()

    @property
    def ori_input(self):
        return self._x

    @property
    def name(self):
        return self._name

    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.PLACEHOLDER


class ElewiseTensor(Tensor):
    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.ELEWISE


class CastTensor(Tensor):
    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.CAST


class BroadcastTensor(Tensor):
    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.BROADCAST


class ReduceTensor(Tensor):
    def __init__(self, shape, dtype, reduce_axes):
        super().__init__(shape, dtype)

        self._reduce_axes = reduce_axes

    @property
    def reduce_axes(self):
        return self._reduce_axes

    @classmethod
    def get_compute_type(cls):
        from tbe.dsl.unify_schedule.constants import ComputeType
        return ComputeType.REDUCE


class TensorSlice(record.Record):
    def __init__(self, tensor, indices):
        if not isinstance(indices, tuple):
            indices = (indices,)

        self._tensor = tensor
        self._indices = indices

    @property
    def dtype(self):
        return self._tensor.dtype

    def get_ori(self):
        return self._tensor.get_ori()[self._indices]

    def set_ori(self, x):
        dict_args = {}
        dict_args["errCode"] = "E90001"
        dict_args["detailed_cause"] = "Set ori is not supported in tensor slice."
        raise RuntimeError(dict_args, get_error_message(dict_args))

    def get_tensor(self):
        return self._tensor
