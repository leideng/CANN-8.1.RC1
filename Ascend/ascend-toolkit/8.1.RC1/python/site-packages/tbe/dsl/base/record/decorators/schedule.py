# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
schedule record decorator
"""

from decorator import decorator
from tbe.dsl.base import operation
from tbe.dsl.base.record import rerun


class ScheduleRecord:
    def __init__(self, outs, option):
        self._outs = outs
        self._option = option

    @property
    def outs(self):
        return self._outs

    @property
    def option(self):
        return self._option


@decorator
def schedule(func, *args, **kwargs):
    if not operation.in_record():
        return func(*args, **kwargs)

    outs = args[0]

    if len(args) > 1:
        option = args[1]
    else:
        option = kwargs.get("option")

    sch = ScheduleRecord(outs, option)
    operation.get_context().add("_schedule_record", sch)

    return sch


@decorator
def build(func, *args, **kwargs):
    if not operation.in_record():
        return func(*args, **kwargs)

    sch = operation.get_context().get("_schedule_record")

    if len(args) > 1:
        config_map = args[1]
    else:
        config_map = kwargs.get("config_map")

    operation.start_rerun()

    return rerun.rerun(sch, config_map)
