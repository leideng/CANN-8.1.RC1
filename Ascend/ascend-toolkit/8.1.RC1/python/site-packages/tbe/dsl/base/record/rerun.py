#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
rerun interface, manager
"""

import abc

from tbe.dsl.base import operation


class ReRun(abc.ABC):
    def __init__(self, sch, config_map):
        self._outs = list(sch.outs) if isinstance(sch.outs, (tuple, list)) else [sch.outs]
        self._option = sch.option
        self._config_map = config_map

    def __init_subclass__(cls):
        ReRunManager.add_rerun_cls(cls)

    @classmethod
    @abc.abstractmethod
    def get_pattern(cls):
        """
        Implemented by subclass, and return its pattern.
        :return:
        """

    @abc.abstractmethod
    def rerun(self):
        """
        Implemented by subclass, execute recorded compute graph
        :return:
        """


class ReRunManager:
    _rerun_classes = {}

    @classmethod
    def add_rerun_cls(cls, rerun_cls):
        cls._rerun_classes[rerun_cls.get_pattern()] = rerun_cls

    @classmethod
    def get_rerun(cls, pattern):
        return cls._rerun_classes.get(pattern)


def rerun(sch, config_map):
    from tbe.dsl.unify_schedule import pattern_parser

    pattern = pattern_parser.get_pattern(sch.outs)
    operation.get_context().set_pattern(pattern)

    ReRunManager.get_rerun(pattern)(sch, config_map).rerun()
