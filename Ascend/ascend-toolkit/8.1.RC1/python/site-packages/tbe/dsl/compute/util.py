#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
util
"""
# 'pylint: disable=import-error
from decorator import decorator
from tbe import tvm
from tbe.common.platform import ASCEND_310
from tbe.common.platform import ASCEND_310B
from tbe.common.platform import AS31XM1
from tbe.common.platform import ASCEND_610
from tbe.common.platform import ASCEND_610LITE
from tbe.common.platform import BS9SX2A
from tbe.common.platform import MC61AM21A
from tbe.common.platform import BS9SX1A
from tbe.common.platform import ASCEND_310P
from tbe.common.platform import ASCEND_910
from tbe.common.platform import HI3796CV300CS
from tbe.common.platform import HI3796CV300ES
from tbe.common.platform import SD3403
from tbe.common.platform import ASCEND_910B
from tbe.common.platform import ASCEND_910_93
from tbe.common.platform import ASCEND_910_95
from tbe.common.platform import SHORT_SOC_VERSION
from tbe.common.platform import intrinsic_check_support
from tbe.common.platform.platform_info import get_soc_spec
from tbe.common.utils import shape_util
from tbe.common.utils.errormgr import get_error_message
from tbe.dsl.base import operation

ASCEND_SHISI = "smallhisi"
ASCEND_031 = "Ascend031"
ASCEND_035 = "Ascend035"
ORIGINAL = "original"
# Save op's output dtype, when first call the template api,we will save the dtype.
# Before auto scheduling,get the dtype and convert the res tensor to this dtype,
# and set the dtype to None.

DTYPE_MAP = {
    "uint1": "u1",
    "bool": "s8",
    "int4": "s4",
    "uint8": "u8",
    "int8": "s8",
    "uint16": "u16",
    "int16": "s16",
    "float16": "f16",
    "bfloat16": "bf16",
    "uint32": "u32",
    "int32": "s32",
    "float32": "f32",
    "uint64": "u64",
    "int64": "s64",
    "complex32": "c32",
    "complex64": "c64"
}


DTYPE_BYTE = {
    "uint1": 0.125,
    "bool": 1,
    "int4": 0.5,
    "int8": 1,
    "uint8": 1,
    "bfloat16": 2,
    "float16": 2,
    "int16": 2,
    "uint16": 2,
    "float32": 4,
    "int32": 4,
    "uint32": 4,
    "int64": 8,
    "uint64": 8,
    "complex32": 4,
    "complex64": 8
}

DSL_SAME_API_MAP = {
    "sum": "reduce_sum",
    "round_to": "clip",
    "round_d": "round_half_up"
}

DSL_CHECK_SUPPORT_MAP = {
    "broadcast": {
        "AllSoc": ("int8", "uint8",
                   "float16", "int16", "uint16",
                   "float32", "int32", "uint32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_310: ("int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "bfloat16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "bfloat16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_310P: ("bool", "int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_610: ("bool", "int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "float32", "int32", "uint32", "int64", "uint64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "float32", "int32", "uint32", "int64", "uint64"),
        BS9SX1A: ("bool", "int8", "uint8", "float16", "int16", "uint16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910: ("int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910B: ("int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64", "bfloat16", "complex32", "complex64"),
        ASCEND_910_93: ("int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64", "bfloat16", "complex32", "complex64"),
        ASCEND_910_95: ("int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64", "bfloat16", "complex32", "complex64"),
        ASCEND_SHISI: ("int8", "uint8",
                       "float16", "int16", "uint16",
                       "float32", "int32", "uint32"),
    },

    "full": {
        "AllSoc": ("int8", "uint8",
                   "float16", "int16", "uint16",
                   "float32", "int32", "uint32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_310: ("int8", "uint8",
                     "float16", "int16", "uint16",
                     "float32", "int32", "uint32"),
        ASCEND_310B: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        AS31XM1: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_310P: ("bool", "int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_610: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_610LITE: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                         "float32", "int32", "uint32", "int64", "uint64"),
        BS9SX2A: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        MC61AM21A: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                    "float32", "int32", "uint32", "int64", "uint64"),
        BS9SX1A: ("bool", "int8", "uint8", "float16", "int16", "uint16",
                  "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                     "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910B: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910_93: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_910_95: ("bool", "uint1", "int8", "uint8", "float16", "int16", "uint16",
                      "float32", "int32", "uint32", "int64", "uint64"),
        ASCEND_SHISI: ("int8", "uint8",
                       "float16", "int16", "uint16",
                       "float32", "int32", "uint32"),
    },

    # segment
    "unsorted_segment_sum": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },

    "unsorted_segment_mean": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },

    "unsorted_segment_prod": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32", "int16"),
        ASCEND_610: ("float16", "float32", "int32", "int16"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32", "int16"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },
    "unsorted_segment_min": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32", "int16"),
        ASCEND_610: ("float16", "float32", "int32", "int16"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32", "int16"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },
    "unsorted_segment_max": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32", "int16"),
        ASCEND_610: ("float16", "float32", "int32", "int16"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32", "int16"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },

    # inplace
    "inplace_add": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },
    "inplace_sub": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },
    "inplace_update": {
        "AllSoc": ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "float32", "int32"),
    },

    # ceil/floor/round/trunc
    # "round": "r",
    # "floor": "f",
    # "trunc": "z",
    # "round_half_up": "a",
    # "ceil": "c"
    "ceil": {
        "AllSoc": ("float16", "f162s32"),
        ASCEND_031: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                     "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310: ("float16", "f162s32"),
        ASCEND_310B: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322f32", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        AS31XM1: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310P: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610LITE: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                         "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX2A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                  "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        MC61AM21A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                    "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX1A: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_910: ("float16", "float32", "f162s32", "f322s32"),
        ASCEND_910B: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_910_93: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32"),
        ASCEND_910_95: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_035 :("s162f16", "f162s16"),
        ASCEND_SHISI: ("float16", "f162s32"),
    },
    "floor": {
        "AllSoc": ("float16", "f162s32"),
        ASCEND_031: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                     "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310: ("float16", "f162s32"),
        ASCEND_310B: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322f32", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        AS31XM1: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310P: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610LITE: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                         "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX2A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                  "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        MC61AM21A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                    "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX1A: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_910: ("float16", "float32", "f162s32", "f322s32"),
        ASCEND_910B: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_910_93: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32"),
        ASCEND_910_95: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_035 :("s162f16", "f162s16"),
        ASCEND_SHISI: ("float16", "f162s32"),
    },
    "round": {
        "AllSoc": ("float16", "f162s32"),
        ASCEND_031: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                     "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310: ("float16", "f162s32"),
        ASCEND_310B: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322f32", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        AS31XM1: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310P: ("float16", "float32", "f162s16", "f162s32", "f322s32"),
        ASCEND_610: ("float16", "float32", "f162s16", "f162s32", "f322s32"),
        ASCEND_610LITE: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                         "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX2A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                  "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        MC61AM21A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                    "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX1A: ("float16", "float32", "f162s16", "f162s32", "f322s32"),
        ASCEND_910: ("float16", "float32", "f162s32", "f322s32"),
        ASCEND_910B: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_910_93: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_910_95: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_035 :("s162f16", "f162s16"),
        ASCEND_SHISI: ("float16", "f162s32"),
    },
    "trunc": {
        "AllSoc": ("float16", "f162s32"),
        ASCEND_031: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                     "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310: ("float16", "f162s32"),
        ASCEND_310B: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322f32", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        AS31XM1: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310P: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32", "f322s16"),
        ASCEND_610: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610LITE: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                         "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX2A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                  "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        MC61AM21A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                    "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX1A: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_910: ("float16", "float32", "f162s32", "f322s32"),
        ASCEND_910B: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16", "f322s16"),
        ASCEND_910_93: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16", "f322s16"),
        ASCEND_910_95: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16", "f322s16"),
        ASCEND_035 :("s162f16", "f162s16"),
        ASCEND_SHISI: ("float16", "f162s32"),
    },
    "round_half_up": {
        "AllSoc": ("float16", "f162s32"),
        ASCEND_031: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                     "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310: ("float16", "f162s32"),
        ASCEND_310B: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322f32", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        AS31XM1: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                      "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        ASCEND_310P: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_610LITE: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                         "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX2A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                  "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        MC61AM21A: ("float16", "float32", "bf162s32", "f162s8", "f162u8", "f162s16", "f162s32", "s162f16",
                    "f322bf16", "f322f16", "f322s16", "f322s32", "f322s64", "s322f32", "s642f32"),
        BS9SX1A: ("float16", "float32", "f162u8", "f162s8", "f162s32", "f322s32"),
        ASCEND_910: ("float16", "float32", "f162s32", "f322s32"),
        ASCEND_910B: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_910_93: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32"),
        ASCEND_910_95: ("float16", "float32", "f162s32", "f322s32", "f322f32",
                      "f322s64", "s642f32", "f322bf16", "bf162s32", "s162f16", "f162s16"),
        ASCEND_035 :("s162f16", "f162s16"),
        ASCEND_SHISI: ("float16", "f162s32"),
    },

    # reduce
    "reduce_sum": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32", "int64"),
        AS31XM1: ("float16", "float32", "int32"),
        # int32: nlst support, last not
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_mean": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_max": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        # fp32:last need priority_flag
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_min": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_all": {
        ASCEND_310P: ("uint1", "bool", "int8"),
        ASCEND_610: ("uint1", "bool", "int8"),
        ASCEND_910: ("uint1", "bool", "int8"),
        ASCEND_910B: ("uint1", "bool", "int8"),
        ASCEND_910_93: ("uint1", "bool", "int8"),
        ASCEND_910_95: ("uint1", "bool", "int8"),
    },
    "reduce_any": {
        ASCEND_310P: ("uint1", "bool", "int8"),
        ASCEND_610: ("uint1", "bool", "int8"),
        ASCEND_910: ("uint1", "bool", "int8"),
        ASCEND_910B: ("uint1", "bool", "int8"),
        ASCEND_910_93: ("uint1", "bool", "int8"),
        ASCEND_910_95: ("uint1", "bool", "int8"),
    },
    "reduce_prod": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        # int32: nlst/last support
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "tuple_sum": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        # int32: nlst support, last not
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_window": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16",),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16",),
        AS31XM1: ("float16",),
        ASCEND_310P: ("float16",),
        ASCEND_610: ("float16",),
        ASCEND_610LITE: ("float16",),
        BS9SX2A: ("float16",),
        MC61AM21A: ("float16",),
        BS9SX1A: ("float16",),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    # elewise
    "vadd": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("int16", "float16", "int32", "float32", "uint64", "int64"),
        ASCEND_610: ("int16", "float16", "int32", "float32", "uint64", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("int16", "float16", "int32", "float32", "uint64", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64", "uint64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64", "uint64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64", "uint64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64", "uint64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vsub": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vgcd": {
        "AllSoc": ("int32"),
        ASCEND_310P: ("int16", "int32", "int64"),
        ASCEND_610: ("int16", "int32"),
        BS9SX1A: ("int16", "int32"),
        ASCEND_910: ("int32"),
        ASCEND_910B: ("int16", "int32", "int64"),
        ASCEND_910_93: ("int16", "int32", "int64"),
        ASCEND_910_95: ("int16", "int32", "int64"),
    },
    "vmul": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vdiv": {
        "AllSoc": ("float16",),
        ASCEND_031: ("uint16", "float16", "uint32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("uint16", "float16", "uint32", "float32", "uint64", "int64"),
        AS31XM1: ("uint16", "float16", "uint32", "float32", "uint64"),
        ASCEND_310P: ("float16", "float32", "int64"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("uint16", "float16", "uint32", "float32", "uint64", "int64"),
        BS9SX2A: ("uint16", "float16", "uint32", "float32", "uint64", "int64"),
        MC61AM21A: ("uint16", "float16", "uint32", "float32", "uint64", "int64"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32", "int64"),
        ASCEND_910B: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16",),
    },
    "vmod": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int64"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16", "float32", "int64"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32", "int64"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32", "int64"),
        BS9SX2A: ("float16", "float32", "int64"),
        MC61AM21A: ("float16", "float32", "int64"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32", "int64"),
        ASCEND_910B: ("float16", "float32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "vmin": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310P: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX1A: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vmax": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310P: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX1A: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vadds": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("int16", "float16", "float32", "int32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vmins": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310P: ("int16", "float16", "float32", "int32"),
        ASCEND_610: ("int16", "float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX1A: ("int16", "float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vmaxs": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310P: ("bool", "int16", "float16", "float32", "int32"),
        ASCEND_610: ("bool", "int16", "float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX1A: ("bool", "int16", "float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vmuls": {
        "AllSoc": ("float16", "int32"),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("int16", "float16", "int32", "float32", "int64"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16", "int32"),
    },
    "vnot": {
        "AllSoc": ("int16", "uint16", "int32", "uint32"),
        ASCEND_031: ("uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("int16", "uint16", "int32", "uint32"),
        ASCEND_310B: ("uint1", "uint8", "int8", "uint16", "int16", "float16", "uint32",
                      "int32", "float32", "uint64", "int64"),
        AS31XM1: ("uint1", "uint8", "int8", "uint16", "int16", "float16", "uint32",
                      "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_610: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_610LITE: ("uint1", "uint8", "int8", "uint16", "int16", "float16", "uint32",
                         "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("uint1", "uint8", "int8", "uint16", "int16", "float16", "uint32",
                  "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("uint1", "uint8", "int8", "uint16", "int16", "float16", "uint32",
                    "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_910: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_910B: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_93: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_95: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_SHISI: ("int16", "uint16", "int32", "uint32"),
    },
    "vor": {
        "AllSoc": ("int16", "uint16", "int32", "uint32"),
        ASCEND_031: ("uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("int16", "uint16", "int32", "uint32"),
        ASCEND_310B: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("uint1", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_610: ("uint1", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_610LITE: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("uint1", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_910: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_910B: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_93: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_95: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_SHISI: ("int16", "uint16", "int32", "uint32"),
    },
    "vand": {
        "AllSoc": ("int16", "uint16", "int32", "uint32"),
        ASCEND_031: ("uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("int16", "uint16", "int32", "uint32"),
        ASCEND_310B: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_610: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_610LITE: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("uint1", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("uint1", "uint16", "int16", "uint32", "int32", "uint64", "int64"),
        ASCEND_910: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_910B: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_93: ("uint1", "int16", "uint16", "int32", "uint32", "int64"),
        ASCEND_910_95: ("uint1", "int16", "uint16", "int32", "uint32"),
        ASCEND_SHISI: ("int16", "uint16", "int32", "uint32"),
    },
    "vcmp": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        ASCEND_310P: ("float16", "float32", "int64", "uint64"),
        ASCEND_610: ("float16", "float32", "int64", "uint64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16", "uint32", "int32", "float32", "int64"),
        BS9SX1A: ("float16", "float32", "int64", "uint64"),
        ASCEND_910: ("float16", "float32", "int64", "uint64"),
        ASCEND_910B: ("float16", "float32", "int64", "uint64", "int32"),
        ASCEND_910_93: ("float16", "float32", "int64", "uint64", "int32"),
        ASCEND_910_95: ("float16", "float32", "int64", "uint64", "int32"),
        ASCEND_SHISI: ("float16",),
    },
    "vlogic": {
        "AllSoc": ("bool",),
        ASCEND_310: ("bool",),
        ASCEND_310B: ("bool",),
        AS31XM1: ("bool",),
        ASCEND_310P: ("bool",),
        ASCEND_610: ("bool",),
        ASCEND_610LITE: ("bool",),
        BS9SX2A: ("bool",),
        MC61AM21A: ("bool",),
        BS9SX1A: ("bool",),
        ASCEND_910: ("bool",),
        ASCEND_910B: ("bool",),
        ASCEND_910_93: ("bool",),
        ASCEND_910_95: ("bool",),
        ASCEND_SHISI: ("bool",),
    },
    "vsel": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vcmpsel": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vlog": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vexp": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vabs": {
        "AllSoc": ("float16",),
        ASCEND_031: ("int8", "float16", "int16", "float32", "int32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("int8", "float16", "int16", "float32", "int32"),
        AS31XM1: ("int8", "float16", "int16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("int8", "float16", "int16", "float32", "int32"),
        BS9SX2A: ("int8", "float16", "int16", "float32", "int32"),
        MC61AM21A: ("int8", "float16", "int16", "float32", "int32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "int64", "complex32", "complex64"),
        ASCEND_SHISI: ("float16",),
    },
    "vsignbit": {
        "AllSoc": (),
        ASCEND_910B: ("float16", "float32", "int32", "int16"),
        ASCEND_910_93: ("float16", "float32", "int32", "int16"),
        ASCEND_910_95: ("float16", "float32", "int32", "int16"),
        ASCEND_310B: ("float16", "float32", "int32", "int16"),
    },
    "vrec": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"), # float32 high precision mode exists pass bug
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vrelu": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        ASCEND_035: ("float16",),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        AS31XM1: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        ASCEND_310P: ("float16", "int32", "float32"),
        ASCEND_610: ("float16", "int32", "float32"),
        ASCEND_610LITE: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        BS9SX2A: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        MC61AM21A: ("bool", "uint8", "uint16", "float16", "uint32", "int32", "float32", "uint64"),
        BS9SX1A: ("float16", "int32", "float32"),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16",),
        ASCEND_910_93: ("float16",),
        ASCEND_910_95: ("float16",),
        ASCEND_SHISI: ("float16",),
    },
    "vsqrt": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vrsqrt": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vaxpy": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vmla": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vmadd": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vmaddrelu": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: ("float16", "float32"),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vlrelu": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
        ASCEND_SHISI: ("float16",),
    },
    "vaddrelu": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("int16", "float16", "float32"),
        ASCEND_610: ("int16", "float16", "float32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("int16", "float16", "float32"),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16",),
        ASCEND_910_93: ("float16",),
        ASCEND_910_95: ("float16",),
        ASCEND_SHISI: ("int16", "float16"),
    },
    "vsubrelu": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("int16", "float16", "float32"),
        ASCEND_610: ("int16", "float16", "float32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("int16", "float16", "float32"),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16",),
        ASCEND_910_93: ("float16",),
        ASCEND_910_95: ("float16",),
        ASCEND_SHISI: ("int16", "float16"),
    },
    "gather": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_310: (),
        ASCEND_310B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        AS31XM1: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_310P: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_610: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_610LITE: ("float16", "float32", "int8", "uint8", "int16",
                         "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        BS9SX2A: ("float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        MC61AM21A: ("float16", "float32", "int8", "uint8", "int16",
                    "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        BS9SX1A: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910_93: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
    },
    "gather_nd": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: (),
        ASCEND_310B: ("bfloat16", "bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bfloat16", "bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_610: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_910: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_910B: ("bfloat16", "bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_910_93: ("bfloat16", "bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
    },
    "powi": {
        ASCEND_310B: ("int32",),
        ASCEND_310P: ("int32",),
        ASCEND_910B: ("int32",),
        ASCEND_910_93: ("int32",),
    },
    "segment": {
        "AllSoc": ("float16",),
        ASCEND_310: ("float16", "int32"),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "bfloat16"),
        ASCEND_910_93: ("float16", "float32", "int32", "bfloat16"),
        ASCEND_910_95: ("float16", "float32", "int32", "bfloat16"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
    },
    "scatter": {
        "AllSoc": ("float16",),
        ASCEND_310: (),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "bfloat16", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "bfloat16", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
    },
    "scatter_nd": {
        "AllSoc": ("float16",),
        ASCEND_310: (),
        ASCEND_031: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "bfloat16", "int64", "int8"),
        ASCEND_910_93: ("float16", "float32", "int32", "bfloat16", "int64", "int8"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
    },
    "slice": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_310: (),
        ASCEND_310B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        AS31XM1: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_310P: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_610: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_610LITE: ("float16", "float32", "int8", "uint8", "int16",
                         "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        BS9SX2A: ("float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        MC61AM21A: ("float16", "float32", "int8", "uint8", "int16",
                    "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        BS9SX1A: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910_93: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
        ASCEND_910_95: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64", "bool"),
    },
    "set_value": {
        "AllSoc": ("float16", "float32"),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32"),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
    },
    "transpose": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_310: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_310B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64"),
        AS31XM1: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_310P: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_610: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_610LITE: ("float16", "float32", "int8", "uint8", "int16",
                         "uint16", "int32", "uint32", "int64", "uint64"),
        BS9SX2A: ("float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64"),
        MC61AM21A: ("float16", "float32", "int8", "uint8", "int16",
                    "uint16", "int32", "uint32", "int64", "uint64"),
        BS9SX1A: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_910: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_910B: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_910_93: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64"),
        ASCEND_910_95: ("bfloat16", "float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "int64", "uint64"),
    },
    "transdata": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32"),
        ASCEND_035: ("float16", "uint16", "int16", "int8", "uint8"),
        ASCEND_310: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32"),
        ASCEND_310B: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "bfloat16"),
        AS31XM1: ("float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "bfloat16"),
        ASCEND_310P: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", ),
        ASCEND_610: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", ),
        ASCEND_610LITE: ("float16", "float32", "int8", "uint8", "int16",
                         "uint16", "int32", "uint32",),
        BS9SX2A: ("float16", "float32", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32",),
        MC61AM21A: ("float16", "float32", "int8", "uint8", "int16",
                    "uint16", "int32", "uint32",),
        BS9SX1A: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", ),
        ASCEND_910: ("float16", "float32", "int8", "uint8", "int16",
                     "uint16", "int32", "uint32", ),
        ASCEND_910B: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "bfloat16"),
        ASCEND_910_93: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "bfloat16"),
        ASCEND_910_95: ("float16", "float32", "int8", "uint8", "int16",
                      "uint16", "int32", "uint32", "bfloat16"),
    },

    # common
    "clip": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        AS31XM1: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        ASCEND_310P: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        ASCEND_610: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        BS9SX1A: ("bool", "uint8", "int8", "int16", "float16", "int32", "float32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32"),
        ASCEND_910_93: ("float16", "float32", "int32"),
        ASCEND_910_95: ("float16", "float32", "int32"),
        ASCEND_SHISI: ("float16",),  # int32: schedule not support
    },
    "cast_to": {
        "AllSoc": ("s82f16", "s82u8", "u82f16", "u82s8",
                   "f162f32", "f162s8", "f162u8", "f162s32",
                   "s322f16", "s322s8", "s322u8", "s322f32"),
        ASCEND_031: ("s82f16", "u82f16",
                     "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                     "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        ASCEND_310: ("s82f16", "s82u8", "u82f16", "u82s8",
                     "f162f32", "f162s8", "f162u8", "f162s32",
                     "f322f16", "f322s8", "f322u8", "f322s32",
                     "s322f16", "s322s8", "s322u8", "s322f32"),
        ASCEND_310B: ("s82f16", "u82f16",
                      "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                      "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        AS31XM1: ("s82f16", "u82f16",
                      "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                      "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        ASCEND_310P: ("u82s8", "u82f16", "u82s32", "u82f32",
                      "s82u8", "s82f16", "s82s32", "s82f32",
                      "s162f16", "s162s32", "s162f32",
                      "f162u8", "f162s8", "f162s32", "f162f32",
                      "s322u8", "s322s8", "s322f16", "s322f32", "s322s64",
                      "f322u8", "f322s8", "f322f16", "f322s32",
                      "s642s32", "s642f16", "s322s16"),
        ASCEND_610: ("u82s8", "u82f16", "u82s32", "u82f32",
                     "s82u8", "s82f16", "s82s32", "s82f32",
                     "s162f16", "s162s32", "s162f32",
                     "f162u8", "f162s8", "f162s32", "f162f32",
                     "s322u8", "s322s8", "s322f16", "s322f32", "s322s64",
                     "f322u8", "f322s8", "f322f16", "f322s32",
                     "s642s32", "s642f16"),
        ASCEND_610LITE: ("s82f16", "u82f16",
                         "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                         "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        BS9SX2A: ("s82f16", "u82f16",
                  "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                  "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        MC61AM21A: ("s82f16", "u82f16",
                    "bf162f32", "f162s8", "f162u8", "f162f32", "s162s8", "s162u8", "s162f16", "s162f32",
                    "f322f16", "s322f16", "s322s16", "s322f32", "s322s64", "s642s32", "s642f16"),
        BS9SX1A: ("u82s8", "u82f16", "u82s32", "u82f32",
                     "s82u8", "s82f16", "s82s32", "s82f32",
                     "s162f16", "s162s32", "s162f32",
                     "f162u8", "f162s8", "f162s32", "f162f32",
                     "s322u8", "s322s8", "s322f16", "s322f32", "s322s64",
                     "f322u8", "f322s8", "f322f16", "f322s32",
                     "s642s32", "s642f16"),
        ASCEND_910: ("s82f16", "s82u8", "u82f16", "u82s8",
                     "f162f32", "f162s8", "f162u8", "f162s32",
                     "f322f16", "f322s8", "f322u8", "f322s32",
                     "s322f16", "s322s8", "s322u8", "s322f32", "s322s64",
                     "s642s32", "s642f16"),
        ASCEND_910B: ("s42f16", "s82f16", "s82u8", "u82f16", "u82s8",
                      "f162f32", "f162s8", "f162u8", "f162s32", "bf162f32",
                      "f322f16", "f322s8", "f322u8", "f322s32",
                      "s322f16", "s322s8", "s322u8", "s322f32", "s322s64",
                      "s642s32", "s642f16", "f162c32", "f322c64", "s162f32",
                      "s642u32", "s642s16", "s642u16", "s642s8", "s642u8",
                      "s322u32", "s322s16", "s322u16", "u322s64", "u322s32",
                      "u322s16", "u322u16", "u322s8", "u322u8", "s162s64",
                      "s162s32", "s162u32", "s162u16", "s162s8", "s162u8",
                      "u162s64", "u162s32", "u162u32", "u162s16", "u162s8",
                      "u162u8", "s82s64", "s82s32", "s82u32", "s82s16", "s82u16",
                      "u82s64", "u82s32", "u82u32", "u82s16", "u82u16"),
        ASCEND_910_93: ("s42f16", "s82f16", "s82u8", "u82f16", "u82s8",
                      "f162f32", "f162s8", "f162u8", "f162s32", "bf162f32",
                      "f322f16", "f322s8", "f322u8", "f322s32",
                      "s322f16", "s322s8", "s322u8", "s322f32", "s322s64",
                      "s642s32", "s642f16", "f162c32", "f322c64", "s162f32",
                      "s642u32", "s642s16", "s642u16", "s642s8", "s642u8",
                      "s322u32", "s322s16", "s322u16", "u322s64", "u322s32",
                      "u322s16", "u322u16", "u322s8", "u322u8", "s162s64",
                      "s162s32", "s162u32", "s162u16", "s162s8", "s162u8",
                      "u162s64", "u162s32", "u162u32", "u162s16", "u162s8",
                      "u162u8", "s82s64", "s82s32", "s82u32", "s82s16", "s82u16",
                      "u82s64", "u82s32", "u82u32", "u82s16", "u82u16"),
        ASCEND_910_95: ("s42f16", "s82f16", "s82u8", "u82f16", "u82s8",
                      "f162f32", "f162s8", "f162u8", "f162s32", "bf162f32",
                      "f322f16", "f322s8", "f322u8", "f322s32",
                      "s322f16", "s322s8", "s322u8", "s322f32", "s322s64",
                      "s642s32", "s642f16", "f162c32", "f322c64", "s162f32"),
        ASCEND_SHISI: ("s82f16", "s82u8", "u82f16", "u82s8",
                       "f162f32", "f162s8", "f162u8", "f162s32",
                       "s322f16", "s322s8", "s322u8", "s322f32"),
    },

    "conv": {
        "AllSoc": ("float16",),
    },
    "compute_four2five": {
        "AllSoc": ("float16",),
    },
    "compute_five2four": {
        "AllSoc": ("float16",),
    },
    "matmul": {
        "AllSoc": ("float16", "f162f16", "f162f32"),
    },
    "pooling2d": {
        "AllSoc": ("float16",),
    },
    "concat": {
        "AllSoc": ("bool", "int8", "int16", "int32", "int64",
                   "uint8", "uint16", "uint32", "uint64",
                   "bfloat16", "float16", "float32"),
    },
    "sort": {
        "AllSoc": ("float16",),
        ASCEND_031: (),
        ASCEND_310: (),
        ASCEND_310B: (),
        AS31XM1: (),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: (),
        BS9SX2A: (),
        MC61AM21A: (),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
    },
    "topk": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32"),
        ASCEND_310: (),
        ASCEND_310B: ("float16", "float32"),
        AS31XM1: ("float16", "float32"),
        ASCEND_310P: ("float16", "float32"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("float16", "float32"),
        BS9SX2A: ("float16", "float32"),
        MC61AM21A: ("float16", "float32"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16",),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
    },
}

UNIFY_DSL_CHECK_SUPPORT_MAP = {
    "reduce_prod": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32", "int64"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "vsel": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                     "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310: ("float16",),
        ASCEND_310B: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                      "uint32", "int32", "float32", "uint64", "int64"),
        ASCEND_310P: ("float16", "float32", "int64"),
        ASCEND_610: ("float16", "float32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                         "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX2A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                  "uint32", "int32", "float32", "uint64", "int64"),
        MC61AM21A: ("bool", "uint8", "int8", "uint16", "int16", "float16",
                    "uint32", "int32", "float32", "uint64", "int64"),
        BS9SX1A: ("float16", "float32"),
        ASCEND_910: ("float16", "float32", "int64"),
        ASCEND_910B: ("float16", "float32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_sum": {
        "AllSoc": ("float16",),
        ASCEND_031: ("float16", "float32", "int32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("float16", "float32", "int32", "int64"),
        AS31XM1: ("float16", "float32", "int32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("float16", "float32", "int32"),
        BS9SX2A: ("float16", "float32", "int32"),
        MC61AM21A: ("float16", "float32", "int32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_max": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "reduce_min": {
        "AllSoc": ("float16",),
        ASCEND_031: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        ASCEND_310: ("float16", "float32", "int32"),
        ASCEND_310B: ("bool", "uint8", "int8", "float16", "int32", "float32", "int64"),
        AS31XM1: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        ASCEND_310P: ("float16", "float32", "int32", "int64"),
        ASCEND_610: ("float16", "float32", "int32"),
        ASCEND_610LITE: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX2A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        MC61AM21A: ("bool", "uint8", "int8", "float16", "int32", "float32"),
        BS9SX1A: ("float16", "float32", "int32"),
        ASCEND_910: ("float16", "float32", "int32"),
        ASCEND_910B: ("float16", "float32", "int32", "int64"),
        ASCEND_910_93: ("float16", "float32", "int32", "int64"),
        ASCEND_910_95: ("float16", "float32", "int32", "int64"),
        ASCEND_SHISI: ("float16",),
    },
    "complex": {
        "AllSoc": (),
        ASCEND_910B: ("float16", "float32"),
        ASCEND_910_93: ("float16", "float32"),
        ASCEND_910_95: ("float16", "float32"),
    },
    "real": {
        "AllSoc": (),
        ASCEND_910B: ("float16", "float32", "complex32", "complex64"),
        ASCEND_910_93: ("float16", "float32", "complex32", "complex64"),
        ASCEND_910_95: ("float16", "float32", "complex32", "complex64"),
    }
}


def dsl_support_dtype(dsl_name):
    """
    dsl_support_dtype
    """
    if not isinstance(dsl_name, str):
        return []

    dsl_name = DSL_SAME_API_MAP.get(dsl_name, dsl_name)

    if in_dynamic_and_static_unify() and dsl_name in UNIFY_DSL_CHECK_SUPPORT_MAP:
        all_support_dtype = UNIFY_DSL_CHECK_SUPPORT_MAP.get(dsl_name)
    else:
        all_support_dtype = DSL_CHECK_SUPPORT_MAP.get(dsl_name)

    if all_support_dtype is None:
        return []

    soc_ver = get_soc_spec(SHORT_SOC_VERSION)
    if soc_ver in (HI3796CV300CS, HI3796CV300ES, SD3403):
        soc_ver = ASCEND_SHISI
    soc_support_dtype = all_support_dtype.get(soc_ver)
    if soc_support_dtype is None:
        soc_support_dtype = all_support_dtype.get("AllSoc")
        if soc_support_dtype is None:
            return []

    return list(soc_support_dtype)


def dsl_check_support(dsl_api, dtype=None):
    """
    dsl_check_support
    """
    if not dsl_api.startswith("te.lang.cce.") and not dsl_api.startswith("tbe.dsl."):
        return False
    if (dtype is not None) and (not isinstance(dtype, str)):
        return False

    dsl_name = dsl_api.split(".")[-1]

    dsl_name = DSL_SAME_API_MAP.get(dsl_name, dsl_name)

    if in_dynamic_and_static_unify() and dsl_name in UNIFY_DSL_CHECK_SUPPORT_MAP:
        all_support_dtype = UNIFY_DSL_CHECK_SUPPORT_MAP.get(dsl_name)
    else:
        all_support_dtype = DSL_CHECK_SUPPORT_MAP.get(dsl_name)

    if all_support_dtype is None:
        return False

    soc_ver = get_soc_spec(SHORT_SOC_VERSION)
    if soc_ver in (HI3796CV300CS, HI3796CV300ES, SD3403):
        soc_ver = ASCEND_SHISI
    soc_support_dtype = all_support_dtype.get(soc_ver)
    if soc_support_dtype is None:
        soc_support_dtype = all_support_dtype.get("AllSoc")
        if soc_support_dtype is None:
            return False

    if (dtype not in (None, "")) and (dtype not in soc_support_dtype):
        return False

    return True


# 'pylint: disable=too-many-branches
@decorator
def dtype_check_decorator(func, *args, **kwargs):
    """
    dtype_check_decorator
    """
    func_name = func.__name__
    if func_name == "broadcast" or func_name == "full" :
        if isinstance(args[0], int):
            judge_dtype = "int32"
        elif isinstance(args[0], float):
            judge_dtype = "float16"
        else:
            judge_dtype = args[0].dtype
    elif func_name == "concat":
        if not isinstance(args[0], list):
            dict_args = {"errCode": "E90001",
                         "detailed_cause": f"The first input type must be list, while type is {type(args[0])}."}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        if not isinstance(args[0][0], tvm.Tensor):
            dict_args = {"errCode": "E90001",
                         "detailed_cause": f"First input type must be list of tvm.tensor, now is {type(args[0][0])}."}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        judge_dtype = args[0][0].dtype
    else:
        if not isinstance(args[0], tvm.Tensor):
            dict_args = {"errCode": "E90001",
                         "detailed_cause": f"First input type must be tvm.tensor, but now is {type(args[0])}."}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        judge_dtype = args[0].dtype

    # skip dtype check condition
    def _is_skip_dtype_check(func_name, args):
        if in_dynamic_and_static_unify():
            # dynamic vsel skip two scalar inputs
            return func_name == "vsel" and \
                not isinstance(args[1], tvm.Tensor) and \
                not isinstance(args[2], tvm.Tensor)

        # not dynamic skip vcmp vsel vcmpsel
        return func_name in ("vcmp", "vsel", "vcmpsel")

    if _is_skip_dtype_check(func_name, args):
        return func(*args, **kwargs)

    # get vsel lhs or rhs dtype if tensor
    def _get_vsel_dtype(lhs, rhs):
        tmp_type = None
        if isinstance(lhs, tvm.Tensor):
            tmp_type = lhs.dtype
        elif isinstance(rhs, tvm.Tensor):
            tmp_type = rhs.dtype
        return tmp_type

    # handle vsel
    if func_name == "vsel":
        judge_dtype = _get_vsel_dtype(args[1], args[2])

    if not dsl_check_support(f"tbe.dsl.{func_name}", judge_dtype):
        dict_args = {"errCode": "E90003",
                     "detailed_cause": f"{judge_dtype} of tbe.dsl.{func_name} is not supported"}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    return func(*args, **kwargs)


def str_to_tuple(str_local):
    """
    str_to_tuple
    """
    if str_local:
        return str_local.split(",")
    return []


def is_cast_support(src_type, dst_type):
    """
    is_cast_support
    """
    if src_type == dst_type:
        return True

    cast_type = get_cast_type(src_type, dst_type)

    # s322s8 does not adapt
    # u82s64, u82s32, s82s32, s322s64 and s642s32 retain the implementation.
    cast_ints2ints_supported = {
        "Ascend910B": [
                "s642u32", "s642s16", "s642u16", "s642s8", "s642u8",
                "s322u32", "s322s16", "s322u16", "s322u8",
                "u322s64", "u322s32", "u322s16", "u322u16", "u322s8", "u322u8",
                "s162s64", "s162s32", "s162u32", "s162u16", "s162s8", "s162u8",
                "u162s64", "u162s32", "u162u32", "u162s16", "u162s8", "u162u8",
                "s82s64", "s82u32", "s82s16", "s82u16", "s82u8",
                "u82u32", "u82s16", "u82u16", "u82s8"
            ],
        "Ascend910_93": [
                "s642u32", "s642s16", "s642u16", "s642s8", "s642u8",
                "s322u32", "s322s16", "s322u16", "s322u8",
                "u322s64", "u322s32", "u322s16", "u322u16", "u322s8", "u322u8",
                "s162s64", "s162s32", "s162u32", "s162u16", "s162s8", "s162u8",
                "u162s64", "u162s32", "u162u32", "u162s16", "u162s8", "u162u8",
                "s82s64", "s82u32", "s82s16", "s82u16", "s82u8",
                "u82u32", "u82s16", "u82u16", "u82s8"
            ],
        "Ascend310P": [
                "s642u8", "s322s16", "s322u8", "s162s32", "s162s8", "u82s8"
            ]
    }

    soc_version = get_soc_spec("SHORT_SOC_VERSION")
    soc_support_list = cast_ints2ints_supported.get(soc_version, None)

    # ints2ints only support dynamic and const mode, not support pre-static mode.
    if in_dynamic_and_static_unify() and soc_support_list is not None and \
        cast_type in soc_support_list:
        # support cast_intrinsic cast between dtype ints and ints.
        return True

    if intrinsic_check_support("Intrinsic_vconv", cast_type):
        return True
    if cast_type in ("s322s64", "s642s32", "s642f16"):
        # support complex_intrinsic cast between int32 and int64, s64 -> fp16
        return True
    if cast_type in ("f162c32", "f322c64"):
        # support cast from float to complex, f16->c32, f32->c64
        return True
    if cast_type in ("s42f16"):
        # support cast from int4 to float16, s4->f16
        return True
    if cast_type in ("s322s16"):
        # support cast from int32 to int16, s32->s16
        return True

    return intrinsic_check_support("Intrinsic_vconv", f"{cast_type}z")


def get_cast_type(src_type, dst_type):
    """
    get cast type string for vconv_xxxxx
    """
    if src_type not in DTYPE_MAP:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": f"left dtype must be f16, f32, u8, s8 or s32, not support {src_type}."}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    if dst_type not in DTYPE_MAP:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": f"right dtype must be f16, f32, u8, s8 or s32, not support {dst_type}."}
        raise RuntimeError(dict_args, get_error_message(dict_args))

    cast_type = f"{DTYPE_MAP.get(src_type)}2{DTYPE_MAP.get(dst_type)}"

    if cast_type == "s322f16":
        cast_type = "deq"
    return cast_type


def judge_var(num):
    """
    judge var if a tvm.var, tvm.const or python data type
    """
    var_dict = {
        "python_const": [int, float],
        "tvm_const": [tvm.tir.IntImm, tvm.tir.FloatImm],
        "tvm_var": [tvm.Var]
    }
    num_type = type(num)
    for key, value in var_dict.items():
        if num_type in value:
            return key

    dict_args = {"errCode": "E90001",
                 "detailed_cause": f"The input var type must be int, float, tvm.tir.IntImm, "
                                   f"tvm.tir.FloatImm or tvm.Var, while type is {num_type}."}
    raise RuntimeError(dict_args, get_error_message(dict_args))


def shape_to_list(shape):
    """
    translate tvm.shape to list type in python
    """
    return shape_util.shape_to_list(shape)


def int_ceil_div(num_a, num_b):
    """
    upper division
    """
    if num_b == 0:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": "The right input is zero!"}
        raise RuntimeError(dict_args, get_error_message(dict_args))
    return (num_a + num_b - 1) // num_b


def align(x_1, x_2):
    """
    do align

    """
    if x_2 == 0:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": "The right input is zero!"}
        raise RuntimeError(dict_args, get_error_message(dict_args))
    return (x_1 + x_2 - 1) // x_2 * x_2


def get_and_res(flag_a, flag_b):
    """
    logical AND
    """
    return flag_a and flag_b


def get_or_res(flag_a, flag_b):
    """
    logical OR
    """
    return flag_a or flag_b


def refine_axis(axis, shape):
    """
    refine_axis
    """
    if isinstance(axis, (tuple, list)):
        local_axis = axis
    else:
        local_axis = [axis]
    res_axis = []
    shape_len = len(shape)
    for i in local_axis:
        if i < 0:
            laxis = shape_len + i
        else:
            laxis = i
        if (laxis >= shape_len) or (laxis < 0):
            dict_args = {"errCode": "E90001",
                         "detailed_cause": f"laxis {laxis} must less than shape_len {shape_len} and bigger than zero!"}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        res_axis.append(laxis)
    return sorted(res_axis)


def _check(bool_res, append_str):
    if not bool_res:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": append_str}
        raise RuntimeError(dict_args, get_error_message(dict_args))


def auto_cast_tensor(tensor, intr, supported_types=None, is_auto_cast=True):
    """
    auto_cast_tensor
    """
    from .cast import _cast
    if isinstance(tensor, tvm.Tensor):
        dtype = tensor.dtype
        if supported_types is None:
            intrinsic = f"Intrinsic_{intr}"
            intr_is_support_dtype = intrinsic_check_support(intrinsic, dtype)
            intr_is_support_fp32 = intrinsic_check_support(intrinsic, "float32")
        else:
            intr_is_support_dtype = (dtype in supported_types)
            intr_is_support_fp32 = ("float32" in supported_types)

        if not intr_is_support_dtype:
            if intr_is_support_fp32 and is_cast_support(dtype, "float32"):
                tensor = _cast(tensor, "float32", is_auto_cast)
            else:
                tensor = _cast(tensor, "float16", is_auto_cast)

    return tensor


def get_tvm_scalar(scalar, dtype):
    """
    get_tvm_scalar
    """
    scalar_type = judge_var(scalar)
    if scalar_type == "tvm_const" and scalar.dtype != dtype:
        scalar = tvm.const(scalar.value, dtype=dtype)

    if scalar_type == "python_const":
        scalar = tvm.const(scalar, dtype=dtype)

    return scalar


def check_input_tensor_shape(tensor_shape):
    """
    check_tensor_shape
    """
    if isinstance(tensor_shape, tvm.Tensor):
        tensor_shape = tensor_shape.shape
    shape = shape_util.shape_to_list(tensor_shape)

    in_dynamic = operation.in_dynamic()
    for val in shape:
        if in_dynamic:
            if isinstance(val, int) and val < 0:
                dict_args = {"errCode": "E90001",
                             "detailed_cause": f"The dynamic input shape value can not be negative when it is integer "
                                               f"while val is {val}."}
                raise RuntimeError(dict_args, get_error_message(dict_args))
        else:
            if isinstance(val, int) is False or val < 0:
                dict_args = {"errCode": "E90001",
                             "detailed_cause": f"The static shape value must be positive integer while val is {val}."}
                raise RuntimeError(dict_args, get_error_message(dict_args))


def _axis_value_type_check(shape_len, value):
    """
    Check the value of the axis
    """
    if not isinstance(value, int):
        dict_args = {"errCode": "E90001",
                     "detailed_cause": f"type of axis value should be int, while axis type is {type(value)}."}
        raise RuntimeError(dict_args, get_error_message(dict_args))
    if value >= shape_len or value < -shape_len:
        dict_args = {"errCode": "E90001",
                     "detailed_cause": f"input axis {value} is out of range, it can be only from "
                                       f"{-shape_len} to {shape_len - 1}."}
        raise RuntimeError(dict_args, get_error_message(dict_args))
    if value < 0:
        value = shape_len + value
    return value


def reduce_axis_check(shape_len, axis):
    """
    Check the value of axis and return the sorted axis
    """
    axis = list(axis)
    if not hasattr(axis, 'index'):
        axis = _axis_value_type_check(shape_len, axis)
        return axis
    # 'pylint: disable=consider-using-enumerate
    for i in range(len(axis)):
        axis[i] = _axis_value_type_check(shape_len, axis[i])

    axis = list(set(axis))
    axis.sort()
    return axis


def util_astype(scalar, dtype):
    """
    :param scalar:
    :param dtype:
    :return:
    """
    if dtype == "complex32":
        _dtype = "float16"
    elif dtype == "complex64":
        _dtype = "float32"
    else:
        _dtype = dtype

    if isinstance(scalar, int):
        return tvm.const(scalar, "int").astype(_dtype)
    if isinstance(scalar, float):
        return tvm.const(scalar, "float").astype(_dtype)
    if isinstance(scalar, (tvm.tir.IntImm, tvm.tir.FloatImm)):
        return scalar.astype(_dtype)
    if isinstance(scalar, tvm.Var):
        return scalar.astype(_dtype)
    if isinstance(scalar, tvm.expr.BinaryOpExpr):
        return scalar.astype(_dtype)
    if isinstance(scalar, tvm.TensorSlice):
        return scalar
    dict_args = {"errCode": "E90001",
                 "detailed_cause": f"Scalar must be simple type, but now is {type(scalar)}."}
    raise RuntimeError(dict_args, get_error_message(dict_args))


def _get_priority_flag_value(priority_flag):
    if isinstance(priority_flag, (int, float)):
        return priority_flag
    return priority_flag.value


def in_dynamic_and_static_unify():
    """
    determine whether to perform the unification of dynamic and static shape
    """
    context = operation.get_context()
    return context is not None and context.get_mode() in ("dynamic", "static")


def dynamic_static_unify_fractal_format():
    """
    check if is nc1hwc0 format under dynamic or static context
    """
    context = operation.get_context()
    return context is not None and context.get_mode() in ("dynamic", "static") and \
        context.get_current_compute().get('_is_fractal_format')


def get_value(shape_object):
    """
    get the value of shape_object when having attr "value"
    """
    return shape_object.value if hasattr(shape_object, "value") else shape_object


def disable_broadcast_optimization():
    """
    judge whether dynamic broadcast op only use original classify pattern
    """
    # pre_static schedule do not have broadcast disable_optimization
    if not in_dynamic_and_static_unify():
        return False
    compile_info = operation.get_compile_info()
    return compile_info.get("_disable_optimization", False)
