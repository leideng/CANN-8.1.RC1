#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

from tbe.dsl.base.operation import get_context
from tbe.dsl.base.operation import add_compile_info_inner
from . import reduce_helper as helper
from .unknown_reduce_classifier import UnknownReduceClassifier
from .known_reduce_classifier import KnownReduceClassifier


class InputType:
    """
    type of shape
    """
    REDUCE_AXIS = "axis"
    BEFORE_REDUCE = "before"


def classify_nd_format(ins, keepdims):
    """
    classify nd format
    """
    ins_after_normalize = helper.normalize_ins(ins)
    for single_input in ins_after_normalize:
        if single_input.get("rel_pos_to_reduce") == InputType.REDUCE_AXIS:
            if single_input.get("value") is not None:
                add_compile_info_inner("_ori_axis", single_input.get("value"))
                get_context().add("_known_reduce_axis_flag", True)
                result = KnownReduceClassifier(ins_after_normalize, keepdims).classify()
            else:
                result = UnknownReduceClassifier(ins_after_normalize, keepdims).classify()

    return result