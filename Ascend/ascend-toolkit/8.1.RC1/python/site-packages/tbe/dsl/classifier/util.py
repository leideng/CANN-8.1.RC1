#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
util for classifier
"""
from enum import Enum
from enum import IntEnum
from enum import auto
from functools import reduce

from tbe.dsl.base import operation

VAR_BOUND_LIMIT = 2147483647

BLOCK_NUM_MAPPING = {
    "uint1": 256,
    "int4": 64,
    "bool": 32,
    "int8": 32,
    "uint8": 32,
    "float16": 16,
    "int16": 16,
    "uint16": 16,
    "float32": 8,
    "int32": 8,
    "uint32": 8,
    "int64": 4,
    "uint64": 4,
    "bfloat16": 16,
}

DTYPE_BYTE_MAPPING = {
    "uint1": 0.125,
    "int4": 0.5,
    "bool": 1,
    "int8": 1,
    "uint8": 1,
    "bfloat16": 2,
    "float16": 2,
    "int16": 2,
    "uint16": 2,
    "float32": 4,
    "int32": 4,
    "uint32": 4,
    "int64": 8,
    "uint64": 8
}


class ClassifyInsMode(Enum):
    """
    distinguish ins come from which classify
    """
    ELEWISE_CLASSIFY = auto()
    BROADCAST_CLASSIFY = auto()


class LoadModeType(IntEnum):
    """
    mode type enum
    0. LOAD3D
    1. LOAD2D
    2. W_SPLIT_LOAD3D
    3. DMA_CPY
    """
    LOAD3D = 0
    LOAD2D = 1
    W_SPLIT_LOAD3D = 2
    DMA_CPY = 3


def generate_range(shape):
    """
    generate range by shape
    :param shape:
    :return:
    """
    return [(1, None) if v == -1 else (v, v) for v in shape]


def combine_dim(dims):
    """
    combine dim
    :param dims:
    :return:
    """
    return reduce(lambda a, b: -1 if -1 in (a, b) else a * b, dims)


def combine_range(ranges, bound_limit = VAR_BOUND_LIMIT):
    """
    combine range
    :param ranges:
    :return:
    """

    def mul_ele(_a, _b):
        if _a is None or _b is None:
            return None
        _bound = _a * _b
        return bound_limit if _bound > bound_limit else _bound

    def mul(range1, range2):
        return [mul_ele(a, b) for a, b in zip(range1, range2)]

    return tuple(reduce(lambda r1, r2: mul(r1, r2), ranges))
