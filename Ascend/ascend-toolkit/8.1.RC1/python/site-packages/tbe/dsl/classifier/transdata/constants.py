#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright(C) 2022. Huawei Technologies Co., Ltd. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
transdata constants
"""
from tbe import tvm
from tbe.tvm import get_global_func


class TC:
    """
    Category of Transdata
    """
    GENERAL_FORWARD = "general.forward"
    GENERAL_C04_FORWARD = "general.c04.forward"
    GENERAL_BACKWARD = "general.backward"
    GENERAL_C04_BACKWARD = "general.c04.backward"
    REMOVE_SIZE_ONE_AXIS_FORWARD = "remove.size.one.axis.forward"
    REMOVE_SIZE_ONE_AXIS_BACKWARD = "remove.size.one.axis.backward"
    DATA_MOVE_FORWARD = "data.move.forward"
    DATA_MOVE_C04_FORWARD = "data.move.c04.forward"
    DATA_MOVE_BACKWARD = "data.move.backward"
    DATA_MOVE_C04_BACKWARD = "data.move.c04.backward"
    BORROW_N_B8B16_BACKWARD = "borrow.n.b8b16.backward"
    BORROW_H_B8B16_BACKWARD = "borrow.h.b8b16.backward"
    BORROW_N_B8B16_FORWARD = "borrow.n.b8b16.forward"
    BORROW_H_B8B16_FORWARD = "borrow.h.b8b16.forward"


class Tiling:
    T0 = "T0"
    TRANSDATAC04 = "TransdataC04"
    TRANSDATAC04BACKWARD = "TransdataC04Backward"


class TransposeMode:
    """
    T816: Transpose (8,16) -> (16,8)
    T168: Transpose (16,8) -> (8,16)
    """
    T168 = 1
    T816 = 3

# Dtype
INT64 = "int64"


# BIT_SIZE
B64 = 8
B32 = 4
B16 = 2
B8 = 1

# C0_SIZE
C08 = 8
C16 = 16
C32 = 32

# SHAPE_LEN
SHAPE_LEN_3 = 3

# STRIDE
STRIDE_2 = 2
STRIDE_3 = 3
STRIDE_16 = 16
BLK_STRIDE_LIMIT = 255
PACKET_SENDING_RATE = 256

UNKNOWN_DIM = -1
FP32_ALIGN_SIZE = 128
RESERVED_SPACE = 2560
COMMON_ALIGN_NEED_NODES = 4

DEFAULT = "default"
NO_OVERLAP = "no_overlap"

# DIRECTION
C04FORWARD = 2
C04BACKWARD = 3
FORWARD = 2
BACKWARD = 3
FORWARD_DATA_MOVE = 4
BACKWARD_DATA_MOVE = 5
CONST_KEY = 123

# PAD_MODE
DO_TRANSPOSE_PAD = 2
DO_NOTHING = 0
DO_PAD = 1
PAD_32 = 32
PAD_16 = 16
PAD_8 = 8

# ATTR_FLAG
STORAGE_ALIGN = 0
COMMON_ALIGN = 1
NOT_WORK = 0
WORK = 1
NOT_ALIGN = 0
ALIGN = 1

# BRANCH
UB_CATEGORY_GENERAL = 0
UB_CATEGORY_GENERAL_C04 = 1
UB_CATEGORY_DATA_MOVE_C04 = 2
UB_CATEGORY_DATA_MOVE = 1
UB_CATEGORY_BN = 2
UB_CATEGORY_BH = 3
UB_CATEGORY_REMOVE_SIZE_ONE_AXIS = 4

GENERAL_BRANCH = [TC.GENERAL_FORWARD, TC.GENERAL_BACKWARD, TC.GENERAL_C04_FORWARD, TC.GENERAL_C04_BACKWARD,
                  TC.REMOVE_SIZE_ONE_AXIS_FORWARD, TC.REMOVE_SIZE_ONE_AXIS_BACKWARD]
DATA_MOVE_BRANCH = [TC.DATA_MOVE_FORWARD, TC.DATA_MOVE_BACKWARD, TC.DATA_MOVE_C04_BACKWARD]
BH_BRANCH = [TC.BORROW_H_B8B16_BACKWARD, TC.BORROW_H_B8B16_FORWARD]
BN_BRANCH = [TC.BORROW_N_B8B16_BACKWARD, TC.BORROW_N_B8B16_FORWARD]

SCH_MAPPING = {
    TC.GENERAL_FORWARD: TC.GENERAL_FORWARD,
    TC.GENERAL_BACKWARD: TC.GENERAL_BACKWARD,
    TC.REMOVE_SIZE_ONE_AXIS_FORWARD: TC.GENERAL_FORWARD,
    TC.REMOVE_SIZE_ONE_AXIS_BACKWARD: TC.GENERAL_BACKWARD,
    TC.DATA_MOVE_FORWARD: TC.GENERAL_FORWARD,
    TC.DATA_MOVE_BACKWARD: TC.GENERAL_BACKWARD,
    TC.GENERAL_C04_FORWARD: TC.GENERAL_C04_FORWARD,
    TC.GENERAL_C04_BACKWARD: TC.GENERAL_C04_BACKWARD,
    TC.DATA_MOVE_C04_FORWARD: TC.GENERAL_C04_FORWARD,
    TC.DATA_MOVE_C04_BACKWARD: TC.GENERAL_C04_BACKWARD,
    TC.BORROW_N_B8B16_BACKWARD: TC.BORROW_N_B8B16_BACKWARD,
    TC.BORROW_N_B8B16_FORWARD: TC.BORROW_N_B8B16_FORWARD,
    TC.BORROW_H_B8B16_FORWARD: TC.BORROW_H_B8B16_FORWARD,
    TC.BORROW_H_B8B16_BACKWARD: TC.BORROW_H_B8B16_BACKWARD
}

TILING_MAPPING = {
    TC.GENERAL_FORWARD: Tiling.T0,
    TC.GENERAL_BACKWARD: Tiling.T0,
    TC.REMOVE_SIZE_ONE_AXIS_FORWARD: Tiling.T0,
    TC.REMOVE_SIZE_ONE_AXIS_BACKWARD: Tiling.T0,
    TC.DATA_MOVE_FORWARD: Tiling.T0,
    TC.DATA_MOVE_BACKWARD: Tiling.T0,
    TC.BORROW_N_B8B16_BACKWARD: Tiling.T0,
    TC.BORROW_N_B8B16_FORWARD: Tiling.T0,
    TC.BORROW_H_B8B16_FORWARD: Tiling.T0,
    TC.BORROW_H_B8B16_BACKWARD: Tiling.T0,
    TC.GENERAL_C04_FORWARD: Tiling.TRANSDATAC04,
    TC.GENERAL_C04_BACKWARD: Tiling.TRANSDATAC04BACKWARD,
    TC.DATA_MOVE_C04_FORWARD: Tiling.TRANSDATAC04,
    TC.DATA_MOVE_C04_BACKWARD: Tiling.TRANSDATAC04
}

CATEGORY_MAP_DIRECTION = {
    TC.GENERAL_FORWARD: FORWARD,
    TC.GENERAL_BACKWARD: BACKWARD,
    TC.REMOVE_SIZE_ONE_AXIS_FORWARD: FORWARD,
    TC.REMOVE_SIZE_ONE_AXIS_BACKWARD: BACKWARD,
    TC.GENERAL_C04_FORWARD: C04FORWARD,
    TC.GENERAL_C04_BACKWARD: C04BACKWARD,
    TC.DATA_MOVE_FORWARD: FORWARD_DATA_MOVE,
    TC.DATA_MOVE_BACKWARD: BACKWARD_DATA_MOVE,
    TC.DATA_MOVE_C04_FORWARD: C04FORWARD,
    TC.DATA_MOVE_C04_BACKWARD: C04BACKWARD,
    TC.BORROW_N_B8B16_BACKWARD: BACKWARD,
    TC.BORROW_N_B8B16_FORWARD: FORWARD,
    TC.BORROW_H_B8B16_FORWARD: FORWARD,
    TC.BORROW_H_B8B16_BACKWARD: BACKWARD
}

UB_CATEGORY_COUNT = 5
CATEGORY_MAP_UB = {
    TC.GENERAL_FORWARD: UB_CATEGORY_GENERAL,
    TC.GENERAL_BACKWARD: UB_CATEGORY_GENERAL,
    TC.REMOVE_SIZE_ONE_AXIS_FORWARD: UB_CATEGORY_REMOVE_SIZE_ONE_AXIS,
    TC.REMOVE_SIZE_ONE_AXIS_BACKWARD: UB_CATEGORY_REMOVE_SIZE_ONE_AXIS,
    TC.GENERAL_C04_FORWARD: UB_CATEGORY_GENERAL_C04,
    TC.GENERAL_C04_BACKWARD: UB_CATEGORY_GENERAL_C04,
    TC.DATA_MOVE_C04_FORWARD: UB_CATEGORY_DATA_MOVE_C04,
    TC.DATA_MOVE_C04_BACKWARD: UB_CATEGORY_DATA_MOVE_C04,
    TC.DATA_MOVE_FORWARD: UB_CATEGORY_DATA_MOVE,
    TC.DATA_MOVE_BACKWARD: UB_CATEGORY_DATA_MOVE,
    TC.BORROW_N_B8B16_BACKWARD: UB_CATEGORY_BN,
    TC.BORROW_N_B8B16_FORWARD: UB_CATEGORY_BN,
    TC.BORROW_H_B8B16_FORWARD: UB_CATEGORY_BH,
    TC.BORROW_H_B8B16_BACKWARD: UB_CATEGORY_BH
}

FORMAT = {
    "fuse_mode": "int64",
    "ub_category": "int64",
    "shape_type": "int64",
    "block_split_idx": "int64",
    "ub_split_first_idx": "int64",
    "ub_split_second_idx": "int64",
    "block_factor": "int64",
    "ub_first_factor": "int64",
    "ub_second_factor": "int64",
    "transpose_work": "int64",
    "avoid_bank_conflict": "int64",
    "last_dim_type": "int64",
    "block_dim": "int64"
}

FORMATC04 = {
    "ub_first_factor": "int64",
    "ub_second_factor": "int64",
    "block_factor": "int64",
    "block_split_idx": "int64",
    "block_dim": "int64",
    "is_split_full_hw": "int64"
}

FORMATC04BACKWARD = {
    "ub_first_factor": "int64",
    "ub_second_factor": "int64",
    "block_factor": "int64",
    "block_split_idx": "int64",
    "block_dim": "int64",
}

# decide kinds of cases
RULEC04 = [("ub_category", range(3), 10 ** 4),
           ("db", range(4), 10 ** 3),
           ("ub_split_first_idx", range(2), 10 ** 2),
           ("block_split_idx", range(2), 10 ** 1),
           ("shape_type", range(2), 10 ** 0)]

RULE = [("db", range(2), 10 ** 10),
        ("is_forward", [2, 3, 4, 5], 10 ** 9),
        ("ub_category", range(9), 10 ** 8),
        ("shape_type", range(9), 10 ** 7),
        ("block_split_idx", range(9), 10 ** 6),
        ("ub_split_first_idx", range(9), 10 ** 5),
        ("ub_split_second_idx", range(9), 10 ** 4),
        ("transpose_work", range(2), 10 ** 3),
        ("avoid_bank_conflict", range(2), 10 ** 2),
        ("last_dim_type", range(2), 10 ** 1),
        ("binary_c0", range(6), 10 ** 0), ]

DIFF_ATTR = {
    "shape_type": [COMMON_ALIGN, STORAGE_ALIGN],
    "avoid_conflict_work": [NOT_WORK, WORK],
    "last_dim_type": [NOT_ALIGN, ALIGN],
}

SUPPORT_VOR_FORMATS = [["NHWC", "NC1HWC0"], ["NC1HWC0", "NHWC"],
                       ["ND", "FRACTAL_NZ"], ["FRACTAL_NZ", "ND"]]

SUPPORT_REMOVE_SIZE_ONE_AXIS_FORMATS = [("NCHW", "FRACTAL_Z"), ("FRACTAL_Z", "NCHW")]

DATA_TYPE_SIZE = {
    "int64": 8, "uint64": 8,
    "float32": 4, "int32": 4, "uint32": 4, "hfloat32": 4,
    "bfloat16": 2, "float16": 2, "int16": 2, "uint16": 2,
    "int8": 1, "uint8": 1, "bool": 1,
}

REPLACE_TYPE = {
    "bfloat16": "float16",
    "hfloat32": "float32"
}

REINTERPRET_TYPE = {"float32": "float16", "int32": "int16",
                    "uint32": "uint16", "bfloat32": "bfloat16",
                    "int64": "int16", "uint64": "uint16"}

VNC_MAP = {
    # --------C0, TYPES, TRANS_DIRECTORY, INSTR_SUPPORT, M_ALIGN, N_ALIGN--------------------
    (C08, B32, True, True): (C08, C16),
    (C16, B32, True, True): (C16, C08),
    (C08, B32, True, False): (FP32_ALIGN_SIZE, C08),
    (C16, B32, True, False): (FP32_ALIGN_SIZE, C08),

    (C08, B32, False, True): (C16, C08),
    (C16, B32, False, True): (C08, C16),
    (C08, B32, False, False): (FP32_ALIGN_SIZE, C08),
    (C16, B32, False, False): (FP32_ALIGN_SIZE, C08),

    (C08, B16, True, True): (C08, C16),
    (C16, B16, True, True): (C16, C16),
    (C08, B16, False, True): (C16, C08),
    (C16, B16, False, True): (C16, C16),

    (C32, B8, True, True): (C32, C32),
    (C16, B8, True, True): (C16, C16),
    (C32, B8, False, True): (C32, C32),
    (C16, B8, False, True): (C16, C16),
}


def merge(i, j):
    # combine each ele
    res = []
    for p in (i, j):
        if isinstance(p, tuple):
            res.extend(p)
        else:
            res.append(p)
    return tuple(res)


def combine2(a, b):
    # combine two list
    res = []
    for i in a:
        for j in b:
            res.append(merge(i, j))
    return res


def combine_n(*args):
    # combine result
    if len(args) == 2:
        return combine2(*args)
    return combine2(args[0], combine_n(*args[1:]))


def get_reshape(tensor_):
    """
    Get reshape-info from reshape-tensor
    """
    axes = []
    if tensor_ is not None:
        for x in list(tensor_.op.attrs["axes"]):
            if isinstance(x, tvm.container.Array):
                axes.append([int(j) for j in list(x)])
            else:
                axes.append(int(x))
    return axes


def intrinsic_check_support(insn="Intrinsic_vnchwconv", dtype="float32"):
    """
    Func: Judge support of instruction, not soft-api
    AvoidPassBug: vnchwconv had problem while pass not changed x.ini
    """
    func = get_global_func("cce.intrinsic_check_support")
    if insn == "Intrinsic_vnchwconv" and dtype == "float32":
        insn, dtype = "Intrinsic_vmins", ""
    return 1 if func(insn, dtype) == "True" else 0
