#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.    
# ============================================================================
"""
c04 transdata
"""
import copy
from tbe.dsl.base import operation
from tbe.common.utils.errormgr import get_error_message
from tbe.common.platform.platform_info import get_soc_spec
from .constants import UNKNOWN_DIM
from .constants import TC
from .transdata_classifier import input_is_const
from .transdata_classifier import TransdataClassify

BIT_RATIO_DICT = {"bfloat16": 2, "float16": 2, "int16": 2, "uint16": 2,
                  "float32": 4, "int32": 4, "uint32": 4}
BLOCK_SIZE = 32


class C04ForwardClassify(TransdataClassify):
    """
    Only support NCHW->FZC04 FP16/BF16 [Simple]
    # 建议抽象父类后，重新使能超类
    """

    def __init__(self, ins):
        self.ins = copy.deepcopy(ins)
        self.src_shape = ins[0].get("shape", None)
        self.dst_shape = ins[1].get("shape", None)
        self.src_format = self.ins[0].get("format", None)
        self.dst_format = self.ins[1].get("format", None)
        self.is_const = input_is_const(self.src_shape)
        self.is_forward = True
        operation.get_context().add("_transdata_format", [self.src_format, self.dst_format])

    @classmethod
    def get_category(cls):
        return "c04.forward"

    def classify(self):
        operation.add_compile_info_inner("_is_const", self.is_const)
        operation.add_compile_info_inner("_is_foward", self.is_forward)
        if [self.src_format, self.dst_format] != ["NCHW", "FRACTAL_Z_C04"]:
            dict_args = {"errCode": "E80001", "detailed_caused":
                "Only support NCHW->FRACTAL_Z_C04, "
                "but [SrcFormat] is %s [DstFormat] is % s" % (self.src_format, self.dst_format)}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        # 保证输出Interface与其他TransData统一
        return self.cst_process() if self.is_const else self.dync_process()

    def cst_process(self):
        n, c, h, w = self.src_shape
        src_shape = [n, c, h * w]

        self.ins[0]["transdata_category"] = TC.GENERAL_C04_FORWARD
        self.ins[0]["is_forward"] = True
        self.ins[0]["shape"] = src_shape
        self.ins[1] = self.dst_shape
        self.ins[2] = "c04Forward"
        return [self.ins, ]

    def dync_process(self):
        src_shape = [-1, -1, -1]
        dst_shape = [-1, -1, self.dst_shape[-2], self.dst_shape[-1]]

        self.ins[0]["transdata_category"] = TC.GENERAL_C04_FORWARD
        self.ins[0]["is_forward"] = True
        self.ins[0]["shape"] = src_shape
        self.ins[1] = dst_shape
        self.ins[2] = "c04Forward"
        return [self.ins, ]


class C04BackwardClassify(TransdataClassify):
    """
    Only support FZC04->NCHW FP32 [Simple]
    # 建议抽象父类后，重新使能超类
    """
    def __init__(self, ins):
        self.ins = copy.deepcopy(ins)
        self.src_shape = ins[0].get("shape", None)
        self.dst_shape = ins[1].get("shape", None)
        self.src_format = self.ins[0].get("format", None)
        self.dst_format = self.ins[1].get("format", None)
        self.is_const = input_is_const(self.src_shape)
        self.is_forward = False
        operation.get_context().add("_transdata_format", [self.src_format, self.dst_format])

    @classmethod
    def get_category(cls):
        return "c04.backward"

    def classify(self):
        # put paras for transdata_c04_tilingcase.py
        operation.add_compile_info_inner("_is_const", self.is_const)
        operation.add_compile_info_inner("_is_foward", self.is_forward)

        # put paras for transdata_c04_compute.py
        if [self.src_format, self.dst_format] != ["FRACTAL_Z_C04", "NCHW"]:
            dict_args = {"errCode": "E80001", "detailed_caused":
                "Only support FRACTAL_Z_C04->NCHW, "
                "but [SrcFormat] is %s [DstFormat] is % s" % (self.src_format, self.dst_format)}
            raise RuntimeError(dict_args, get_error_message(dict_args))
        return self.cst_process() if self.is_const else self.dync_process()

    def cst_process(self):
        n, c, h, w = self.dst_shape
        dst_shape = [n, c, h * w]

        self.ins[0]["transdata_category"] = TC.GENERAL_C04_BACKWARD
        self.ins[0]["is_forward"] = False
        self.ins[0]["shape"] = self.src_shape
        self.ins[1] = dst_shape
        self.ins[2] = "c04Backward"
        return [self.ins, ]

    def dync_process(self):
        src_shape = [-1, -1, self.src_shape[-2], self.src_shape[-1]]
        dst_shape = [-1, -1, -1]

        self.ins[0]["transdata_category"] = TC.GENERAL_C04_BACKWARD
        self.ins[0]["is_forward"] = False
        self.ins[0]["shape"] = src_shape
        self.ins[1] = dst_shape
        self.ins[2] = "c04Backward"
        return [self.ins, ]

