from tbe.common.utils import log
from tbe.dsl.static_schedule.conv_fixpipefusion_schedule import FixpipeFusion
from tbe.dsl.static_schedule.conv_fixpipefusion_schedule import ELTWISE_SRC_STR


def record_n_optimization_log_for_inner_batch_fix_pipe(fixpipe_fusion_object: FixpipeFusion):
    """
    For inner-batch & fixpipe, there will be 'BatchCL0' batches of data at CL0.
    Normally, they could be moved to OUT/UB by 'BatchCL0' fixpipe instructions, of whose N = nc_factor * n0.
    But in some certain situations, a single instruction can do it by set N to BatchCL0 * nc_factor * n0.
    This method judge whether the optimization above should be performed and print log.
    The actual optimization prodecure will be fully performed during EmitInsn.
    """
    res_tensors = fixpipe_fusion_object.fixpipe_res_list
    for fixpipe_res_tensor in res_tensors:
        log.debug("Inner-batch flag check for fixpipe result %s",
                  fixpipe_res_tensor.name)
        tensor_info = fixpipe_fusion_object.fixpipe_info_dict.get(fixpipe_res_tensor)
        param_names = tensor_info.get("fixpipe_param_names")
        nz2nd_flag = tensor_info.get("nz2nd_flag")
        antiquant_flag = tensor_info.get("anti_quant_flag")
        # Not every element in param_names is ELTWISE_SRC_STR -> channel_wise_input
        channel_wise_input_flag = False
        for param_name in param_names:
            if param_name != ELTWISE_SRC_STR:
                channel_wise_input_flag = True
                break
        log.debug("Flag check: nz2nd = %s, antiquant = %s, channel-wise = %s",
                  nz2nd_flag, antiquant_flag, channel_wise_input_flag)
        if nz2nd_flag or antiquant_flag or channel_wise_input_flag:
            log.debug("N for fixpipe should be nc_factor*n0.")
            continue
        # op.name identifies channel-split / channel-merge
        channelsplit_flag = "fixpipe_channel_split" in fixpipe_res_tensor.op.name \
                or "res_fp32_conv2d" in fixpipe_res_tensor.op.name
        channelmerge_flag = "fixpipe_channel_merge" in fixpipe_res_tensor.op.name
        log.debug("Flag check: channel-split = %s, channel-merge = %s",
                  channelsplit_flag, channelmerge_flag)
        if channelsplit_flag:
            log.debug(
                "N for fixpipe should be BatchCL0*nc_factor*n0 if Cout mod N0 == 0, otherwise nc_factor*n0.")
            continue
        if channelmerge_flag:
            log.debug(
                "N for fixpipe should be BatchCL0*nc_factor*n0 if Cout mod C0 == 0, otherwise nc_factor*n0.")
            continue
        log.debug("N for fixpipe should be BatchCL0*nc_factor*n0.")
