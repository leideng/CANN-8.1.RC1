#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2021. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
ascend_quant tiling case
"""
from tbe.dsl.base.operation import register_tiling_case
from tbe.dsl.base import operation
from .constants import Pattern
from .util import shape_to_list
from .ascend_anti_quant_tilingcase import QuantComputeGraphInfo
from .ascend_anti_quant_tilingcase import gen_tiling_case
from .ascend_anti_quant_tilingcase import gen_const_tiling_case
from .ascend_anti_quant_tilingcase import calc_tiling_key
from .ascend_anti_quant_tilingcase import gen_compile_info


# pylint: disable=unidiomatic-typecheck,unused-argument,too-many-instance-attributes,too-many-arguments
@register_tiling_case(pattern=Pattern.ASCEND_QUANT)
def calc_tiling_case(outs, option=None):
    """
    quant tiling case
    """
    outs = list(outs) if isinstance(outs, (list, tuple)) else [outs]
    out = outs[0]
    shape = shape_to_list(out.shape)

    mode = operation.get_context().get("quant_mode")
    graph_info = QuantComputeGraphInfo(outs, "AscendQuant")
    current_compute = operation.get_context().get_current_compute()
    current_compute.add("quant_graph_info", graph_info)
    fuse_flag = 1 if graph_info.elewise_fuse else 0
    gen_compile_info(graph_info, fuse_flag)

    tiling_case_list = []
    if mode == "const":
        tiling_case_list += gen_const_tiling_case(graph_info)
    else:
        tiling_case_list += gen_tiling_case(0, len(shape) - 1, len(shape) - 1, True)
        tiling_case_list += gen_tiling_case(1, len(shape) - 2, len(shape) - 1, False)

    for tiling_case in tiling_case_list:
        calc_tiling_key(shape, tiling_case)

    return tiling_case_list
