#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2022. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the Apache License Version 2.0.
You may not use this file except in compliance with the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
Apache License for more details at
http://www.apache.org/licenses/LICENSE-2.0

resize pattern parser
"""
from typing import Dict
from typing import List
from typing import Union

from tbe.dsl.unify_schedule.constants import ComputeType
from tbe.dsl.unify_schedule.constants import Pattern
from tbe.dsl.unify_schedule.pattern_manager import PatternParser
from tbe.tvm import Tensor


class ResizePatternParser(PatternParser):

    def __init__(self, outs, compute_type_size_map, compute_type_tensor_map):
        # type: (Union[Tensor, List[Tensor]], Dict[ComputeType, int], Dict[ComputeType, List[Tensor]]) -> None
        super().__init__(outs, compute_type_size_map, compute_type_tensor_map)

    def match(self):
        """
        check whether compute graph matches the current pattern
        """
        ph_size = self.compute_type_size_map.get(ComputeType.PLACEHOLDER, 0)
        resize_size = self.compute_type_size_map.get(ComputeType.RESIZE, 0)
        # support fuse with cast_to
        cast_size = self.compute_type_size_map.get(ComputeType.CAST, 0)
        total = self.compute_type_size_map.get(ComputeType.ANY, 0)

        if resize_size == 0:
            return False

        return ph_size + resize_size + cast_size == total

    def get_pattern(self):
        """
        return the current pattern
        """
        return Pattern.RESIZE
