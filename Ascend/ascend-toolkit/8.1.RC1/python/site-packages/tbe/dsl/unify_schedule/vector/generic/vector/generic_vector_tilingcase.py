#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
generic vector tilingcase
"""
from tbe.dsl.base.operation import add_compile_info_inner
from tbe.dsl.base.operation import get_context

from ..common import constants
from ..common.info import graph_info
from ..common.info import soc_info
from .... import constants as unify_constants
from ....computation import Computation
from ....schedule import Schedule


class CalcGenericVectorTilingCase(Computation):
    def __init__(self, outs, option):
        self.outs = outs
        self.option = option

    @classmethod
    def get_instance(cls, outs, option):
        return cls(outs, option)

    @classmethod
    def get_supported_pattern(cls):
        return [unify_constants.Pattern.GENERIC_VECTOR]

    @classmethod
    def get_supported_soc(cls):
        return ["default"]

    def get_sub_pattern(self):
        return unify_constants.GenericVectorPattern.GV_0

    def do_tiling_case(self):
        outs = list(self.outs) if isinstance(self.outs, (list, tuple)) else [self.outs]

        current_compute = get_context().get_current_compute()
        graph_info_obj = graph_info.GraphInfo(outs)
        current_compute.add(constants.ContextKey.COMPUTE_GRAPH_INFO, graph_info_obj)

        tiling_case_list = []
        tiling_case_list.append(GenericVectorTilingCase(graph_info_obj))
        _add_compile_info(graph_info_obj)

        return tiling_case_list


def _add_compile_info(graph_info_obj: graph_info.GraphInfo):
    # soc info
    soc_info_list = [soc_info.SocInfo.get_core_num(), int(soc_info.SocInfo.soc_support_less_one_block_mte())]
    add_compile_info_inner(constants.CompileInfoKey.SOC_INFO, soc_info_list)
    # compute info
    keep_dims = len(graph_info_obj.res_tensor_obj.actual_shape) == len(graph_info_obj.max_shape)
    compute_info_list = \
        [graph_info_obj.compute_type.value, int(graph_info_obj.is_exist_output_after_reduce), int(keep_dims)]
    add_compile_info_inner(constants.CompileInfoKey.COMPUTE_INFO, compute_info_list)
    # block size
    block_size_list = [graph_info_obj.max_block_ele_num, graph_info_obj.max_output_block_ele_num]
    add_compile_info_inner(constants.CompileInfoKey.BLOCK_SIZE, {graph_info_obj.compute_type.value: block_size_list})


class GenericVectorTilingCase:
    def __init__(self, graph_info_obj: graph_info.GraphInfo):
        self._block_split_axis_index = None
        self._ub_split_axis_index = None
        self._block_factor = None
        self._ub_factor = None
        self._block_dim = None

        self._schedule_pattern = None

    @property
    def block_split_axis_index(self):
        return self._block_split_axis_index

    @block_split_axis_index.setter
    def block_split_axis_index(self, value):
        self._block_split_axis_index = value

    @property
    def ub_split_axis_index(self):
        return self._ub_split_axis_index

    @ub_split_axis_index.setter
    def ub_split_axis_index(self, value):
        self._ub_split_axis_index = value

    @property
    def block_factor(self):
        return self._block_factor

    @block_factor.setter
    def block_factor(self, value):
        self._block_factor = value

    @property
    def ub_factor(self):
        return self._ub_factor

    @ub_factor.setter
    def ub_factor(self, value):
        self._ub_factor = value

    @property
    def block_dim(self):
        return self._block_dim

    @block_dim.setter
    def block_dim(self, value):
        self._block_dim = value

    @property
    def schedule_pattern(self):
        return self._schedule_pattern
