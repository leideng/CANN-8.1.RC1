#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
node base info
"""
from .. import constants
from .. import helper


class NodeBase:
    def __init__(self):
        self._node_type = None
        self._node_pattern = None

    @property
    def node_type(self):
        return self._node_type

    @property
    def node_pattern(self):
        return self._node_pattern


class BroadcastNodeBase(NodeBase):
    def __init__(self):
        NodeBase.__init__(self)
        self._broadcast_axes_indices = None
        self._length = None
        self._node_type = constants.NodeType.BROADCAST

    @property
    def broadcast_axes_indices(self):
        return self._broadcast_axes_indices

    @broadcast_axes_indices.setter
    def broadcast_axes_indices(self, value):
        self._broadcast_axes_indices = value

    @property
    def length(self):
        return self._length

    def is_last_broadcast(self):
        self._check_broadcast_axes_indices()

        return self._length - 1 in self._broadcast_axes_indices

    def is_single_broadcast(self):
        self._check_broadcast_axes_indices()

        return len(self._broadcast_axes_indices) == 1

    def is_all_broadcast(self):
        self._check_broadcast_axes_indices()

        return len(self._broadcast_axes_indices) == self._length

    def is_none_broadcast(self):
        self._check_broadcast_axes_indices()

        return len(self._broadcast_axes_indices) == 0

    def _get_node_pattern(self):
        self._check_broadcast_axes_indices()

        return ''.join(("B" if idx in self._broadcast_axes_indices else "A" for idx in range(self._length)))

    def _check_broadcast_axes_indices(self):
        helper.check_true(self._broadcast_axes_indices is not None,
                          "value of broadcast_axes_indices in class BroadcastNodeBase is None, please check.")


class ReduceNodeBase(NodeBase):
    def __init__(self):
        NodeBase.__init__(self)
        self._reduce_axes_indices = None
        self._before_reduce_shape_length = None
        self._after_reduce_shape_length = None
        self._keep_dims = None
        self._node_type = constants.NodeType.REDUCE

    @property
    def reduce_axes_indices(self):
        return self._reduce_axes_indices

    @reduce_axes_indices.setter
    def reduce_axes_indices(self, value):
        self._reduce_axes_indices = value

    @property
    def keep_dims(self):
        return self._keep_dims

    @property
    def before_reduce_shape_length(self):
        return self._before_reduce_shape_length

    @property
    def after_reduce_shape_length(self):
        return self._after_reduce_shape_length

    def is_last_reduce(self):
        self._check_reduce_axes_indices()

        return self._before_reduce_shape_length - 1 in self._reduce_axes_indices

    def is_single_reduce(self):
        self._check_reduce_axes_indices()

        return len(self._reduce_axes_indices) == 1

    def is_all_reduce(self):
        self._check_reduce_axes_indices()

        return len(self._reduce_axes_indices) == self._before_reduce_shape_length

    def is_none_reduce(self):
        self._check_reduce_axes_indices()

        return len(self._reduce_axes_indices) == 0

    def is_discontinuous_reduce(self):
        self._check_reduce_axes_indices()

        discontinuous_axes_num = 1
        for i in range(1, len(self._reduce_axes_indices)):
            if self._reduce_axes_indices[i] != self._reduce_axes_indices[i - 1] + 1:
                discontinuous_axes_num += 1

        return discontinuous_axes_num >= 2

    def _get_node_pattern(self):
        self._check_reduce_axes_indices()
        shape_length = self._before_reduce_shape_length

        return ''.join(("R" if idx in self._reduce_axes_indices else "A" for idx in range(shape_length)))

    def _check_reduce_axes_indices(self):
        helper.check_true(self._reduce_axes_indices is not None,
                          "value of reduce_axes_indices in class ReduceNodeBase is None, please check.")


class DataMoveNodeBase(NodeBase):
    def __init__(self):
        NodeBase.__init__(self)
        self._node_type = constants.NodeType.DATA_MOVE


class CommonNodeBase(NodeBase):
    def __init__(self):
        NodeBase.__init__(self)
        self._node_type = constants.NodeType.COMMON
