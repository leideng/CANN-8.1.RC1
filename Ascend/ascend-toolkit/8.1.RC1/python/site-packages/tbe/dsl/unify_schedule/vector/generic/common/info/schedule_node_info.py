#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.constants
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
schedule node info
"""
from typing import Type

from tbe.tvm import Tensor
from tbe.tvm import Schedule
from tbe.tvm import Stage

from . import insn_info
from . import stage_info
from . import tensor_info
from .. import constants


class ScheduleNode:
    def __init__(self, sch, tensor_obj):
        self._sch: Schedule = sch
        self._tensor_obj: Type[tensor_info.TensorBase] = tensor_obj
        self._node_type: constants.NodeType = tensor_obj.node_type
        self._stage_obj: Type[stage_info.StageBase] = self.gen_stage_obj(self._sch, self._tensor_obj, self._node_type)
        self._insn_obj: Type[insn_info.InsnBase] =\
            self.gen_insn_obj(self._tensor_obj, self._stage_obj, self._node_type)
        self._producers = []
        self._consumers = []
        self._buffer_size_ratio = 1
        self._extra_node_size_ratio = 1

    def __eq__(self, sch_node_obj):
        return self._stage_obj == sch_node_obj._stage_obj

    def __hash__(self):
        return self._stage_obj.__hash__()

    def __ne__(self, sch_node_obj):
        return self._stage_obj != sch_node_obj._stage_obj

    def __repr__(self):
        return self._stage_obj.__repr__()

    @property
    def producers(self):
        return self._producers

    @producers.setter
    def producers(self, value):
        self._producers = value

    @property
    def consumers(self):
        return self._consumers

    @consumers.setter
    def consumers(self, value):
        self._consumers = value

    @property
    def buffer_size_ratio(self):
        return self._buffer_size_ratio

    @buffer_size_ratio.setter
    def buffer_size_ratio(self, value):
        self._buffer_size_ratio = value

    @property
    def extra_node_size_ratio(self):
        return self._extra_node_size_ratio

    @extra_node_size_ratio.setter
    def extra_node_size_ratio(self, value):
        self._extra_node_size_ratio = value

    @property
    def tensor_obj(self):
        return self._tensor_obj

    @property
    def stage_obj(self):
        return self._stage_obj

    @property
    def insn_obj(self):
        return self._insn_obj

    @property
    def node_type(self):
        return self._node_type

    @staticmethod
    def gen_stage_obj(sch, tensor_obj, node_type) -> Type[stage_info.StageBase]:
        tvm_stage = sch[tensor_obj.tvm_tensor]
        type_and_stage_map = {
            constants.NodeType.BROADCAST: stage_info.BroadcastStage,
            constants.NodeType.REDUCE: stage_info.ReduceStage,
            constants.NodeType.DATA_MOVE: stage_info.DataMoveStage,
            constants.NodeType.COMMON: stage_info.CommonStage
        }

        return type_and_stage_map.get(node_type)(tvm_stage)

    @staticmethod
    def gen_insn_obj(tensor_obj, stage_obj, node_type) -> Type[insn_info.InsnBase]:
        type_and_insn_map = {
            constants.NodeType.BROADCAST: insn_info.BroadcastInsn,
            constants.NodeType.REDUCE: insn_info.ReduceInsn,
            constants.NodeType.DATA_MOVE: insn_info.DataMoveInsn,
            constants.NodeType.COMMON: insn_info.CommonInsn
        }

        return type_and_insn_map.get(node_type)(tensor_obj, stage_obj)

    def is_common(self):
        return self._node_type == constants.NodeType.COMMON

    def is_broadcast(self):
        return self._node_type == constants.NodeType.BROADCAST

    def is_reduce(self):
        return self._node_type == constants.NodeType.REDUCE

    def is_data_move(self):
        return self._node_type == constants.NodeType.DATA_MOVE

    def get_tvm_stage(self) -> Tensor:
        return self._stage_obj.tvm_stage

    def get_tvm_tensor(self) -> Stage:
        return self._tensor_obj.tvm_tensor
