#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright(C) 2022. Huawei Technologies Co., Ltd. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
Entrance
"""
from abc import abstractmethod
from tbe.dsl.base.operation import get_context
from tbe.dsl.base.operation import register_build_pointcut
from tbe.dsl.unify_schedule.computation import Computation
from tbe.dsl.unify_schedule.constants import Pattern
from tbe.dsl.classifier.transdata.constants import SCH_MAPPING
from tbe.dsl.classifier.transdata.constants import TILING_MAPPING
from tbe.dsl.classifier.transdata.constants import DEFAULT

_tiling_cases = {}


class Dispatching(Computation):
    """
    Tiling Interface
    """

    def __init__(self, outs, option):
        self.outs = outs
        self.option = option
        self.classifier = get_context().get_current_compute().get("_transdata_category")
        self.schedule_pattern = SCH_MAPPING.get(self.classifier, None)
        self.tiling_pattern = TILING_MAPPING.get(self.classifier, None)

    @classmethod
    def get_instance(cls, outs, option):
        return cls(outs, option)

    @classmethod
    def get_supported_pattern(cls):
        return [Pattern.TRANSDATA]

    @classmethod
    def get_supported_soc(cls):
        return [DEFAULT]

    def get_sub_pattern(self):
        return self.schedule_pattern

    def do_tiling_case(self):
        return _tiling_cases.get(self.tiling_pattern, None)(self.outs, self.option).do_tiling_case()


class Collecting():
    """
    Collect Declaration
    """

    def __init__(self, outs, option):
        self.outs = outs
        self.option = option
        self.tiling_case_list = []

    def __init_subclass__(cls, **kwargs):
        _tiling_cases[cls.get_tiling()] = cls

    @classmethod
    @abstractmethod
    def get_tiling(cls):
        """"""

    @abstractmethod
    def do_tiling_case(self):
        """"""


@register_build_pointcut(pattern=Pattern.TRANSDATA)
def build_pointcut(func, *args, **kwargs):
    func(*args, **kwargs)
