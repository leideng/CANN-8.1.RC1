#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
pool grad tiling core base
"""

import abc
from typing import List, Type


class TilingCore(abc.ABC):

    def __init__(self, schedule):
        self._sch = schedule
        self._dp = schedule._sch[schedule._dp]
        self._fn = schedule._sch[schedule._fn]

        self._pool_attr = schedule._pool_attr
        self._window_axis_len = self._pool_attr.axes_len
        self._window_start_idx = self._pool_attr.start_idx
        self._window_end_idx = self._pool_attr.end_idx

        self._tiling_case = schedule._tiling_case
        self._ub_idx = self._tiling_case.ub_split_idx
        self._ub_split = schedule._ub_split
        self._block_split = schedule._block_split

    def __init_subclass__(cls):
        # type: () -> None
        TilingCoreManager.add_class(cls)

    @abc.abstractmethod
    def get_strategy():
        pass

    def do_tiling(self):
        self._do_split()
        self._do_compute_at()
        self._do_emit_insn()

    @abc.abstractmethod
    def _do_split(self):
        pass

    @abc.abstractmethod
    def _do_compute_at(self):
        pass

    @abc.abstractmethod
    def _do_emit_insn(self):
        pass


class TilingCoreManager:
    _tiling_core_classes = [] # type: List[Type[TilingCore]]

    @classmethod
    def add_class(cls, tiling_core_cls):
        # type: (Type[TilingCore]) -> None
        cls._tiling_core_classes.append(tiling_core_cls)

    @classmethod
    def build(cls, strategy, sch):
        for clz in cls._tiling_core_classes:
            if clz.get_strategy() == strategy:
                return clz(sch)
        return None
