#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
tuple reduce schedule
"""
# Local Packages
from tbe.dsl.unify_schedule.constants import Pattern
from tbe.dsl.unify_schedule.constants import TupleReducePattern
from tbe.dsl.unify_schedule.schedule import Schedule

# Tuple-Reduce Packages
from .schedule.normal_cut import NormalCut
from .schedule.reduce_cut import ReduceCut
from .schedule.hybrid_cut import HybridCut
from .common.constants import ScheduleType


class EntryTupleReduceSchedule(Schedule):
    """
    Entry class for Tuple Reduce Schedule
    """

    def __init__(self, outs, tiling_case):
        self.outs = outs
        self.tiling_case = tiling_case

    @classmethod
    def get_instance(cls, outs, tiling_case):
        return cls(outs, tiling_case)

    @classmethod
    def get_supported_soc(cls):
        return ["default"]

    @classmethod
    def get_supported_pattern(cls):
        return [Pattern.TUPLE_REDUCE]

    @classmethod
    def get_supported_sub_pattern(cls):
        return [TupleReducePattern.TR_0]

    def do_schedule(self):
        """
        Entry method of reduce schedule
        """
        outs, tiling_case = self.outs, self.tiling_case
        if tiling_case.schedule_type == ScheduleType.NormalCut:
            schedule = NormalCut(outs, tiling_case)
        elif tiling_case.schedule_type == ScheduleType.ReduceCut:
            schedule = ReduceCut(outs, tiling_case)
        elif tiling_case.schedule_type == ScheduleType.HybridCut:
            schedule = HybridCut(outs, tiling_case)

        real_schedule = schedule.do_schedule()
        real_schedule.tiling_key = schedule.tiling_key
        return real_schedule

