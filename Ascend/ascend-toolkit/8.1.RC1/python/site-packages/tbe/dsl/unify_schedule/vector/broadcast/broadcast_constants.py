#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2023-2024. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

# compute root constants
TENSOR_VOLUME_STR_KEY = "tensor_volume"
INPLACE_INPUT_STR_KEY = "inplace_input"
MEM_UNIQUE_STR_KEY = "mem_unique"
COMPUTE_ROOT_FAKE_NODE = "compute_root_fake_node"
INPLACE_FAKE_NODE = "inplace_fake_node"
BRC_LAST_DUP_LIMIT_VDUP_ALIGN = 65536
COMPUTE_ROOT_GRAPH_SIZE_COEFFICIENT = 0.5

BLOCK_NUM = 8
NUM_FOUR = 4
NUM_EIGHT = 8

# temp space for last axis broadcast use vnchw_conv
MAX_EXTEND_NODE_NUM = 2
ROW_LIMIT = 16
CONST_DB_MIDDLE_NODES_LIMIT = 6
CONST_AHEAD_DB_FACTOR = 4
CONST_BRC_INLINE_LIMIT = 4
LAST_LOOP_REG_MOV = 2
LAST_LOOP_COEXISTING_QUANTITY_LIMIT = 2
MISSALIGN_STRIDE_WHITH_MALLOC_BUF = 3
MISSALIGN_STRIDE_COEXISTING_QUANTITY_LIMIT = 3
BRC_LAST_DUP_LIMIT = 16

INT32_MAX = 2147483647

# brc ins emit tag
BROADCAST = "broadcast"
VECTOR_BROADCAST = "vector_broadcast"
UNKNOWN_BROADCAST = "unknown_broadcast"
DMA_COPY = "dma_copy"
PHONY_INSN = "phony_insn"
VECTOR_REDUCE = "vector_reduce"

# vcmpsel temp ub size, number means tmp block size number
VCMP_INPUT_NUMBER = 2
VSEL_INPUT_NUMBER = 3
VCMPSEL_INPUT_NUMBER = 4

# common broadcast constants
CONST_MODE = "const"
DEFAULT = "default"
PURE_BRC = "pure_brc"

# broadcast and elewise graph intersect tensor type
BRC_ELE_INTERSECT_INPUT = 0
BRC_ELE_INTERSECT_MIDDLE_OUT = 1
BRC_ELE_INTERSECT_PURE_MIDDLE = 2

# var name prefix
INPLACE_BLOCK_FACTOR_PRE = "_inplace_block_factor"
INPLACE_UB_FACTOR_PRE = "_inplace_ub_factor"

# tiling constant
INPLACE_BLOCK_AXIS_TILING_KEY = 1000
INPLACE_UB_AXIS_TILING_KEY = 100
COMPUTE_AT_BASE_TILING_KEY = 9000

TILING_DATA_TYPE_INT = "int"
TILING_DATA_TYPE_INT64 = "int64"
NEED_TILING_CUT = "need_tiling_cut"
IS_STORE_ALIGN = "is_store_align"
BLOCK_AXIS = "block_axis"
BLOCK_FACTOR = "block_factor"
UB_AXIS = "ub_axis"
UB_FACTOR = "ub_factor"
IS_NEED_DB = "is_need_db"
INPLACE_BLOCK_AXIS = "inplace_block_axis"
INPLACE_BLOCK_FACTOR = "inplace_block_factor"
INPLACE_UB_AXIS = "inplace_ub_axis"
INPLACE_UB_FACTOR = "inplace_ub_factor"
BLOCK_DIM = "block_dim"
TILING_DATA = 'tiling_data'

ENOUGH_BUFFER = "enough_buffer"

TILING_BASIC_FORMAT = {
    NEED_TILING_CUT: TILING_DATA_TYPE_INT,
    IS_STORE_ALIGN: TILING_DATA_TYPE_INT,
    BLOCK_AXIS: TILING_DATA_TYPE_INT,
    BLOCK_FACTOR: TILING_DATA_TYPE_INT,
    UB_AXIS: TILING_DATA_TYPE_INT,
    UB_FACTOR: TILING_DATA_TYPE_INT,
    IS_NEED_DB: TILING_DATA_TYPE_INT}

TILING_WITH_INPLACE_EXTRA_FORMAT = {
    INPLACE_BLOCK_AXIS: TILING_DATA_TYPE_INT,
    INPLACE_BLOCK_FACTOR: TILING_DATA_TYPE_INT,
    INPLACE_UB_AXIS: TILING_DATA_TYPE_INT,
    INPLACE_UB_FACTOR: TILING_DATA_TYPE_INT}

TILING_BASIC_FORMAT_INT64 = {
    NEED_TILING_CUT: TILING_DATA_TYPE_INT64,
    IS_STORE_ALIGN: TILING_DATA_TYPE_INT64,
    BLOCK_AXIS: TILING_DATA_TYPE_INT64,
    BLOCK_FACTOR: TILING_DATA_TYPE_INT64,
    UB_AXIS: TILING_DATA_TYPE_INT64,
    UB_FACTOR: TILING_DATA_TYPE_INT64,
    IS_NEED_DB: TILING_DATA_TYPE_INT64}

TILING_WITH_INPLACE_EXTRA_FORMAT_INT64 = {
    INPLACE_BLOCK_AXIS: TILING_DATA_TYPE_INT64,
    INPLACE_BLOCK_FACTOR: TILING_DATA_TYPE_INT64,
    INPLACE_UB_AXIS: TILING_DATA_TYPE_INT64,
    INPLACE_UB_FACTOR: TILING_DATA_TYPE_INT64}

# tensor property constants
ORI_GRAPH_TENSOR = 0
INPLACE_GRAPH_TENSOR = 1
COMPUTE_ROOT_GRAPH_TENSOR = 2

# tensor type in graph
INPUT_TYPE = 0
PURE_MIDDLE_TYPE = 1
MIDDLE_OUT_TYPE = 2
PURE_OUT_TYPE = 3
FAKE_NODE_TYPE = 4

# tensor mode from cache read, cache write, set_scope, or gm tensor
CACHE_READ_MODE = 0
CACHE_WRITE_MODE = 1
CACHE_CLONE_MODE = 2
SET_SCOPE_MODE = 3
GM_MODE = 4
