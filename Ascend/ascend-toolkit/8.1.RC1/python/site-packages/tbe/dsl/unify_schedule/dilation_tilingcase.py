#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
dilation tiling case
"""
from itertools import product

from tbe.dsl.base.operation import get_te_var
from tbe.dsl.base.operation import register_tiling_case

from .constants import Pattern
from .cube_tilingcase import TilingUtils as utils


def calc_tiling_id(choice):
    tiling_id = 0
    tiling_id += choice[0] << 2;
    tiling_id += choice[1]
    return tiling_id


@register_tiling_case(pattern=Pattern.DILATION)
def calc_dilation_tilingcase(outs, option=None):
    """
    tiling_case func for dynamic shape dilation

    Parameters
    ----------
    outs : tvm tensor or list of tvm tensor, results for tvm compute

    Returns
    -------
    list of dict, each dict for a tiling case
    """
    tiling_case = []

    ub_pb = [utils.DB_OFF, utils.DB_ON]
    attach_axis = [0, 1, 2, 3]
    pattern_choices = list(product(ub_pb, attach_axis))

    for choice in pattern_choices:
        tiling_id = calc_tiling_id(choice)

        tiling_strategy = {
            "core_use": get_te_var("core_use").get_tvm_var(),
            "w_split_npart": get_te_var("w_split_npart").get_tvm_var(),
            "h_split_npart": get_te_var("h_split_npart").get_tvm_var(),
            "ub_input_bound": get_te_var("ub_input_bound").get_tvm_var(),
            "ub_output_bound": get_te_var("ub_output_bound").get_tvm_var(),
            "ub_pb": choice[0],
            "attach_axis": choice[1]
        }
        tiling_case.append({"key": tiling_id, "tiling_strategy": tiling_strategy})
    return tiling_case