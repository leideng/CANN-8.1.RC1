#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
conv2d schedule
"""
from tbe.dsl.static_schedule.conv_schedule import CceConvOp
from tbe.dsl.static_schedule.util import gen_dfs_tensor_map

from tbe import tvm
from tbe.dsl.base.operation import register_schedule
from tbe.dsl.compute.conv_compute import ConvParam
from .constants import Pattern


@register_schedule(pattern=Pattern.CONV2D)
def schedule(outs, tiling_case):
    """
    schedule for conv2d dynamic shape
    """

    return Conv2dSchedule(outs, tiling_case).do_schedule()


def get_op_tensor_map(outs):
    """
    get tensor_map
    """
    _, _, _, tensor_map = gen_dfs_tensor_map(outs)

    return tensor_map

class Conv2dSchedule:
    """
    Conv2dSchedule
    """

    def __init__(self, outs, tiling_case):
        self._outs = list(outs) if isinstance(outs, (list, tuple)) else [outs]

        self._schedule = None
        self._tiling_case = tiling_case

        self._scope = "local.UB"
        self._cce_conv_op = CceConvOp()

    def do_schedule(self):
        """
        do schedule
        """

        op_info = get_op_tensor_map(self._outs)
        self._var_range = self._tiling_case['var_range']

        self._schedule = tvm.create_schedule(
            [res.op for res in self._outs if res not in op_info])
        self._schedule.tiling_key = self._tiling_case['key']
        self._tiling_strategy = self._tiling_case['tiling_strategy']

        sch_list = [self._schedule]
        if ConvParam.convbn1_flag:
            res_out = self._outs[-1]
        else:
            res_out = self._outs[0]
        self._cce_conv_op.schedule(res_out, self._outs, sch_list, convbn1_flag=ConvParam.convbn1_flag,
                                   tiling_case=self._tiling_strategy, var_range=self._var_range)
        if len(sch_list) > 1:
            return self._schedule, sch_list[1:]
        return self._schedule, self._outs
