#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
constants
"""
from enum import Enum
from enum import auto

# common
BLOCK_SIZE = 32
ONE_REPEAT_SIZE = 256
BLOCK_IDX = "blockIdx.x"
UB_SCOPE = "local.UB"
AUTO_TILING = "AutoTiling"
DECODE_INT_FORMAT = "int"
COEXIST_NODE_NUM_UPPER_THRESHOLD_TO_ENABLE_DB = 5
OP_NUM_LOWER_THRESHOLD_TO_IGNORE_CORE_NUM = 5
# broadcast
MUITI_BROADCAST_AXES_EXTRA_NODE = 1
VNCHWCONV_UNALIGNED_BROADCAST_EXTRA_NODE = 2
VNCHWCONV_B16_ALIGNED_BROADCAST_EXTRA_NODE = 1
VNCHWCONV_B16_ALIGNED_BROADCAST_TEMP_SIZE = 1024
VNCHWCONV_B32_ALIGNED_BROADCAST_TEMP_SIZE = 8192
VNCHWCONV_B32_ALIGNED_BROADCAST_THRESHOLD_VALUE = 32
# reduce
REDUCE_VC_REMOVE_INDEX_EXTRA_NODE = 1
ENTIRE_REDUCE_WITH_VC_NO_REUSE_DST_EXTRA_NODE = 1
ENTIRE_REDUCE_WITHOUT_VC_AND_NO_REUSE_DST_EXTRA_NODE = 2
ENTIRE_REDUCE_WITHOUT_VC_AND_REUSE_DST_EXTRA_NODE = 1
NLAST_DICHOTOMY_REDUCE_NO_REUSE_DST_EXTRA_NODE = 1
TRANS_REDUCE_EXTRA_NODE = 2
# cmp sel
VCMP_INPUT_NUMBER = 2
VSEL_INPUT_NUMBER = 3
VCMPSEL_INPUT_NUMBER = 4

ELEWISE_INSN_NAME_SUPPORT_AUTO_BROADCAST = ["vector_add", "vector_sub", "vector_div", "vector_mul", "vector_adds"]


class NodeType(Enum):
    COMMON = auto()
    BROADCAST = auto()
    REDUCE = auto()
    DATA_MOVE = auto()


class DataMoveType(Enum):
    GM_TO_UB = auto()
    UB_TO_UB = auto()
    UB_TO_GM = auto()


class ReduceType(Enum):
    MAX = auto()
    MIN = auto()
    SUM = auto()
    PROD = auto()


class CommonType(Enum):
    CAST = auto()
    SET_VALUE = auto()
    CMP = auto()
    SEL = auto()
    CMPSEL = auto()


class CommonCmpType(Enum):
    LT = "lt"
    GT = "gt"
    LE = "le"
    GE = "ge"
    EQ = "eq"
    NE = "ne"


class CommonCmpSelType(Enum):
    LT = "lt"
    GT = "gt"
    LE = "le"
    GE = "ge"
    EQ = "eq"
    NE = "ne"


DTYPE_AND_TRANSPOSE_ENTIRE_SIZE_MAP = {
    "bool": 1024,
    "int8": 1024,
    "uint8": 1024,
    "float16": 256,
    "float32": 128,
    "int32": 128,
    "int64": 64
}


INSN_NAME_AND_SUB_TYPE_MAP = {
    "vector_reduce_max": ReduceType.MAX,
    "vector_reduce_min": ReduceType.MIN,
    "vector_reduce_sum": ReduceType.SUM,
    "vector_reduce_prod": ReduceType.PROD,
    "vector_conv": CommonType.CAST,
    "vector_dup": CommonType.SET_VALUE,
    "vector_gt": CommonCmpType.GT,
    "vector_ge": CommonCmpType.GE,
    "vector_lt": CommonCmpType.LT,
    "vector_le": CommonCmpType.LE,
    "vector_eq": CommonCmpType.EQ,
    "vector_ne": CommonCmpType.NE,
    "vector_select_bool": CommonType.SEL,
    "vector_select_gt": CommonCmpSelType.GT,
    "vector_select_ge": CommonCmpSelType.GE,
    "vector_select_lt": CommonCmpSelType.LT,
    "vector_select_le": CommonCmpSelType.LE,
    "vector_select_eq": CommonCmpSelType.EQ,
    "vector_select_ne": CommonCmpSelType.NE,
}


class CmpOp(Enum):
    LT = auto()
    GT = auto()
    LE = auto()
    GE = auto()
    EQ = auto()
    NE = auto()


class BitDtype(Enum):
    B1 = auto()
    B8 = auto()
    B16 = auto()
    B32 = auto()
    B64 = auto()


class BroadcastStrategy(Enum):
    COMMON = auto()
    ENABLE_VNCHWCONV = auto()
    ENABLE_VBRCB = auto()
    ENABLE_SCALAR_EIGHT_DUP = auto()


class ReduceStrategy(Enum):
    COMMON = auto()
    ENABLE_ENTIRE_REDUCE = auto()
    ENABLE_NLAST_DICHOTOMY = auto()
    ENABLE_TRANS = auto()


class DateMoveStrategy(Enum):
    COMMON = auto()


class CommonStrategy(Enum):
    COMMON = auto()


class InsnAttrsKey:
    # broadcast
    ENABLE_ALIGN_EIGHT_DUP = "enable_align_eight_dup"
    ENABLE_VNCHWCONV = "enable_vnchwconv"
    B32_TRANS_THRESHOLD = "trans_threshold"
    EBABLE_BRCB = "enable_brc_block"
    # reduce
    REDUCE_TRANS = "trans"
    REDUCE_OPT_MODE = "reduce_opt_mode"
    REUSE_DST_TENSOR = "reuse_dst_tensor"
    ENOUGH_BUFFER = "enough_buffer"
    NLAST_REDUCE_DICHOTOMY = "nlast_reduce_dichotomy"
    MAP_POLICY = "map_policy"
    STORAGE_BOUND = "storage_bound"
    # data move
    NO_OVERLAP = "no_overlap"
    AVOID_BANK_CONFLICT = "avoid_bank_conflict"


class InsnAttrsValue:
    # broadcast && key is B32_TRANS_THRESHOLD
    B32_TRANS_THRESHOLD_VALUE = 32
    # reduce && key is REDUCE_OPT_MODE
    ENTIRE_REDUCE = "entire_reduce"
    DICHOTOMY_REDUCE_BIG_DIM = "dichotomy_reduce_big_dim"
    # reduce && key is MAP_POLICY
    NO_OFFSET = "2d_no_offset"
    # reduce && key is NLAST_REDUCE_DICHOTOMY
    NLAST_REDUCE_DICHOTOMY_VALUE = 16
    # data move && key is NO_OVERLAP
    NO_OVERLAP_ZERO = 0
    NO_OVERLAP_ONE = 1
    NO_OVERLAP_TWO = 2
    NO_OVERLAP_THREE = 3
    NO_OVERLAP_FOUR = 4
    NO_OVERLAP_FIVE = 5


class ReorderStrategy(Enum):
    COMMON = auto()


class SpecialInsnName:
    DMA_COPY = "dma_copy"
    PHONY_INSN = "phony_insn"
    ALIGN_PAD = "align_pad"
    REMOVE_PAD = "remove_pad"


class ComputeType(Enum):
    COMMON = 0
    REDUCE_AGGREGATE = 1


class IterVarType(Enum):
    DataPar = 0
    ThreadIndex = 1
    CommReduce = 2
    Ordered = 3
    DimInfo = 4
    Unrolled = 5
    Vectorized = 6
    Parallelized = 7
    Tensorized = 8


class CompileInfoKey:
    SOC_INFO = "_soc_info"
    COMPUTE_INFO = "_compute_info"
    BLOCK_SIZE = "_block_size"
    IS_CONST = "_is_const"
    MAX_SHAPE = "_max_shape"
    ORI_REDUCE_AXES = "_ori_reduce_axes"
    BUFFER_SIZE = "_buffer_size"


class ContextKey:
    COMPUTE_GRAPH_INFO = "_compute_graph_info"


class TensorDescKey:
    SHAPE = "shape"
    DTYPE = "dtype"


class RunInfoKey:
    TILING_DATA = "tiling_data"
    BLOCK_DIM = "block_dim"


class TilingDataKey:
    BLOCK_AXIS = "block_axis"
    BLOCK_FACTOR = "block_factor"
    UB_AXIS = "ub_axis"
    UB_FACTOR = "ub_factor"
    IS_VALID_TILING = "is_valid_tiling"
