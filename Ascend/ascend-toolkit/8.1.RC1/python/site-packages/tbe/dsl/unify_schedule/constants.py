#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
auto_schedule template, if user call auto_schedule, this file will choose a
corresponding schedule template for user's compute
"""

from enum import Enum, unique
from enum import auto


class Pattern(object):
    """
    Built-in Patterns
    """
    ELEMWISE = "ElemWise"
    BROADCAST = "Broadcast"
    REDUCE = "CommReduce"
    NORM = "Norm"
    GENERIC_VECTOR = "GenericVector"
    TRANSPOSE = "Transpose"
    CONCAT = "Concat"
    SPLIT = "Split"
    OPAQUE = "Opaque"
    SOFTMAX = "Softmax"
    ASCEND_QUANT = "quant"
    ASCEND_ANTI_QUANT = "anti_quant"
    CONV2D = "Convolution"
    QUANT_CONV2D = "QuantConvolution"
    CONV2D_BACKPROP_INPUT = "Conv2d_backprop_input"
    CONV2D_BACKPROP_INPUT_UB = "Conv2d_backprop_input_ub"
    CONV2D_BACKPROP_FILTER = "Conv2d_backprop_filter"
    DILATION = "Dilation"
    MAT_MUL = "Matmul"
    WEIGHT_QUANT_BATCH_MATMUL = "WeightQuantBatchmatmul"
    GEMM = "GEMM"
    BATCH_MATMUL = "BatchMatmul"
    MATMUL_UB_TO_UB = "matmul_ub_to_ub"
    LAYER_NORM_BETA_GAMMA_BACKPROP = "Layer_norm_beta_gamma_backprop"
    LAYER_NORM_BETA_GAMMA_BACKPROP_V2 = "Layer_norm_beta_gamma_backprop_v2"
    CONV3D = "Conv3d"
    CONV3D_BACKPROP_INPUT = "Conv3d_backprop_input"
    CONV3D_BACKPROP_FILTER = "Conv3d_backprop_filter"
    SOFTMAX_CROSS_ENTROPY_WITH_LOGITS = "SoftmaxCrossEntropyWithLogits"
    BN_TRAINING_UPDATE_GRAD = "BNTrainingUpdateGrad"
    LAYER_NORM_X_BACKPROP = "Layer_norm_x_backprop"
    LAYER_NORM_X_BACKPROP_V2 = "Layer_norm_x_backprop_v2"
    GATHER = "Gather"
    SPARSE_APPLY = "SparseApply"
    SLICE = "Slice"
    TRANSDATA = "Transdata"
    TRANSDATAC04 = "TransdataC04"
    TUPLE_REDUCE = "TupleReduce"
    POOLING = "Pooling"
    POOLINGWITHARG = "PoolingWithArg"
    EXTRACT_IMAGE_PATCHES = "ExtractImagePatches"
    SORT = "Sort"
    RESIZE = "Resize"
    SCATTER = "Scatter"
    SEGMENT = "Segment"
    POOLING_GRAD_WITH_ARG = "PoolingGradWithArg"
    POOL_GRAD = "PoolGrad"
    LayerNorm = "LayerNorm"
    AvgPoolUpdate = "AvgPoolUpdate"


class ElewisePattern(object):
    """
    Elewise sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    E_0 = "E_0"


class BroadcastPattern(object):
    """
    Broadcast sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    B_0 = "B_0"


class ReducePattern(object):
    """
    Reduce sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    R_0 = "R_0"


class ReduceCategory(object):
    """
    Category of Reduce
    """
    ALL_REDUCE = 1
    NOT_LAST_REDUCE = 2
    LAST_REDUCE = 3


@unique
class ReduceSchType(Enum):
    """
    Category of Reduce
    """
    NORMAL = 0
    PAD = 1
    TRANSPOSE = 2
    ACCUMULATION = 3
    PAD_ACCUMULATION = 4
    ENTIRE_REDUCE = 5
    AR_HIGH_PRECISION = 6            # no workspace
    AR_HIGH_PRECISION_WORKSPACE = 7  # workspace
    ARA_HIGH_PRECISION = 8           # ara, ub内lastA轴<=256B, dichotomy_reduce, no workspace
    ARA_HIGH_PRECISION_BIG_DIM = 9   # ara, ub内lastA轴>256B, dichotomy_reduce_big_dim, no workspace
    ARA_HIGH_PRECISION_WORKSPACE = 10 # ara, ub内lastA轴<=256B, dichotomy_reduce, workspace
    ARA_HIGH_PRECISION_BIG_DIM_WORKSPACE = 11 # ara, ub内lastA轴>256B, dichotomy_reduce_big_dim, workspace


class NormPattern(object):
    """
    Norm sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    N_0 = "N_0"


class GenericVectorPattern(object):
    """
    Generic Vector sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    GV_0 = "GV_0"


class GatherPattern(object):
    """
    Gather sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    NORMAL_SCHEDULE = "NORMAL_SCHEDULE"
    ZERO_SCHEDULE = "ZERO_SCHEDULE"


class SegmentPattern(object):
    """
    Segment sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    NORMAL_SCHEDULE = "NORMAL_SCHEDULE"
    ZERO_SCHEDULE = "ZERO_SCHEDULE"


class ScatterPattern(object):
    """
    Gather sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    NORMAL_SCHEDULE = "NORMAL_SCHEDULE"


class SlicePattern(object):
    """
    Slice sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    NORMAL_SCHEDULE = "NORMAL_SCHEDULE"


class TransposePattern(object):
    """
    Transpose sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    T_0 = "T_0"


class TransdataCategory(object):
    """
    Category of Transdata
    """
    GENERAL_FORWARD = "general.forward"
    GENERAL_C04_FORWARD = "general.c04.forward"
    GENERAL_BACKWARD = "general.backward"
    GENERAL_C04_BACKWARD = "general.c04.backward"
    DATA_MOVE_FORWARD = "data.move.forward"
    DATA_MOVE_C04_FORWARD = "data.move.c04.forward"
    DATA_MOVE_BACKWARD = "data.move.backward"
    DATA_MOVE_C04_BACKWARD = "data.move.c04.backward"
    BORROW_N_B8B16_BACKWARD = "borrow.n.b8b16.backward"
    BORROW_H_B8B16_BACKWARD = "borrow.h.b8b16.backward"
    BORROW_N_B8B16_FORWARD = "borrow.n.b8b16.forward"
    BORROW_H_B8B16_FORWARD = "borrow.h.b8b16.forward"


class ConcatPattern(object):
    """
    Concat sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    C_0 = "C_0"


class SplitPattern(object):
    """
    Split sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    S_0 = "S_0"


class TupleReducePattern(object):
    """
    Tuple Reduce sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    TR_0 = "TR_0"


class PoolingWithArgPattern(object):
    """
    PoolingWithArg sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    SCHEDULE_5HD = "SCHEDULE_5HD"
    SCHEDULE_NCHW = "SCHEDULE_NCHW"


class PoolingPattern(object):
    """
    Pooling sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    P_0 = "P_0"


class SortPattern(object):
    """
    Sort sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    NORMAL_SCHEDULE = "NORMAL_SCHEDULE"


class ResizePattern(object):
    """
    Positive Resize sub pattern.
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    # generic
    R_0 = "R_0"


class PoolingGradPattern(object):
    """
    PoolingGrad sub pattern
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    PG_0 = "PG_0"
    PG_1 = "PG_1"
    PG_2 = "PG_2"


class PoolGradPattern(object):
    """
    PoolGrad sub pattern
    Each sub-pattern has a corresponding schedule, for function or performance.
    """
    LAST_WINDOW_AXIS = "last_window_axis"
    NLAST_WINDOW_AXIS = "nlast_window_axis"


class CompileInfo(object):
    """
    Built-in Compilation Info Keys
    """
    PATTERN = "_pattern"
    BASE_INFO = "_base_info"
    COMMON_INFO = "_common_info"
    FLAG_INFO = "_flag_info"
    ONLY_CONST_TILING = "_only_const_tiling"
    IS_CONST_SHAPES = "_is_const_shapes"
    SUPPORT_BROADCAST = "_support_broadcast"
    USE_SPECIAL_PATTERN = "_use_special_pattern"
    SUPPORT_ABSORBABLE_BROADCAST = "_support_absorbable_broadcast"
    UNKNOWN_RANK = "_unknown_rank"
    HAS_ALL_UNKNOWN = "_has_all_unknown"
    MAX_DTYPE = "_max_dtype_bytes"
    COEXISTING_QUANTITY = "_coexisting_quantity"
    UB_SIZE = "_ub_size"
    UB_BLOCK_SIZE = "_ub_block_size"
    CORE_NUM = "_core_num"
    FUSION = "_fusion"
    ELEWISE_CONST_SHAPES = "_elewise_const_shapes"
    ELEWISE_CONST_DIMS = "_elewise_const_dims"
    BROADCAST_CONST_SHAPES = "_broadcast_const_shapes"
    BROADCAST_CONST_DIMS = "_broadcast_const_dims"
    CONST_SHAPES = "_const_shapes"
    CONST_BLOCK_DIMS = "_const_block_dims"
    VARS = "_vars"
    NORMAL_VARS = "_normal_vars"
    VAR_ATTRS = "_var_attrs"
    VAR_ATTR_MODE = "_var_attr_mode"
    CUSTOM_VARS = "_custom_vars"
    ELEWISE_VARS = "_elewise_vars"
    BLOCK_DIMS = "_block_dims"
    ATOMIC_FLAGS = "_atomic_flags"
    WORKSPACES = "_workspace_bytes"
    BROADCAST_AXIS = "_broadcast_axis"
    OUTS_UINT1 = "_outs_uint1"
    SOC_VERSION = "_soc_version"
    RL_BANK_INFO = "_bank_info"
    CONTAINS_ELEWISE_SCH = "_contains_elewise_sch"
    UB_FACTOR_ALIGN = "_ub_factor_align"
    CLASSIFY_INPUTS_NUM = "_classify_inputs_num"
    ELEWISE_FUSED_INDEX = "_elewise_fused_index"
    CONTAINS_NEED_PAD_COMPUTE = "_contains_need_pad_compute"
    IS_VNCHWCONV_ALIGN = "_is_vnchwconv_align"
    MAX_BRC_TYPE = "_max_brc_type"
    MAX_OUT_DTYPE_NUM = "_max_out_dtype_num"
    IS_ABSORBABLE_BROADCAST = "_is_absorbable_broadcast"
    CONST_TILING_OUT = "_const_tiling_out"
    COMPUTE_ROOT_OUT_IDEX = "_compute_root_out_index"
    COMPUTE_ROOT_VOLUME = "_compute_root_volume"
    INT64_MODE = "_int64_mode"
    IS_CONTAINS_COMPUTE_ROOT_TENSORS = "_is_contains_compute_root_tensors"
    MAX_ELE_IN_BLOCK = "_max_ele_in_block"
    HAS_INPLACE_CACHE_CLONE = "_has_inplace_cache_clone"
    INPLACE_OUT_INDEXES = "_inplace_out_indexes"
    INPLACE_GRAPH_ALL_OUT_INDEXES = "_inplace_graph_all_out_indexes"
    INPLACE_OUT_VOLUME = "_inplace_out_volume"
    INPLACE_STORAGE_BOUND = "_inplace_storage_bound"
    IS_FUSION_OP = "_is_fusion_op"
    CST_COMPUTE_ROOT_LAST_BRC_CUT_LAST = "_cst_compute_root_last_brc_cut_last"


class VarAttrMode(object):
    """
    VarAttrMode
    CONSISTENT: means all var attrs the same in a compilation
    INDEPENDENT: means not all var attrs the same in a compilation
    """
    CONSISTENT = 0
    INDEPENDENT = 1


FAKE_NODE_TAG = "elewise_empty_intrin"

# <dsl insn, pass insn> mapping
INSN_MAPPING = {
    "elewise_binary_mod": "scalar_op",
    "elewise_binary_add": "vector_add",
    "elewise_binary_sub": "vector_sub",
    "elewise_binary_gcd": "vector_gcd",
    "elewise_binary_div": "vector_div",
    "elewise_binary_mul": "vector_mul",
    "elewise_binary_min": "vector_min",
    "elewise_binary_max": "vector_max",
    "elewise_binary_and": "vector_and",
    "elewise_binary_or": "vector_or",
    "elewise_binary_complex": "vector_complex",
    "elewise_single_real": "vector_real",
    "elewise_single_log": "vector_ln",
    "elewise_single_exp": "vector_exp",
    "elewise_single_rec": "vector_rec",
    "elewise_single_VS_add": "vector_adds",
    "elewise_single_VS_mul": "vector_muls",
    "elewise_single_VS_max": "vector_maxs",
    "elewise_single_VS_min": "vector_mins",
    "elewise_single_VS_div": "vector_divs",
    "elewise_single_abs": "vector_abs",
    "elewise_single_relu": "vector_relu",
    "elewise_single_not": "vector_not",
    "elewise_single_sqrt": "vector_sqrt",
    "elewise_single_rsqrt": "vector_rsqrt",
    "elewise_single_cast": "vector_conv",
    "elewise_single_ceil": "vector_conv_ceil",
    "elewise_single_floor": "vector_conv_floor",
    "elewise_single_trunc": "vector_conv_trunc",
    "elewise_single_tconvtrunc": "vector_tconv_trunc",
    "elewise_single_round": "vector_conv_rint",
    "elewise_single_signbit": "vector_sign_bit",
    "elewise_single_round_d": "vector_conv_round",
    "elewise_single_lrelu": "vector_lrelu",
    "elewise_single_tanh": "vector_tanh",
    "elewise_single_sigmoid": "vector_sigmoid",
    "elewise_empty_intrin": "phony_insn",
    "tuple_reduce_sum": "vector_reduce_sum",
    "reduce_sum": "vector_reduce_sum",
    "reduce_min": "vector_reduce_min",
    "reduce_max": "vector_reduce_max",
    "reduce_all": "vector_reduce_all",
    "reduce_any": "vector_reduce_any",
    "reduce_window_max": "vector_reduce_max",
    "reduce_prod": "vector_reduce_prod",
    "broadcast": "vector_broadcast",
    "one_shape_broadcast": "vector_broadcast",
    "one_rank_broadcast": "unknown_broadcast",
    "unified_broadcast": "vector_broadcast",
    "set_value": "vector_dup",
    "elewise_binary_cmpsel_gt": "vector_select_gt",
    "elewise_binary_cmpsel_ge": "vector_select_ge",
    "elewise_binary_cmpsel_lt": "vector_select_lt",
    "elewise_binary_cmpsel_le": "vector_select_le",
    "elewise_binary_cmpsel_eq": "vector_select_eq",
    "elewise_binary_cmpsel_ne": "vector_select_ne",
    "elewise_binary_vcmpv_gt": "vector_gt",
    "elewise_binary_vcmpv_ge": "vector_ge",
    "elewise_binary_vcmpv_lt": "vector_lt",
    "elewise_binary_vcmpv_le": "vector_le",
    "elewise_binary_vcmpv_eq": "vector_eq",
    "elewise_binary_vcmpv_ne": "vector_ne",
    "elewise_binary_addrelu": "vector_addrelu",
    "elewise_binary_subrelu": "vector_subrelu",
    "elewise_binary_powi": "vector_power",
    "elewise_multiple_sel": "vector_select_bool",
    "elewise_multiple_mla": "vector_mla",
    "elewise_multiple_madd": "vector_madd",
    "elewise_multiple_maddrelu": "vector_maddrelu",
    "elewise_binary_scalar_axpy": "vector_axpy",
    "dma_copy": "dma_copy",
    "align_pad": "align_pad",
    "remove_pad": "remove_pad",
    "pad": "dma_copy",
    "img2col": "vector_or",
    "col2img": "vector_reduce_sum",
    "depad": "dma_copy",
    "scan_vor": "vector_or",
    "transpose": "vector_transpose",
    "scalar_fill": "vector_dup",
}

COMPOSITE_INSNS_ALIGN_MAP = {
    "vector_min": 16,
    "vector_max": 16,
}

TERNARY_INSNS = [
    "elewise_multiple_mla",
    "elewise_multiple_madd",
    "elewise_multiple_maddrelu",
    "elewise_binary_scalar_axpy",
]

# dst can not reuse src by insn realize
DST_SRC_NO_REUSE_SET = {
    # complex insns
    "elewise_binary_vcmpv_gt",
    "elewise_binary_vcmpv_ge",
    "elewise_binary_vcmpv_lt",
    "elewise_binary_vcmpv_le",
    "elewise_binary_vcmpv_eq",
    "elewise_binary_vcmpv_ne",
    "elewise_multiple_sel",
    "elewise_binary_cmpsel_gt",
    "elewise_binary_cmpsel_ge",
    "elewise_binary_cmpsel_lt",
    "elewise_binary_cmpsel_le",
    "elewise_binary_cmpsel_eq",
    "elewise_binary_cmpsel_ne",

    # cast insns
    "elewise_single_cast",
    "elewise_single_ceil",
    "elewise_single_floor",
    "elewise_single_trunc",
    "elewise_single_round",
    "elewise_single_round_d",
}

# support scalar insn
# example: tensor support scalar
SUPPORT_SCALAR_INSNS = [
    "elewise_binary_add",
    "elewise_binary_sub",
    "elewise_binary_mul",
    "elewise_binary_div",
    "elewise_binary_and",
    "elewise_binary_or",
    "elewise_binary_min",
    "elewise_binary_max",
    "elewise_single_log",
    "elewise_single_exp",
    "elewise_single_rec",
    "elewise_single_abs",
    "elewise_single_relu",
    "elewise_single_not",
    "elewise_single_sqrt",
    "elewise_single_rsqrt",
    "elewise_single_cast",
    "elewise_single_ceil",
    "elewise_single_floor",
    "elewise_single_trunc",
    "elewise_single_round",
    "elewise_single_round_d",
    "elewise_binary_vcmpv_gt",
    "elewise_binary_vcmpv_ge",
    "elewise_binary_vcmpv_lt",
    "elewise_binary_vcmpv_le",
    "elewise_binary_vcmpv_eq",
    "elewise_binary_vcmpv_ne"
]

# need a block save scalar
NEED_TEMP_SPACE_INSNS = [
    "elewise_single_VS_max",
    "elewise_single_VS_min",
]

# need a node as temp space
NEED_EXTENT_NODE_INSNS = [
    "unknown_broadcast",
    "one_rank_broadcast"
]

# need a block save scalar while dtype is s32
NEED_SPACE_WITH_DIFF_TYPE = [
    "elewise_single_VS_add",
    "elewise_single_VS_mul",
]

VCMP_INSNS = [
    "elewise_binary_vcmpv_gt",
    "elewise_binary_vcmpv_ge",
    "elewise_binary_vcmpv_lt",
    "elewise_binary_vcmpv_le",
    "elewise_binary_vcmpv_eq",
    "elewise_binary_vcmpv_ne",
]

VSEL_INSNS = "elewise_multiple_sel"

VCMPSEL_INSNS = [
    "elewise_binary_cmpsel_gt",
    "elewise_binary_cmpsel_ge",
    "elewise_binary_cmpsel_lt",
    "elewise_binary_cmpsel_le",
    "elewise_binary_cmpsel_eq",
    "elewise_binary_cmpsel_ne",
]

BROADCAST_INSNS = [
    "unified_broadcast",
    "unknown_broadcast",
]

ONE_SHAPE_BROADCAST = "one_shape_broadcast"

REDUCE_INSNS = [
    "tuple_reduce_sum",
    "reduce_sum",
    "reduce_min",
    "reduce_max",
    "reduce_prod"
]

ELEWISE_BROADCAST_INSNS = [
    "one_shape_broadcast",
    "one_rank_broadcast",
    "broadcast"
]

DTYPE_BYTE_MAPPING = {
    "uint1": 0.125,
    "int4": 0.5,
    "bool": 1,
    "int8": 1,
    "uint8": 1,
    "bfloat16": 2,
    "float16": 2,
    "int16": 2,
    "uint16": 2,
    "float32": 4,
    "int32": 4,
    "uint32": 4,
    "int64": 8,
    "uint64": 8,
    "complex32": 4,
    "complex64": 8
}

DTYPE_BIT_MAPPING = {
    "uint1": 1,
    "int4": 4,
    "bool": 8,
    "int8": 8,
    "uint8": 8,
    "bfloat16": 16,
    "float16": 16,
    "int16": 16,
    "uint16": 16,
    "float32": 32,
    "int32": 32,
    "uint32": 32,
    "int64": 64,
    "uint64": 64,
    "complex32": 32,
    "complex64": 64
}

DTYPE_BRC_ALIGN_MAPPING = {
    "bool": 1024,
    "int8": 1024,
    "uint8": 1024,
    "float16": 256,
    "int16": 256,
    "uint16": 256,
    "float32": 128,
    "int32": 128,
    "uint32": 128,
    "int64": 64,
    "uint64": 64
}

AtomicSupportMapDefault = {"support_dtype": ["float32", ],
                           "support_insn": ["reduce_sum", ], }

AtomicSupportMap310P = {"support_dtype": ["float32", "float16"],
                        "support_insn": ["reduce_sum", ], }

AtomicSupportMap910BC = {"support_dtype": ["float32", "float16", "int32", "int16", "int8", "bfloat16"],
                         "support_insn": ["reduce_sum"]}


class ComputeType(Enum):
    """
    ComputeType
    """
    ANY = auto()
    UNKNOWN = auto()
    PLACEHOLDER = auto()
    ELEWISE = auto()
    BROADCAST = auto()
    REDUCE = auto()
    TRANSPOSE = auto()
    TRANSDATA = auto()
    SET_VALUE = auto()
    CONCAT = auto()
    SPLIT = auto()
    CAST = auto()
    CONV2D = auto()
    CONV2D_BP_INPUT = auto()
    CONV2D_BACKPROP_INPUT_UB = auto()
    CONV2D_BP_FILTER = auto()
    CONV3D_BP_INPUT = auto()
    CONV3D = auto()
    MAT_MUL = auto()
    WEIGHT_QUANT_BATCH_MATMUL = auto()
    MATMUL_UB_TO_UB = auto()
    CONV3D_BP_FILTER = auto()
    GATHER = auto()
    SLICE = auto()
    ASCEND_ANTI_QUANT = auto()
    ASCEND_QUANT = auto()
    AVG_POOL_UPDATE = auto()
    REDUCE_WINDOW = auto()
    PAD_WINDOW = auto()
    POOLING_WITH_ARG = auto()
    SORT = auto()
    SEGMENT = auto()
    RESIZE = auto()
    SCATTER = auto()
    POOLING_GRAD_WITH_ARG = auto()
    DILATION = auto()


COMPUTE_TYPE_INSN_MAPPING = {
    ComputeType.ELEWISE: {
        "elewise_binary_add", "elewise_binary_sub", "elewise_binary_div",
        "elewise_binary_mul", "elewise_binary_min", "elewise_binary_max",
        "elewise_binary_and", "elewise_binary_or", "elewise_binary_vcmpv_le",
        "elewise_binary_complex", "elewise_binary_powi",
        "elewise_binary_vcmpv_lt", "elewise_binary_vcmpv_ge",
        "elewise_binary_vcmpv_gt", "elewise_binary_vcmpv_ne",
        "elewise_binary_vcmpv_eq", "emit_insn_elewise_binary_cmp",
        "elewise_binary_logic", "elewise_single_log", "elewise_single_exp", "elewise_single_real",
        "elewise_single_rec", "elewise_single_VS_add", "elewise_single_VS_mul", "elewise_single_VS_div",
        "elewise_single_VS_max", "elewise_single_VS_min", "elewise_single_abs",
        "elewise_single_relu", "elewise_single_not", "elewise_single_sqrt", "elewise_single_signbit",
        "elewise_single_rsqrt", "elewise_single_lrelu", "elewise_multiple_mla",
        "elewise_single_tanh", "elewise_single_sigmoid",
        "elewise_multiple_madd", "elewise_multiple_maddrelu",
        "elewise_multiple_sel", "elewise_binary_scalar_axpy",
        "elewise_binary_cmpsel_gt", "elewise_binary_cmpsel_ge",
        "elewise_binary_cmpsel_lt", "elewise_binary_cmpsel_le",
        "elewise_binary_cmpsel_eq", "elewise_binary_cmpsel_ne",
        "elewise_binary_addrelu", "elewise_binary_subrelu",
        "elewise_binary_mod", "elewise_binary_gcd",
        "broadcast", "one_shape_broadcast", "one_rank_broadcast"
    },
    ComputeType.CAST: {
        "elewise_single_cast", "elewise_single_ceil", "elewise_single_floor",
        "elewise_single_trunc", "elewise_single_round", "elewise_single_round_d",
        "elewise_single_tconvtrunc"
    },
    ComputeType.BROADCAST: {
        "unified_broadcast", "unknown_broadcast"
    },
    ComputeType.REDUCE: {
        "reduce_min", "reduce_max", "reduce_sum",
        "reduce_all", "reduce_any",
        "reduce_prod", "tuple_reduce_sum",
    },
    ComputeType.REDUCE_WINDOW: {
        "reduce_window_max"
    },
    ComputeType.PAD_WINDOW: {
        "pad_window"
    },
    ComputeType.TRANSPOSE: {
        "transpose"
    },
    ComputeType.TRANSDATA: {
        "transdata"
    },
    ComputeType.SET_VALUE: {
        "set_value"
    },
    ComputeType.CONCAT: {
        "concat"
    },
    ComputeType.SPLIT: {
        "split"
    },
    ComputeType.CONV2D: {
        "conv_vector_remove_pad",
        "convolution_C",
        "convolution_C_UB",
        "convolution_c_col",
        "convolution_c_col_bias",
        "convolution_res_conv2d",
        "convolution_res_fp32_conv2d"
    },
    ComputeType.CONV2D_BP_INPUT: {
        "conv2d_backprop_input",
        "conv2d_backprop_input_opti"
    },
    ComputeType.CONV2D_BACKPROP_INPUT_UB: {
        "conv2d_backprop_input_ub"
    },
    ComputeType.CONV2D_BP_FILTER: {
        "conv2d_backprop_filterdw_ddr"
    },
    ComputeType.CONV3D: {
        "conv3d_fuse_fmap_tensor",
        "conv3d_c_col"
    },
    ComputeType.MAT_MUL: {
        "matmul",
        "gemm"
    },
    ComputeType.WEIGHT_QUANT_BATCH_MATMUL: {
        "weight_quant_bmm"
    },
    ComputeType.MATMUL_UB_TO_UB: {
        "matmul_ub_to_ub"
    },
    ComputeType.CONV3D_BP_INPUT: {
        "conv3d_backprop_input_c_ub",
        "conv3d_backprop_input_c_ddr_vn"
    },
    ComputeType.CONV3D_BP_FILTER: {
        "conv3d_backprop_filterdw_ddr"
    },
    ComputeType.GATHER: {
        "gather",
        "gather_nd",
    },
    ComputeType.SEGMENT: {
        "segmentensor_max",
        "segmentensor_min",
        "segmentensor_sum",
        "segmentensor_prod"
    },
    ComputeType.SLICE: {
        "slice"
    },
    ComputeType.ASCEND_ANTI_QUANT: {
        "anti_quant_input_ub",
        "anti_quant_cast_f16_ub",
        "anti_quant_offset_ub",
        "anti_quant_scale_sqrt_ub",
        "anti_quant_reform_by_vmuls",
        "anti_quant"
    },
    ComputeType.ASCEND_QUANT: {
        "input_ub",
        "cast_f16_ub",
        "offset_ub",
        "scale_sqrt_ub",
        "reform_by_vmuls",
        "reform_by_vadds",
        "cast_i8_ub",
        "cast_i4_ub",
        "quant"
    },
    ComputeType.AVG_POOL_UPDATE: {
        "elewise_set_value_variable",
        "elewise_set_value_constant"
    },
    ComputeType.POOLING_WITH_ARG: {
        "pooling_with_arg_pad",
        "pooling_with_arg_expand",
        "pooling_with_arg_fractal",
        "pooling_with_arg_reduce",
        "pooling_with_arg_vcmp",
        "pooling_with_arg_depad",
        "pooling_with_arg_vdep",
        "pooling_with_arg_vnot",
        "pooling_with_arg_vand",
        "pooling_with_arg_vor",
        "pooling_with_arg_indices",
        "pooling_with_arg_select",
        "pooling_with_arg_min",
        "pooling_with_arg_max",
    },
    ComputeType.SORT: {
        "sort",
        "topk"
    },
    ComputeType.RESIZE: {
        "resize"
    },
    ComputeType.SCATTER: {
        "scatter_add",
        "scatter_div",
        "scatter_sub",
        "scatter_mul",
        "scatter_max",
        "scatter_min",
        "scatter_update",
        "scatter_nd",
        "scatter_nd_add",
        "scatter_nd_sub",
        "scatter_nd_update",
    },
    ComputeType.POOLING_GRAD_WITH_ARG: {
        "reduce_window",
        "elewise_binary_or",
        "pooling_grad_with_arg_indices"
    },
    ComputeType.DILATION: {
        "dilation"
    }
}
