#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
scatter schedule atomic
"""
from typing import Any

from tbe import tvm
from tbe.common.platform import ASCEND_910B
from tbe.common.platform import ASCEND_910_93
from tbe.common.platform import SHORT_SOC_VERSION
from tbe.common.platform.platform_info import get_soc_spec
from tbe.common.utils import op_tiling
from tbe.dsl.base import operation
from tbe.dsl.base.operation import get_compile_info
from tbe.dsl.base.operation import add_build_arg

from ... import util
from ...constants import CompileInfo
from ...constants import DTYPE_BYTE_MAPPING
from ...constants import SegmentPattern
from ...constants import Pattern
from ...schedule import Schedule
from .segment_tilingcase import TilingStrategy
from .segment_schedule_atomic import SegmentAtomicSchedule

DEFAULT = "default"

# block size in D architecture
BLOCK_SIZE_BYTE = 32

# STORE AREA
VAR_STORE_GM = 0
VAR_STORE_UB = 1
# Represents the axis that does not need to be split
DUMMY_DIM = -10


# 'pylint: disable=R0902, R0903
class SegmentZeroSchedule(SegmentAtomicSchedule):
    """
    segment schedule
    """
    def _do_tiling(self):
        b_idx_reduce = 0
        u_idx_norm = None
        u_idx_reduce = 0
        self._block_factor = 1
        ub_norm_factor = 1
        ub_reduce_factor = 1
        b_o, b_i = self._schedule[self._out_tensor].split(self._out_tensor.op.reduce_axis[b_idx_reduce],
                                                          factor=self._block_factor)
        if u_idx_reduce is not None:
            u_reduce_o, u_reduce_i = self._schedule[self._out_tensor].split(b_i, factor=ub_reduce_factor)
            self._reorder_axis.extend([b_o, u_reduce_o, u_reduce_i])

        if u_idx_norm is not None:
            u_norm_o, u_norm_i = self._schedule[self._out_tensor].split(self._out_tensor.op.axis[1],
                                                                        factor=ub_norm_factor)
            self._reorder_axis.extend([u_norm_o, u_norm_i, self._out_tensor.op.axis[0]])
        else:
            for i in range(len(self._out_tensor.op.axis)):
                self._reorder_axis.append(self._out_tensor.op.axis[i])

        self._block_bind_axis = b_o
        self._compute_at_reduce_axis = u_reduce_o
        self._compute_at_norm_axis = u_norm_o if u_idx_norm is not None else u_reduce_o
        self._emit_axis = 1 if u_idx_norm else 0
        self._emit_segment_axis = u_norm_i if u_idx_norm is not None else u_reduce_i

    def _calc_compute_at(self):
        pass

    def _do_compute_at(self):
        pass

    def _calc_emit_insn(self):
        if get_soc_spec(SHORT_SOC_VERSION) not in (ASCEND_910B, ASCEND_910_93):
            is_segment = operation.get_context().get("_is_segment")
            atomic_init = 3
            set_atomic = "set_atomic_write_manual"
            if is_segment:
                atomic_init = 2
            if self._op_type == "segmentensor_min":
                set_atomic = "set_atomic_write_min_manual"
            elif self._op_type == "segmentensor_max":
                set_atomic = "set_atomic_write_max_manual"
            elif self._op_type == "segmentensor_prod":
                set_atomic = "set_atomic_write_prod_manual"
            self._schedule[self._var_ub].pragma(self._var_ub.op.axis[self._emit_axis], set_atomic, atomic_init)
        self._emit_insn_map[self._var_ub] = [self._var_ub.op.axis[self._emit_axis], "phony_insn"]
        self._emit_insn_map[self._id_ub] = [self._id_ub.op.axis[0], "phony_insn"]
        self._emit_insn_map[self._out_tensor] = [self._emit_segment_axis, "phony_insn",
                                                 {"segment_atomic": 1, "atomic_total_len": self._out_atomic_len}]

