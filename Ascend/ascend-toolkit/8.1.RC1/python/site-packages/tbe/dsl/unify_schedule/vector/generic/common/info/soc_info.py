#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2023-2024 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
soc info
"""
from tbe.common.platform.platform_info import get_soc_spec

from .. import constants
from .. import helper
from ..... import util as unify_helper


class SocInfo:
    """
    class for soc info
    """
    @classmethod
    def get_soc_version(cls) -> str:
        """
        get short soc version
        """
        return get_soc_spec("SHORT_SOC_VERSION")

    @classmethod
    def get_core_num(cls) -> int:
        """
        get core num of soc
        """
        return get_soc_spec("CORE_NUM")

    @classmethod
    def get_ub_size(cls) -> int:
        """
        get ub size of soc
        """
        return get_soc_spec("UB_SIZE")

    @classmethod
    def get_block_size(cls) -> int:
        """
        get block size of soc
        """
        return constants.BLOCK_SIZE

    @classmethod
    def get_block_ele_num(cls, dtype: str) -> int:
        """
        get numbers of element in a block
        """
        return int(constants.BLOCK_SIZE // helper.get_bytes_num(dtype))

    @classmethod
    def get_soc_mte_cache_line(cls) -> int:
        """
        get bytes of mte cache_line
        """
        return 512 if unify_helper.is_v220() else 256

    @classmethod
    def soc_support_vbrcb(cls, dtype: str) -> bool:
        """
        query whether soc supports vbrcb instruction with this dtype
        """
        bit_dtype = helper.get_bit_dtype(dtype)
        if bit_dtype not in (constants.BitDtype.B16, constants.BitDtype.B32):
            return False

        return unify_helper.is_v220()

    @classmethod
    def soc_support_vc(cls, reduce_type: constants.ReduceType, dtype: str) -> bool:
        """
        query whether soc supports vcmax/vcmin/vcadd instruction with this dtype
        """
        is_soc_support_vc = False
        if reduce_type in (constants.ReduceType.MAX, constants.ReduceType.MIN):
            # soc support fp32 vc in v200 and v220, but emit insn pass does not enable it
            if dtype == "float16":
                is_soc_support_vc = True
        elif reduce_type == constants.ReduceType.SUM:
            if dtype in ("float16", "float32"):
                is_soc_support_vc = True

        return is_soc_support_vc

    @classmethod
    def soc_support_vc_only_value(cls, reduce_type: constants.ReduceType, dtype: str) -> bool:
        """
        query whether soc supports vcmax/vcmin/vcadd instruction and only value mode with this dtype
        """
        if not SocInfo.soc_support_vc(reduce_type, dtype):
            return False

        is_soc_support_vc_only_value = False
        if reduce_type in (constants.ReduceType.MAX, constants.ReduceType.MIN):
            if dtype in ("float16", "float32"):
                if unify_helper.is_v220():
                    is_soc_support_vc_only_value = True
        elif reduce_type == constants.ReduceType.SUM:
            if dtype in ("float16", "float32"):
                is_soc_support_vc_only_value = True

        return is_soc_support_vc_only_value

    @classmethod
    def soc_support_vcg(cls, reduce_type: constants.ReduceType, dtype: str) -> bool:
        """
        query whether soc supports vcgmax/vcgmin/vcgadd instruction with this dtype
        """
        is_soc_support_vcg = False
        if reduce_type in (constants.ReduceType.MAX, constants.ReduceType.MIN, constants.ReduceType.SUM):
            # soc support fp32 vcg in v200 and v220, but emit insn pass does not enable it
            if dtype == "float16":
                is_soc_support_vcg = True

        return is_soc_support_vcg

    @classmethod
    def soc_support_vsel_non_zero_mode(cls) -> bool:
        """
        query whether soc supports vsel instruction and non zero mode
        """
        return unify_helper.is_v200() or unify_helper.is_v220()

    @classmethod
    def soc_support_less_one_block_mte(cls) -> bool:
        """
        query whether soc supports less one block data_move
        """
        return unify_helper.is_v220()
