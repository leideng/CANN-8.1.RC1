#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     vector_buffer.py
DESC:     debug vector buffer
CREATED:  2019-10-26 20:12:13
MODIFIED: 2020-12-7 19:17:00
"""
from tbe.common.platform import scope_wreg
from tbe.tik.debug.npbuffer import NumpyBuffer


class VectorBuffer:
    """
    Class vector buffer define
    """
    def __init__(self, context):
        # keep a ref of all vector,
        # so they won't be GCed and our id is not changed
        self.vector_holder = {}
        # id(vector) -> NumpyBuffer
        self.vector2buffer = {}
        # tvm buffer to it's owner
        self.init_mode = 'random'
        self.init_value = None
        self.value_valid = {}
        self.context = context

    def add_vector(self, vector):
        """
        add tensor to buffer
        Parameters
        ----------
        vector:source vector

        Returns
        ----------
        No returns
        """
        vector_key = id(vector)
        # allocate buffer if necessary
        if vector_key in self.vector2buffer:
            raise RuntimeError('Cannot add a vector buffer twice')
        dtype = vector.dtype
        # if is Predicate Register, update dtype to uint8,
        # init value will be 0 or 1 of one bit, will not be True/False
        if dtype == "bool":
            dtype = "uint8"

        is_wide_register = False
        if vector.scope == scope_wreg:
            is_wide_register = True

        npbuf = NumpyBuffer((self.context, vector.data_len, dtype,
                            self.init_mode, self.init_value), is_wide_register=is_wide_register)
        self.vector2buffer[vector_key] = npbuf
        self.vector_holder[vector_key] = vector
        self.value_valid[vector_key] = False

    def get_npbuffer_by_vector(self, vector):
        """
        get numpy buffer by tensor
        Parameters
        ----------
        vector:source vector

        Returns
        ----------
        return: numpy buffer
        """
        return self.vector2buffer.get(id(vector))

    def set_value_valid(self, vector, is_valid):
        """
        set value_valid dict True or False
        Parameters
        ----------
        vector: vector
        is_valid: valid flag
        Returns
        -------
        no return
        """
        vector_key = id(vector)
        if vector_key not in self.value_valid:
            raise RuntimeError('Cannot find the vector buffer')
        if is_valid is True:
            self.value_valid[vector_key] = True
        else:
            self.value_valid[vector_key] = False

    def get_value_valid(self, vector):
        """
        get value_valid value
        Parameters
        ----------
        vector: vector
        Returns
        -------
        True or False
        """
        vector_key = id(vector)
        if vector_key not in self.value_valid:
            raise RuntimeError('Cannot find the vector buffer')
        return self.value_valid[vector_key]
