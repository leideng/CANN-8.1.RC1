#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     decorators_high_vec.py
DESC:     this file contains many decorator
CREATED:  2021-8-05 10:10:10
MODIFIED: 2021-8-05 10:10:10
"""

from functools import wraps
from tbe.tik.debug.tikdbg.codemapping import get_caller_context
from tbe.tik.debug.intrinsic_high_vec import DataMoveDebug
from tbe.tik.debug.intrinsic_high_vec import TwoOpsDebug
from tbe.tik.debug.intrinsic_high_vec import SingleOpsDebug
from tbe.tik.debug.intrinsic_high_vec import DuplicateDebug
from tbe.tik.debug.intrinsic_high_vec import CastConvDebug
from tbe.tik.debug.intrinsic_high_vec import QuantDebug
from tbe.tik.debug.intrinsic_high_vec import CmpvDebug
from tbe.tik.debug.intrinsic_high_vec import SelDebug
from tbe.tik.debug.intrinsic_high_vec import ReduceDebug


def single_ops_debug_for_high_api(func):
    """
    debug decorator for single ops
    Parameters
    ----------
    func: single ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            stmt = SingleOpsDebug(get_caller_context(), debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)
    return wrapper


def double_ops_debug_for_high_api(func):
    """
    debug decorator for double ops
    Parameters
    ----------
    func: double ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, double_debug_params):
        if not tik_instance.debug_disabled:
            stmt = TwoOpsDebug(get_caller_context(), double_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, double_debug_params)
    return wrapper


def data_move_debug_for_high_api(func):
    """
    debug decorator for h_data_move
    Parameters
    ----------
    func: h_data_move api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, dma_debug_params):
        if not tik_instance.debug_disabled:
            stmt = DataMoveDebug(get_caller_context(), dma_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, dma_debug_params)
    return wrapper


def duplicate_debug_for_high_api(func):
    """
    debug decorator for h_duplicate
    Parameters
    ----------
    func: h_duplicate api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, dup_debug_params):
        if not tik_instance.debug_disabled:
            stmt = DuplicateDebug(get_caller_context(), dup_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, dup_debug_params)
    return wrapper


def cast_conv_debug_for_high_api(func):
    """
    debug decorator for h_cast, h_conv
    Parameters
    ----------
    func: ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, cast_debug_params):
        if not tik_instance.debug_disabled:
            stmt = CastConvDebug(get_caller_context(), cast_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, cast_debug_params)
    return wrapper


def quant_debug_for_high_api(func):
    """
    debug decorator for h_quant
    Parameters
    ----------
    func: ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, quant_debug_params):
        if not tik_instance.debug_disabled:
            stmt = QuantDebug(get_caller_context(), quant_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, quant_debug_params)
    return wrapper


def cmpv_debug_for_high_api(func):
    """
    debug decorator for h_cmpv
    Parameters
    ----------
    func: ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, cmpv_debug_params):
        if not tik_instance.debug_disabled:
            stmt = CmpvDebug(get_caller_context(), cmpv_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, cmpv_debug_params)
    return wrapper


def sel_debug_for_high_api(func):
    """
    debug decorator for h_sel
    Parameters
    ----------
    func: ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, sel_debug_params):
        if not tik_instance.debug_disabled:
            stmt = SelDebug(get_caller_context(), sel_debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, sel_debug_params)
    return wrapper


def reduce_debug_for_high_api(func):
    """
    debug decorator for reduce ops
    Parameters
    ----------
    func: reduce ops' api function

    Returns
    -------
    the decorator
    """
    @wraps(func)
    def wrapper(tik_instance, dst, debug_params):
        if not tik_instance.debug_disabled:
            stmt = ReduceDebug(get_caller_context(), dst, debug_params, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance,  dst, debug_params)
    return wrapper
