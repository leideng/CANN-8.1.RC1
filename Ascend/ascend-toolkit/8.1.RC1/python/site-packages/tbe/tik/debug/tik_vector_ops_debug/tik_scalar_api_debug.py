#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_scalar_api_debug.py
DESC:     this file contains many decorator
CREATED:  2021-12-09 10:53:13
MODIFIED: 2021-12-09 10:53:13
"""
from collections import namedtuple
from functools import wraps

from tbe.tik.debug.tik_vector_ops_debug.tik_scalar_api_debug_ import ScalarSingleOp
from tbe.tik.debug.tik_vector_ops_debug.tik_scalar_api_debug_ import ScalarConv
from tbe.tik.debug.tik_vector_ops_debug.tik_scalar_api_debug_ import ScalarBinaryOp
from tbe.tik.debug.tikdbg.codemapping import get_caller_context


def scalar_single_decorator(func):
    """
    bind this decorator with scalar_single

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, name, dst, src):
        """
        bind this decorator with scalar_single
        """
        scalar_single_api = namedtuple('ScalarSingleApi', ["name", "dst", "src"])
        scalar_single_api = scalar_single_api(name, dst, src)
        if not tik_instance.debug_disabled:
            stmt = ScalarSingleOp(get_caller_context(), scalar_single_api, tik_instance.context.tik_debugger)
            ctx = tik_instance.context
            ctx.curr_scope().add_stmt(stmt)
            for var in scalar_single_api.dst.debug_var:
                ctx.bind_var(var)
            ctx.set_scalar_var_mapping(scalar_single_api.dst.reg_buffer, scalar_single_api.dst.debug_var)
        return func(tik_instance, name, dst, src)

    return wrapper


def scalar_binary_decorator(func):
    """
    bind this decorator with scalar_single

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, name, dst, src0, src1):
        """
        bind this decorator with scalar binary instr
        """
        scalar_binary_api = namedtuple('ScalarBinaryApi', ["name", "dst", "src0", "src1"])
        scalar_binary_api = scalar_binary_api(name, dst, src0, src1)
        if not tik_instance.debug_disabled:
            stmt = ScalarBinaryOp(get_caller_context(), scalar_binary_api, tik_instance.context.tik_debugger)
            ctx = tik_instance.context
            ctx.curr_scope().add_stmt(stmt)
            for var in dst.debug_var:
                ctx.bind_var(var)
            ctx.set_scalar_var_mapping(dst.reg_buffer, dst.debug_var)
        return func(tik_instance, name, dst, src0, src1)
    return wrapper


def scalar_conv_decorator(func):
    """
    bind this decorator with scalar_conv

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, round_mode, dst, src):
        """
        bind this decorator with scalar_conv
        """
        scalar_conv_api = namedtuple('ScalarConvApi', ["round_mode", "dst", "src"])
        scalar_conv_api = scalar_conv_api(round_mode, dst, src)
        if not tik_instance.debug_disabled:
            stmt = ScalarConv(get_caller_context(), scalar_conv_api, tik_instance.context.tik_debugger)
            ctx = tik_instance.context
            ctx.curr_scope().add_stmt(stmt)
            for var in dst.debug_var:
                ctx.bind_var(var)
            ctx.set_scalar_var_mapping(dst.reg_buffer, dst.debug_var)
        return func(tik_instance, round_mode, dst, src)

    return wrapper
