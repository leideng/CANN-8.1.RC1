#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     decorators_cube.py
DESC:     cube api decorators
CREATED:  2022-4-30 09:12:13
MODIFIED: 2022-4-30 14:04:45
"""
from collections import namedtuple
from functools import wraps
from tbe.tik.debug.intrinsic_cube import MoveBiasToBt
from tbe.tik.debug.intrinsic_cube import FixpipeV2
from tbe.tik.debug.intrinsic_cube import Cbuf2Fbuf
from tbe.tik.debug.intrinsic_cube import SetQuantPre
from tbe.tik.debug import get_caller_context

FixpipeV2Params = namedtuple("FixpipeV2Params", ["fixpipe_config", "fixpipe_api", "fixpipe_tensor", "n_size",
                                                 "src_offset", "dst_offset"])


def move_bias_to_bt_decorator(func):
    """
    bind this decorator with fixpipe v2 code gen

    Parameters
    ----------
    func : the decorated function
    it move bias to bias buffer for debug
    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, bias, bias_tensor_bt, extent, conv_control):
        # the first arg must be tik_instance
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            bias_args = MoveBiasToBt.move_bias_args(bias, bias_tensor_bt, extent, conv_control)
            bias_to_bt_call = MoveBiasToBt(get_caller_context(), bias_args, ctx.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(bias_to_bt_call)
        return func(tik_instance, bias, bias_tensor_bt, extent, conv_control)

    return wrapper


def fixpipe_v2_deq_decorator(func):
    """
    bind this decorator with fixpipe v2 code gen

    Parameters
    ----------
    func : the decorated function
    it moves tensor from L0C to GM, when mode_param == scalar
    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj, fixpipe_config, fixpipe_api):
        # the first arg must be tik_instance
        tik_instance = op_obj.tik_instance
        ctx = tik_instance.context
        fixpipe_vdeq_params = FixpipeV2Params(fixpipe_config, fixpipe_api, None, fixpipe_config.n_size, 0, 0)
        fixpipe_call = FixpipeV2(get_caller_context(), fixpipe_vdeq_params, ctx.tik_debugger)
        op_obj.tik_instance.context.curr_scope().add_stmt(fixpipe_call)
        return func(op_obj, fixpipe_config, fixpipe_api)

    return wrapper


def fixpipe_v2_vdeq_decorator(func):
    """
    bind this decorator with fixpipe v2 code gen

    Parameters
    ----------
    func : the decorated function
    it moves tensor from L0C to GM, when mode_param == tensor
    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj, fixpipe_vdeq_params):
        # the first arg must be tik_instance
        tik_instance = op_obj.tik_instance
        ctx = tik_instance.context
        fixpipe_call = FixpipeV2(get_caller_context(), fixpipe_vdeq_params, ctx.tik_debugger)
        op_obj.tik_instance.context.curr_scope().add_stmt(fixpipe_call)
        return func(op_obj, fixpipe_vdeq_params)

    return wrapper


def cbuf2fbuf_decorator(func):
    """
    bind this decorator with fixpipe v2 code gen

    Parameters
    ----------
    func : the decorated function
    it moves deq tensor from GM to FB0
    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj, copy_deq_tensor_params, deq_value_offset=None):
        # the first arg must be tik_instance
        tik_instance = op_obj.tik_instance
        ctx = tik_instance.context
        cbuf_to_fbuf_call = Cbuf2Fbuf(get_caller_context(), copy_deq_tensor_params, deq_value_offset, ctx.tik_debugger)
        op_obj.tik_instance.context.curr_scope().add_stmt(cbuf_to_fbuf_call)
        return func(op_obj, copy_deq_tensor_params, deq_value_offset)

    return wrapper


def set_quant_pre_decorator(func):
    """
    bind this decorator with fixpipe v2 code gen

    Parameters
    ----------
    func : the decorated function
    it moves scalar
    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj, fixpipe_config):
        # the first arg must be tik_instance
        tik_instance = op_obj.tik_instance
        ctx = tik_instance.context
        deq_quant = SetQuantPre(get_caller_context(), fixpipe_config, ctx.tik_debugger)
        op_obj.tik_instance.context.curr_scope().add_stmt(deq_quant)
        return func(op_obj, fixpipe_config)

    return wrapper
