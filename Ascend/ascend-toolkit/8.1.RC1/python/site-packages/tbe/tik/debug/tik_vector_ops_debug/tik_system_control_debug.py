#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_system_control_debug.py
DESC:     provide params
CREATED:  2021-12-7 19:52:05
MODIFIED: 2021-12-7 19:52:05
"""
from collections import namedtuple
from functools import wraps

from tbe.tik.debug import get_caller_context
from tbe.tik.debug.tik_vector_ops_debug.tik_system_control_debug_ import SetCtrlSPR
from tbe.tik.debug.tik_vector_ops_debug.tik_system_control_debug_ import SetL0SetValue


def set_ctrl_bits(begin, end=None, range_start=None, range_end=None, param_name=None):
    """
    bind this decorator with set ctrl instructions

    Parameters
    ----------
    begin : the begin index of ctrl register
    end : the end index of ctrl register
    range_start: the range start of ctrl register
    range_end: the range end of ctrl register
    param_name: the name of ctrl register

    Returns
    -------
    function
    """
    def set_ctrl_bits_wrapper(func):
        """
        bind this decorator with set ctrl instructions
        """
        def wrapper(tik_instance, num):
            """
            bind this decorator with set ctrl instructions

            Parameters
            ----------
            tik_instance: an instance of Tik
            num : ctrl special register bit value

            Returns
            -------
            function
            """
            system_ctrl_api = namedtuple('SystemControlApi', ["num", "mask", "begin", "range_start", "range_end",
                                                              "param_name"])

            if not tik_instance.debug_disabled:
                # CRTL is 64 bit, if it changed we must change as well
                mask = 2**64 - 1
                end_ = end
                if end_ is None:
                    end_ = begin + 1
                for i in range(begin, end_):
                    mask ^= (1 << i)

                system_control_api = system_ctrl_api(num, mask, begin, range_start, range_end, param_name)
                stmt = SetCtrlSPR(get_caller_context(), system_control_api, tik_instance.context.tik_debugger)
                tik_instance.context.curr_scope().add_stmt(stmt)

            with tik_instance.context.freeze():
                return func(tik_instance, num)
        return wrapper
    return set_ctrl_bits_wrapper


def set_l0_set_value_decorator(func):
    """
    bind this decorator with set_l0_set_value

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, value, dtype):
        """
        bind this decorator with set_l0_set_value
        """
        if not tik_instance.debug_disabled:
            stmt = SetL0SetValue(get_caller_context(), value, dtype, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, value, dtype)
    return wrapper
