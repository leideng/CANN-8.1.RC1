#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     decorators_spec_v210.py
DESC:     this file contains many decorator
CREATED:  2019-7-04 20:12:13
MODIFIED: 2019-7-24 14:04:45
"""
from functools import wraps

from tbe.tik.debug.tikdbg.codemapping import get_caller_context
from tbe.tik.debug.intrinsic_spec_v210 import VectorDhistChist
from tbe.tik.debug.intrinsic_spec_v210 import WpackWpacks
from tbe.tik.debug.intrinsic_spec_v210 import WmulWmuls
from tbe.tik.debug.intrinsic_spec_v210 import WmulV2
from tbe.tik.debug.intrinsic_spec_v210 import WmulsV2
from tbe.tik.debug.intrinsic_spec_v210 import Wfifr2


def vector_dhist_chist_decorator(func):
    """
    bind this decorator with vector dhist/chist instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = VectorDhistChist(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def vector_dhist_chist_v2_decorator(func):
    """
    bind this decorator with vector dhist/chist instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = VectorDhistChist(get_caller_context(), debug_params, ctx.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def wpack_wpacks_decorator(func):
    """
    bind this decorator with wide pack/packs instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = WpackWpacks(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def wmul_wmuls_decorator(func):
    """
    bind this decorator with wide mul/muls instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = WmulWmuls(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def wmul_v2_decorator(func):
    """
    bind this decorator with wide wmul_v2 instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = WmulV2(get_caller_context(), debug_params, tik_instance)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper


def wmuls_v2_decorator(func):
    """
    bind this decorator with wide wmuls_v2 instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params, src1_dtype):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = WmulsV2(get_caller_context(), debug_params, src1_dtype, tik_instance)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params, src1_dtype)

    return wrapper


def wfifr2_decorator(func):
    """
    bind this decorator with wfifr2/wfifr2a/wfifr2s instructions
    """
    @wraps(func)
    def wrapper(tik_instance, debug_params):
        if not tik_instance.debug_disabled:
            ctx = tik_instance.context
            stmt = Wfifr2(get_caller_context(), debug_params, tik_instance.context.tik_debugger)
            ctx.curr_scope().add_stmt(stmt)
        return func(tik_instance, debug_params)

    return wrapper
