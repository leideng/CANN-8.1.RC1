#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     mmad_decorators.py
DESC:     mmad_decorators
CREATED:  2021-12-03 10:40 AM
MODIFIED: 2021-12-03 10:40 AM
"""
from functools import wraps

from tbe.tik.debug.mmad_intrinsic import Load2D
from tbe.tik.debug.mmad_intrinsic import Load2DV3
from tbe.tik.debug.mmad_intrinsic import Col2Img
from tbe.tik.debug.mmad_intrinsic import Load3DV1
from tbe.tik.debug.mmad_intrinsic import Load3DV2
from tbe.tik.debug.mmad_other_intrinsic import MmadBrc
from tbe.tik.debug.mmad_other_intrinsic import BroadcastUB
from tbe.tik.debug.mmad_other_intrinsic import LoadWinoWeight
from tbe.tik.debug.mmad_other_intrinsic import LoadWinoFeatureMap
from tbe.tik.debug.mmad_other_intrinsic import LoadL1ToL0AWinograd
from tbe.tik.debug.mmad_other_intrinsic import LoadL1ToL0BWinograd
from tbe.tik.debug import get_caller_context


def load2dv1_decorator(func):
    """
    bind this decorator with load2dv1_decorator

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(load2d_obj):
        """
        bind this decorator with load2dv1_decorator
        """
        if not load2d_obj.tik_instance.debug_disabled:
            load2d_stmt = Load2D(get_caller_context(), load2d_obj)
            load2d_obj.tik_instance.context.curr_scope().add_stmt(load2d_stmt)
        return func(load2d_obj)

    return wrapper


def load2dv3_decorator(func):
    """
    bind this decorator with load2dv3_decorator

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(load2dv3_obj):
        """
        bind this decorator with load2dv3_decorator
        """
        if not load2dv3_obj.tik_instance.debug_disabled:
            load2dv3_stmt = Load2DV3(get_caller_context(), load2dv3_obj)
            load2dv3_obj.tik_instance.context.curr_scope().add_stmt(load2dv3_stmt)
        return func(load2dv3_obj)

    return wrapper


def load3dv1_decorator(func):
    """
    bind this decorator with load3dv1_decorator

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(load3d_obj):
        """
        bind this decorator with load3dv1_decorator
        """
        if not load3d_obj.tik_instance.debug_disabled:
            load3dv1_stmt = Load3DV1(get_caller_context(), load3d_obj)
            load3d_obj.tik_instance.context.curr_scope().add_stmt(load3dv1_stmt)
        return func(load3d_obj)

    return wrapper


def load3dv2_decorator(func):
    """
    bind this decorator with load3dv2 instructions
    """
    @wraps(func)
    def wrapper(load3dv2_obj):
        """
        bind this decorator with load3dv2_decorator
        """
        if not load3dv2_obj.tik_instance.debug_disabled:
            load3dv2_stmt = Load3DV2(get_caller_context(), load3dv2_obj)
            load3dv2_obj.tik_instance.context.curr_scope().add_stmt(load3dv2_stmt)
        return func(load3dv2_obj)
    return wrapper


def col2img_decorator(func):
    """
    bind this decorator with col2img

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(col2img_obj):
        """
        bind this decorator with col2img
        """
        if not col2img_obj.tik_instance.debug_disabled:
            stmt = Col2Img(get_caller_context(), col2img_obj)
            col2img_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(col2img_obj)

    return wrapper


def broadcast_ub_to_l0c_decorator(func):
    """
    bind this decorator with broadcast_ub_to_10c

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(b_ubl0c_obj):
        """
        bind this decorator with broadcast_ub_to_10c
        """
        if not b_ubl0c_obj.tik_instance.debug_disabled:
            brc_stmt_ = BroadcastUB(get_caller_context(), b_ubl0c_obj)
            b_ubl0c_obj.tik_instance.context.curr_scope().add_stmt(brc_stmt_)
        return func(b_ubl0c_obj)

    return wrapper


def mmad_brc_decorator(func):
    """
    bind this decorator with mmad_broadcast instructions
    """
    @wraps(func)
    def wrapper(mmad_b_obj):
        if not mmad_b_obj.tik_instance.debug_disabled:
            stmt = MmadBrc(get_caller_context(), mmad_b_obj)
            mmad_b_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(mmad_b_obj)
    return wrapper


def load_winograd_weight_decorator(func):
    """
    bind this decorator with winograd_weight_transform_v2 instructions
    """
    @wraps(func)
    def wrapper(load_w_we_obj):
        if not load_w_we_obj.tik_instance.debug_disabled:
            stmt = LoadWinoWeight(
                get_caller_context(), load_w_we_obj)
            load_w_we_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(load_w_we_obj)
    return wrapper


def load_winograd_fm_decorator(func):
    """
    bind this decorator with load_winograd_fm instructions
    """
    @wraps(func)
    def wrapper(load_w_fm_obj):
        if not load_w_fm_obj.tik_instance.debug_disabled:
            stmt = LoadWinoFeatureMap(
                get_caller_context(), load_w_fm_obj)
            load_w_fm_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(load_w_fm_obj)
    return wrapper


def winograd_fm_transform_decorator(func):
    """
    bind this decorator with winograd_feature_map_transform instructions
    """
    @wraps(func)
    def wrapper(w_fm_tf_obj):
        """
        bind this decorator with winograd_fm instructions
        """
        if not w_fm_tf_obj.tik_instance.debug_disabled:
            stmt = LoadL1ToL0AWinograd(get_caller_context(), w_fm_tf_obj)
            w_fm_tf_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(w_fm_tf_obj)
    return wrapper


def winograd_weight_trans_decorator(func):
    """
    bind this decorator with winograd_weight_transform instructions
    """
    @wraps(func)
    def wrapper(w_we_tf_obj):
        if not w_we_tf_obj.tik_instance.debug_disabled:
            stmt = LoadL1ToL0BWinograd(get_caller_context(), w_we_tf_obj)
            w_we_tf_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(w_we_tf_obj)
    return wrapper
