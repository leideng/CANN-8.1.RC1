#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
# FILE:     tensor_buffer.py
# DESC:     debuge tensor buffer
# CREATED:  2019-10-26 20:12:13
# MODIFIED: 2020-12-7 19:17:00
"""
from tbe.common.platform import scope_gm
from tbe.tik.debug.npbuffer import NumpyBuffer
from tbe.tik.debug.npbuffer import NumpyBufferProxy


class TensorBuffer:
    """
    Class tensor buffer define
    """
    def __init__(self, context):
        super(TensorBuffer, self).__init__()
        # keep a ref of all tensor,
        # so they won't be GCed and our id is not changed
        # id(tensor) -> NumpyBuffer
        self.tensor2buffer = {}
        # tvm buffer to it's owner
        self.tvmbuffer2tensor = {}
        self.init_mode = 'random'
        self.init_value = None
        self.context = context

    def add_tensor(self, tensor, np_array=None):
        """
        add tensor to buffer
        Parameters
        ----------
        tensor:source tensor
        np_array: the numpy array for NumpyBuffer's buffer

        Returns
        ----------
        No returns
        """
        tensor_key = id(tensor)
        is_global = False  # GM buffer different with others

        if tensor.scope == scope_gm:
            if tensor.buffer not in self.context.placeholders.values():
                # only for workspace and output GM tensors
                is_global = True

        npbuf = NumpyBuffer((self.context, tensor.shape, tensor.dtype, self.init_mode,
                            self.init_value), is_global=is_global, np_array=np_array)
        self.tvmbuffer2tensor[tensor.buffer] = tensor
        self.tensor2buffer[tensor_key] = npbuf
        self.context.update_npy_tensor(tensor.buffer.data, npbuf.buffer)

    def add_tensor_proxy(self, proxy_tensor):
        """
        add tensor to buffer proxy
        Parameters
        ----------

        proxy_tensor: tensor of proxy

        Returns
        ----------
        No returns
        """
        np_buf = NumpyBufferProxy(self.context, proxy_tensor)
        self.tensor2buffer[id(proxy_tensor)] = np_buf

    def get_npbuffer_by_tvmbuffer(self, tvm_buffer):
        """
        get numpy buffer by tvm buffer
        Parameters
        ----------
        tvm_buffer: tvm buffer

        Returns
        ----------
        return: numpy buffer
        """
        tensor = self.tvmbuffer2tensor.get(tvm_buffer)
        return self.tensor2buffer.get(id(tensor))

    def get_npbuffer_by_tensor(self, tensor):
        """
        get numpy buffer by tensor
        Parameters
        ----------
        tensor:source tensor

        Returns
        ----------
        return: numpy buffer
        """
        return self.tensor2buffer.get(id(tensor))
