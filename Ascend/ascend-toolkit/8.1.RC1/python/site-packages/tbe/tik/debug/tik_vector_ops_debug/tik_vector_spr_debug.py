#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_spr_debug.py
DESC:     provide params
CREATED:  2021-12-6 9:56:16
MODIFIED: 2021-12-6 9:56:16
"""
from functools import wraps
from tbe.tik.debug import get_caller_context
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_spr_debug_ import MoveCMPMASK2Tensor
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_spr_debug_ import MoveTensor2CMPMASK
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_spr_debug_ import VMS4SR2Scalar
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_spr_debug_ import WriteSPR
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_spr_debug_ import SetRpnOffset
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil


def mov_cmpmask_to_tensor_decorator(func):
    """
    bind this decorator with mov_cmpmask_to_tensor

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, dst, src_cmpmask):
        """
        bind this decorator with mov_cmpmask_to_tensor
        """
        if not tik_instance.debug_disabled:
            stmt = MoveCMPMASK2Tensor(get_caller_context(), dst, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, dst, src_cmpmask)

    return wrapper


def mov_tensor_to_cmpmask_decorator(func):
    """
    bind this decorator with mov_tensor_to_cmpmask

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, src):
        """
        bind this decorator with mov_tensor_to_cmpmask
        """
        if not tik_instance.debug_disabled:
            stmt = MoveTensor2CMPMASK(get_caller_context(depth=2), src, tik_instance)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, src)

    return wrapper


def vms4_to_scalar_decorator(func):
    """
    bind this decorator with vms4_to_scalar

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, scalar_list, vms4_sr):
        """
        bind this decorator with vms4_to_scalar

        Parameters
        ----------
        tik_instance: an instance of Tik

        scalar_list: a list of Scalar

        vms4_sr: tik_params's VMS4 SR

        Returns
        ----------
        func: the decorated function
        """
        TikCheckUtil.check_type_match(scalar_list, (list, tuple))
        if not tik_instance.debug_disabled:
            stmt = VMS4SR2Scalar(get_caller_context(), scalar_list, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
            for scalar in scalar_list:
                for var in scalar.debug_var:
                    tik_instance.context.bind_var(var)
                tik_instance.context.set_scalar_var_mapping(scalar.reg_buffer, scalar.debug_var)
        return func(tik_instance, scalar_list, vms4_sr)

    return wrapper


def set_rpn_cor_ir_decorator(func):
    """
    bind this decorator with set_rpn_cor_ir

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, number):
        """
        bind this decorator with set_rpn_cor_ir
        """
        if not tik_instance.debug_disabled:
            stmt = WriteSPR(get_caller_context(), 'RPN_COR_IR', number, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, number)

    return wrapper


def set_rpn_offset_decorator(func):
    """
    bind this decorator with set_rpn_offset

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, offset, offset_dtype="float16"):
        """
        bind this decorator with set_rpn_offset
        """
        if not tik_instance.debug_disabled:
            stmt = SetRpnOffset(get_caller_context(), offset, offset_dtype, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, offset, offset_dtype)

    return wrapper
