#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     load_image_intrinsic.py
DESC:     load_image_intrinsic
CREATED:  2021-11-20 9:45 AM
MODIFIED: 2021-11-20 9:45 AM
"""
import numpy as np

from tbe.tik.common.util import DTYPE_SIZE
from tbe.tik.common.common_util import float16format2uint16
from tbe.tik.common.common_util import check_dict_and_not_none
from tbe.tik.common.tik_get_soc_name import get_soc_core_type
from tbe.tik.common.tik_get_soc_name import get_soc_name
from tbe.tik.debug.statement import STMT
from tbe.tik.debug.util import copy_tensor_to_model
from tbe.tik.debug.sim.util import TempEnv
from tbe.tik.debug.load_image_intrinsic_ import cal_raw_info
from tbe.tik.debug.load_image_intrinsic_ import cal_dtc_info
from tbe.tik.debug.load_image_intrinsic_ import cal_area_pad_info
from tbe.tik.debug.load_image_intrinsic_ import cal_cpad_info
from tbe.tik.debug.load_image_intrinsic_ import cal_pre_clip_info
from tbe.tik.debug.load_image_intrinsic_ import cal_scf_info
from tbe.tik.debug.load_image_intrinsic_ import cal_post_clip_info
from tbe.tik.debug.load_image_intrinsic_ import cal_stretch_info
from tbe.tik.debug.load_image_intrinsic_ import cal_flip_info
from tbe.tik.debug.load_image_intrinsic_ import check_src_info
from tbe.tik.debug.load_image_intrinsic_ import cal_crop_info
from tbe.tik.debug.load_image_intrinsic_ import check_src_overflow
from tbe.tik.debug.load_image_intrinsic_ import aipp_set_enable_bit
from tbe.tik.debug.load_image_intrinsic_ import cal_csc_info
from tbe.tik.debug.load_image_intrinsic_ import cal_swap_info
from tbe.tik.tik_lib.tik_params import ALIGNED_ADDR
from tbe.tik.tik_lib.tik_params import ALIGN_SRC_EVEN
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import is_610_610b_310p_aic
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_INPUT_VERSON_AND_FUNCTION
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_INIT_FLOAT_VALUE_ONE
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_INPUT_TYPE_SWAP_ALIGN
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP0_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP1_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP2_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP3_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP4_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP5_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP6_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP7_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP8_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP9_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP10_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP11_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP12_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP13_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP15_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP16_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP17_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_XS_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import AIPP_XT_OFFSET_LIST
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import RAW16
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import RAW24
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_common import DEF_VALUE


def set_spr_aipp0(context, params_val):
    """
    set aipp0 spr
    """
    # check over
    aipp0_register = context.evaluate_expr(params_val.get('src0_start'))
    aipp0_register |= params_val.get('sfr_dtc_pixel_mean_ch0_val', DEF_VALUE) << AIPP0_OFFSET_LIST[1]
    aipp0_register |= params_val.get('sfr_dtc_pixel_mean_ch1_val', DEF_VALUE) << AIPP0_OFFSET_LIST[2]

    context.model.write_spr('AIPP_SPR_0', aipp0_register)


def set_spr_aipp1(context, params_val):
    """
    set aipp1 spr
    """
    aipp1_register = context.evaluate_expr(params_val.get('src1_start'))
    aipp1_register |= params_val.get('csc_enable', DEF_VALUE) << AIPP1_OFFSET_LIST[1]

    context.model.write_spr('AIPP_SPR_1', aipp1_register)


def set_spr_aipp2(context, params_val):
    """
    set aipp2 spr
    """
    csc_matrix_r0_c0_val = params_val.get('csc_matrix_r0_c0_val', DEF_VALUE)
    csc_matrix_r0_c1_val = params_val.get('csc_matrix_r0_c1_val', DEF_VALUE)
    csc_matrix_r0_c2_val = params_val.get('csc_matrix_r0_c2_val', DEF_VALUE)
    csc_matrix_r1_c0_val = params_val.get('csc_matrix_r1_c0_val', DEF_VALUE)
    if params_val.get('csc_enable', DEF_VALUE) == 1:
        aipp2_register = np.uint16(csc_matrix_r0_c0_val)
        aipp2_register |= np.uint64(np.uint16(csc_matrix_r0_c1_val) << AIPP2_OFFSET_LIST[1])
        aipp2_register |= np.uint64(np.uint16(csc_matrix_r0_c2_val) << AIPP2_OFFSET_LIST[2])
        aipp2_register |= np.uint64(np.uint16(csc_matrix_r1_c0_val) << AIPP2_OFFSET_LIST[3])
    else:
        aipp2_register = 0

    context.model.write_spr('AIPP_SPR_2', aipp2_register)


def set_spr_aipp3(context, params_val):
    """
    set aipp3 spr
    """
    csc_matrix_r1_c1_val = params_val.get('csc_matrix_r1_c1_val', DEF_VALUE)
    csc_matrix_r1_c2_val = params_val.get('csc_matrix_r1_c2_val', DEF_VALUE)
    csc_matrix_r2_c0_val = params_val.get('csc_matrix_r2_c0_val', DEF_VALUE)
    csc_matrix_r2_c1_val = params_val.get('csc_matrix_r2_c1_val', DEF_VALUE)
    if params_val.get('csc_enable') == 1:
        aipp3_register = np.uint16(csc_matrix_r1_c1_val)
        aipp3_register |= np.uint64(np.uint16(csc_matrix_r1_c2_val) << AIPP3_OFFSET_LIST[1])
        aipp3_register |= np.uint64(np.uint16(csc_matrix_r2_c0_val) << AIPP3_OFFSET_LIST[2])
        aipp3_register |= np.uint64(np.uint16(csc_matrix_r2_c1_val) << AIPP3_OFFSET_LIST[3])
    else:
        aipp3_register = 0

    context.model.write_spr('AIPP_SPR_3', aipp3_register)


def set_spr_aipp4(context, params_val):
    """
    set aipp4 spr
    """
    csc_matrix_r2_c2_val = params_val.get('csc_matrix_r2_c2_val', DEF_VALUE)
    csc_out_bias_0_val = params_val.get('csc_out_bias_0_val', DEF_VALUE)
    csc_out_bias_1_val = params_val.get('csc_out_bias_1_val', DEF_VALUE)
    csc_out_bias_2_val = params_val.get('csc_out_bias_2_val', DEF_VALUE)
    csc_in_bias_0_val = params_val.get('csc_in_bias_0_val', DEF_VALUE)
    csc_in_bias_1_val = params_val.get('csc_in_bias_1_val', DEF_VALUE)
    csc_in_bias_2_val = params_val.get('csc_in_bias_2_val', DEF_VALUE)
    if params_val.get('csc_enable', DEF_VALUE) == 1:
        aipp4_register = np.uint16(csc_matrix_r2_c2_val)
        aipp4_register |= np.uint64(np.uint16(csc_out_bias_0_val) << AIPP4_OFFSET_LIST[1])
        aipp4_register |= np.uint64(np.uint16(csc_out_bias_1_val) << AIPP4_OFFSET_LIST[2])
        aipp4_register |= np.uint64(np.uint16(csc_out_bias_2_val) << AIPP4_OFFSET_LIST[3])
        aipp4_register |= np.uint64(np.uint16(csc_in_bias_0_val) << AIPP4_OFFSET_LIST[4])
        aipp4_register |= np.uint64(np.uint16(csc_in_bias_1_val) << AIPP4_OFFSET_LIST[5])
        aipp4_register |= np.uint64(np.uint16(csc_in_bias_2_val) << AIPP4_OFFSET_LIST[6])
    else:
        aipp4_register = 0

    context.model.write_spr('AIPP_SPR_4', aipp4_register)


def set_spr_aipp5(context, params_val):
    """
    set aipp5 spr
    """
    aipp5_register = params_val.get('dtc_pixel_mean_ch0_val', DEF_VALUE)
    aipp5_register |= params_val.get('dtc_pixel_mean_ch1_val', DEF_VALUE) << AIPP5_OFFSET_LIST[1]
    aipp5_register |= params_val.get('dtc_pixel_mean_ch2_val', DEF_VALUE) << AIPP5_OFFSET_LIST[2]
    aipp5_register |= params_val.get('dtc_pixel_mean_ch3_val', DEF_VALUE) << AIPP5_OFFSET_LIST[3]

    context.model.write_spr('AIPP_SPR_5', aipp5_register)


def set_spr_aipp6(context, params_val):
    """
    set aipp6 spr
    """
    aipp6_register = params_val.get('dtc_pixel_min_ch0_val', DEF_VALUE)
    aipp6_register |= params_val.get('dtc_pixel_min_ch1_val', DEF_VALUE) << AIPP6_OFFSET_LIST[1]
    aipp6_register |= params_val.get('dtc_pixel_min_ch2_val', DEF_VALUE) << AIPP6_OFFSET_LIST[2]
    aipp6_register |= params_val.get('dtc_pixel_min_ch3_val', DEF_VALUE) << AIPP6_OFFSET_LIST[3]

    context.model.write_spr('AIPP_SPR_6', aipp6_register)


def set_spr_aipp7(context, params_val):
    """
    set aipp7 spr
    """
    dtc_variance_val = float16format2uint16(AIPP_INIT_FLOAT_VALUE_ONE)
    aipp7_register = params_val.get('dtc_pixel_variance_ch0_val', dtc_variance_val)
    aipp7_register |= params_val.get('dtc_pixel_variance_ch1_val', dtc_variance_val) << AIPP7_OFFSET_LIST[1]
    aipp7_register |= params_val.get('dtc_pixel_variance_ch2_val', dtc_variance_val) << AIPP7_OFFSET_LIST[2]
    aipp7_register |= params_val.get('dtc_pixel_variance_ch3_val', dtc_variance_val) << AIPP7_OFFSET_LIST[3]

    context.model.write_spr('AIPP_SPR_7', aipp7_register)


def set_spr_aipp8(context, params_val):
    """
    set aipp8 spr
    """

    aipp8_register = params_val.get('filling_hblank_ch1_val', DEF_VALUE)
    aipp8_register |= params_val.get('filling_hblank_ch1_val', DEF_VALUE) << AIPP8_OFFSET_LIST[1]
    aipp8_register |= params_val.get('filling_hblank_ch2_val', DEF_VALUE) << AIPP8_OFFSET_LIST[2]
    aipp8_register |= params_val.get('filling_hblank_ch3_val', DEF_VALUE) << AIPP8_OFFSET_LIST[3]

    context.model.write_spr('AIPP_SPR_8', aipp8_register)


def set_spr_aipp9(context, params_val):
    """
    set aipp9 spr
    """
    aipp9_register = params_val.get('cpadding_spr_val', DEF_VALUE)
    aipp9_register |= params_val.get('rb_swap_val', DEF_VALUE) << AIPP9_OFFSET_LIST[1]
    aipp9_register |= params_val.get('uv_swap_val', DEF_VALUE) << AIPP9_OFFSET_LIST[2]
    aipp9_register |= params_val.get('ax_swap_val', DEF_VALUE) << AIPP9_OFFSET_LIST[3]
    aipp9_register |= params_val.get('input_format_val', DEF_VALUE) << AIPP9_OFFSET_LIST[4]
    aipp9_register |= params_val.get('single_line_mode_val', DEF_VALUE) << AIPP9_OFFSET_LIST[5]
    aipp9_register |= params_val.get('horizontal_flip_enable_val', DEF_VALUE) << AIPP9_OFFSET_LIST[6]
    aipp9_register |= params_val.get('vertical_flip_enable_val', DEF_VALUE) << AIPP9_OFFSET_LIST[7]
    aipp9_register |= params_val.get('area_pad_mode_val', DEF_VALUE) << AIPP9_OFFSET_LIST[8]
    aipp9_register |= params_val.get('no_padding_val', DEF_VALUE) << AIPP9_OFFSET_LIST[9]
    aipp9_register |= params_val.get('raw_to_f16_n_val', DEF_VALUE) << AIPP9_OFFSET_LIST[10]
    aipp9_register |= params_val.get('dtc_mean_type_val', DEF_VALUE) << AIPP9_OFFSET_LIST[11]
    aipp9_register |= params_val.get('raw_image_channel_val', DEF_VALUE) << AIPP9_OFFSET_LIST[12]
    aipp9_register |= params_val.get('start_channel_number', DEF_VALUE) << AIPP9_OFFSET_LIST[13]
    aipp9_register |= params_val.get('padd_4channels_val', DEF_VALUE) << AIPP9_OFFSET_LIST[14]
    aipp9_register |= params_val.get('sfr_dtc_pixel_mean_ch2_val', DEF_VALUE) << AIPP9_OFFSET_LIST[15]
    aipp9_register |= params_val.get('sfr_dtc_pixel_mean_ch3_val', DEF_VALUE) << AIPP9_OFFSET_LIST[16]

    context.model.write_spr('AIPP_SPR_9', aipp9_register)


def set_spr_aipp10(context, params_val):
    """
    set aipp10 spr
    """
    aipp10_register = params_val.get('dst_stride_pixel_val', DEF_VALUE) << AIPP10_OFFSET_LIST[0]

    context.model.write_spr('AIPP_SPR_10', aipp10_register)


def set_spr_aipp11(context, params_val):
    """
    set aipp11 spr
    """

    aipp11_register = params_val.get('pre_botton_clip_number_val', DEF_VALUE) << AIPP11_OFFSET_LIST[0]
    aipp11_register |= params_val.get('pre_top_clip_number_val', DEF_VALUE) << AIPP11_OFFSET_LIST[1]

    context.model.write_spr('AIPP_SPR_11', aipp11_register)


def set_spr_aipp12(context, params_val):
    """
    set aipp12 spr
    """
    aipp12_register = params_val.get('spr_scf_vertical_size_val', DEF_VALUE) << AIPP12_OFFSET_LIST[0]
    aipp12_register |= params_val.get('spr_scf_horizontal_size_val', DEF_VALUE) << AIPP12_OFFSET_LIST[1]

    context.model.write_spr('AIPP_SPR_12', aipp12_register)


def set_spr_aipp13(context, params_val):
    """
    set aipp13 spr
    """
    aipp13_register = params_val.get('scf_enable', DEF_VALUE) << AIPP13_OFFSET_LIST[0]
    aipp13_register |= params_val.get('scf_enable', DEF_VALUE) << AIPP13_OFFSET_LIST[1]
    aipp13_register |= params_val.get('filter_order_val', DEF_VALUE) << AIPP13_OFFSET_LIST[2]
    aipp13_register |= params_val.get('scaling_mode_val', DEF_VALUE) << AIPP13_OFFSET_LIST[3]
    aipp13_register |= params_val.get('scaling_mode_val', DEF_VALUE) << AIPP13_OFFSET_LIST[4]
    aipp13_register |= params_val.get('scaling_mode_val', DEF_VALUE) << AIPP13_OFFSET_LIST[5]
    aipp13_register |= params_val.get('scaling_mode_val', DEF_VALUE) << AIPP13_OFFSET_LIST[6]

    context.model.write_spr('AIPP_SPR_13', aipp13_register)


def set_spr_aipp15(context, params_val):
    """
    set aippp15 spr
    """
    aipp15_register = params_val.get('init_vert_val', DEF_VALUE) << AIPP15_OFFSET_LIST[0]
    aipp15_register |= params_val.get('init_hori_val', DEF_VALUE) << AIPP15_OFFSET_LIST[1]

    context.model.write_spr('AIPP_SPR_15', aipp15_register)


def set_spr_aipp16(context, params_val):
    """
    set aipp16 spr
    """
    aipp16_register = params_val.get('vert_scaling_val', DEF_VALUE) << AIPP16_OFFSET_LIST[0]
    aipp16_register |= params_val.get('hori_scaling_val', DEF_VALUE) << AIPP16_OFFSET_LIST[1]

    context.model.write_spr('AIPP_SPR_16', aipp16_register)


def set_spr_aipp17(context, params_val):
    """
    set aipp17 spr
    """
    aipp17_register = params_val.get('post_botton_clip_number_val', DEF_VALUE) << AIPP17_OFFSET_LIST[0]
    aipp17_register |= params_val.get('post_top_clip_number_val', DEF_VALUE) << AIPP17_OFFSET_LIST[1]
    aipp17_register |= params_val.get('post_right_clip_number_val', DEF_VALUE) << AIPP17_OFFSET_LIST[2]
    aipp17_register |= params_val.get('post_left_clip_number_val', DEF_VALUE) << AIPP17_OFFSET_LIST[3]
    aipp17_register |= params_val.get('post_clip_enable', DEF_VALUE) << AIPP17_OFFSET_LIST[4]

    context.model.write_spr('AIPP_SPR_17', aipp17_register)


def set_gpr_x_s(context, temp_env, params_val):
    """
    set gpr xs
    """
    xs_idx = temp_env.alloc_register()
    x_s = params_val.get('dst_horizontal_size_val', DEF_VALUE) - 1
    x_s |= params_val.get('dst_vertical_size_val', DEF_VALUE) - 1 << AIPP_XS_OFFSET_LIST[1]
    x_s |= params_val.get('crop_horizontal_start_val', DEF_VALUE) << AIPP_XS_OFFSET_LIST[2]
    x_s |= params_val.get('crop_vertical_start_val', DEF_VALUE) << AIPP_XS_OFFSET_LIST[3]

    context.model.write_gpr(xs_idx, x_s)
    return xs_idx


def set_gpr_x_t(context, temp_env, params_val):
    """
    set gpr xs
    """
    xt_idx = temp_env.alloc_register()
    x_t = params_val.get('src_horizontal_size_val', DEF_VALUE) - 1
    x_t |= params_val.get('top_pad_rows_val', DEF_VALUE) << AIPP_XT_OFFSET_LIST[1]
    x_t |= params_val.get('botton_pad_rows_val', DEF_VALUE) << AIPP_XT_OFFSET_LIST[2]
    x_t |= params_val.get('left_pad_cols_val', DEF_VALUE) << AIPP_XT_OFFSET_LIST[3]
    x_t |= params_val.get('right_pad_cols_val', DEF_VALUE) << AIPP_XT_OFFSET_LIST[4]
    x_t |= params_val.get('sid_val', DEF_VALUE) << AIPP_XT_OFFSET_LIST[5]

    context.model.write_gpr(xt_idx, x_t)
    return xt_idx


class LoadImage(STMT):
    """
    LoadImage instruction
    """

    def __init__(self, source_info, load_image_obj):
        super(LoadImage, self).__init__(source_info, load_image_obj.tik_instance.context.tik_debugger)
        self.obj = load_image_obj
        self.flip_mode = load_image_obj.flip_mode

    def check_input_format_and_function(self, context, params_val):
        """
        check input format
        """
        aipp_set_enable_bit(params_val)

        params_val['input_format_val'] = context.evaluate_expr(self.obj.input_format)

        check_dict_and_not_none(self.obj.src_info, 'src_info')
        src_horizontal_size = self.obj.src_info.get('src_horizontal_size')
        src_vertical_size = self.obj.src_info.get('src_vertical_size')
        params_val['src_horizontal_size_val'] = context.evaluate_expr(src_horizontal_size)
        params_val['src_vertical_size_val'] = context.evaluate_expr(src_vertical_size)

        params_val['input_format_val'] = context.evaluate_expr(self.obj.input_format)

        check_src_info(params_val)

        functions = AIPP_INPUT_VERSON_AND_FUNCTION.get(
            params_val.get('arch_version')).get(params_val.get('input_format_val'))

        if functions is None:
            TikCheckUtil.raise_error(
                "arch_version not support input_format: {}".format(params_val.get('input_format_val')))

        check_src_overflow(self.obj.src0, self.obj.src1, params_val)

        cal_crop_info(self.obj.crop_info, params_val, context)
        cal_swap_info(context, functions, self.obj.swap_list, params_val)
        cal_csc_info(context, functions, self.obj.csc_info, params_val)
        cal_dtc_info(context, functions, self.obj.dtc_info, params_val)
        cal_area_pad_info(context, functions, self.obj.area_pad_info, params_val)
        cal_cpad_info(context, self.obj.channel_pad_info, params_val)

        sid_val = context.evaluate_expr(self.obj.sid)
        params_val['sid_val'] = sid_val

        if TikSocManager.is_hisi_soc():
            cal_pre_clip_info(context, functions, self.obj.pre_clip_info, params_val)
            cal_scf_info(context, functions, self.obj.scf_info, params_val)
            cal_post_clip_info(context, functions, self.obj.post_clip_info, params_val)
            cal_stretch_info(context, functions, self.obj.stretch_info, params_val)
            cal_flip_info(context, functions, self.flip_mode, params_val)
            sid_val_range = [0, 10]
            TikCheckUtil.check_in_range_by_dtype(sid_val, msg='sid value error, [{}, {}], input: {}'.format(
                sid_val_range[0], sid_val_range[1], sid_val), var_range=sid_val_range)

        if is_610_610b_310p_aic():
            cal_raw_info(context, functions, self.obj.raw_info, params_val)

    def eval_(self, context):
        """
        run the instruction

        Parameters
        ----------
        context : the stack context

        Returns
        -------
        None
        """
        temp_env = TempEnv()
        params_val = {}

        copy_tensor_to_model(context, temp_env, self.obj.src0, ALIGN_SRC_EVEN)
        if self.obj.src1 is not None:
            copy_tensor_to_model(context, temp_env, self.obj.src1, ALIGN_SRC_EVEN)
        xd_idx, dst_addr, dst_alloc_size, dst_ptr = copy_tensor_to_model(
            context, temp_env, self.obj.dst, ALIGNED_ADDR)

        params_val['dst_type'] = self.obj.dst.dtype
        params_val['arch_version'] = get_soc_name() + get_soc_core_type()
        params_val['function_switch_val'] = context.evaluate_expr(self.obj.function_switch)

        self.check_input_format_and_function(context, params_val)
        set_spr_aipp0(context, params_val)
        set_spr_aipp1(context, params_val)
        set_spr_aipp2(context, params_val)
        set_spr_aipp3(context, params_val)
        set_spr_aipp4(context, params_val)
        set_spr_aipp5(context, params_val)
        set_spr_aipp6(context, params_val)
        set_spr_aipp7(context, params_val)
        set_spr_aipp8(context, params_val)
        set_spr_aipp9(context, params_val)

        if TikSocManager.is_hisi_soc():
            set_spr_aipp10(context, params_val)
            set_spr_aipp11(context, params_val)
            set_spr_aipp12(context, params_val)
            set_spr_aipp13(context, params_val)
            set_spr_aipp15(context, params_val)
            set_spr_aipp16(context, params_val)
            set_spr_aipp17(context, params_val)

        param = context.encoder.new_param()

        self._check_dst_buffer(params_val)

        param.xd = xd_idx
        param.xs = set_gpr_x_s(context, temp_env, params_val)
        param.xt = set_gpr_x_t(context, temp_env, params_val)
        _type_map = {
            "int8": 0b00,
            "uint8": 0b01,
            "float16": 0b10
        }
        param.type = _type_map.get(self.obj.dst.dtype)

        instr = context.encoder.gen_dma_ld_img(param)
        context.model.step(instr)

        context.model.read_memory(dst_addr, self.obj.dst.scope, dst_ptr, dst_alloc_size)

    def _check_dst_buffer(self, params_val):
        """
        check dst buffer
        """
        channels = 32 // DTYPE_SIZE[self.obj.dst.dtype]

        input_format_val = params_val.get('input_format_val', DEF_VALUE)
        channel_pad_mode_val = params_val.get('channel_pad_mode_val', DEF_VALUE)
        dst_stride_pixel_val = params_val.get('dst_stride_pixel_val', DEF_VALUE)
        scf_horizontal_size_val = params_val.get('scf_horizontal_size_val', DEF_VALUE)
        raw_enable_val = params_val.get('raw_enable', DEF_VALUE)
        raw_image_channel_val = params_val.get('raw_image_channel_val', DEF_VALUE)
        post_right_clip_number_val = params_val.get('post_right_clip_number_val', DEF_VALUE)

        pad_cols_val_sum = params_val.get('left_pad_size_val', DEF_VALUE) + \
                           params_val.get('right_pad_cols_val', DEF_VALUE)
        pad_rows_val_sum = params_val.get('top_pad_rows_val', DEF_VALUE) + \
                           params_val.get('botton_pad_rows_val', DEF_VALUE)

        scf_val_sub = params_val.get('scf_vertical_size_val', DEF_VALUE) - \
                      params_val.get('post_botton_clip_number_val', DEF_VALUE) - \
                      params_val.get('post_top_clip_number_val', DEF_VALUE)

        if channel_pad_mode_val == 1 and TikSocManager.is_hisi_soc():
            channels = AIPP_INPUT_TYPE_SWAP_ALIGN.get(input_format_val).get('channels')

        if channel_pad_mode_val == 2 and (TikSocManager.is_hisi_soc() or is_610_610b_310p_aic()):
            channels = 4

        if TikSocManager.is_hisi_soc():
            if dst_stride_pixel_val == 0:
                extent = (scf_horizontal_size_val - post_right_clip_number_val -
                          params_val.get('post_left_clip_number_val', DEF_VALUE) + pad_cols_val_sum) *\
                         (scf_val_sub + pad_rows_val_sum) * channels
            else:
                extent = dst_stride_pixel_val * (scf_val_sub + pad_rows_val_sum) * channels
        else:
            extent = (params_val.get('dst_horizontal_size_val', DEF_VALUE) + pad_cols_val_sum) *\
                     (params_val.get('dst_vertical_size_val', DEF_VALUE) + pad_rows_val_sum) * channels
            if is_610_610b_310p_aic() and input_format_val in [RAW16, RAW24] and raw_enable_val == 1\
                    and raw_image_channel_val == 0:
                extent = extent // 4

        extent = extent * DTYPE_SIZE[self.obj.dst.dtype]
        TikCheckUtil.check_ge(self.obj.dst.buffer_size, extent, 'dst is less than result, extent: {}'.format(extent))
        TikCheckUtil.check_equality(extent % 32, 0, "output should be 32 align, extent: {}".format(extent))
