#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     new_decorators.py
DESC:     provide params
CREATED:  2019-04-18 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
from functools import wraps
from tbe.tik.debug.tik_vector_ops_debug.tik_scatter_gather_debug_ import VGather
from tbe.tik.debug.tik_vector_ops_debug.tik_scatter_gather_debug_ import VGatherb
from tbe.tik.debug.tik_vector_ops_debug.tik_scatter_gather_debug_ import VScatter
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_debug_ import NewVectorVectorTemplate
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_debug_ import NewVectorOnlyTemplate
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_debug_ import V4DTRANS
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_fills_debug_ import NewVectorScalarEltwise
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_debug_ import NewVectorScalarTemplate
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_fills_debug_ import VBrcb
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_fills_debug_ import VPadding
from tbe.tik.debug import get_caller_context
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import NewVcmp
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import NewVcmpv
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import NewVcmpvs
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import Vsel
from tbe.tik.debug.tik_vector_ops_debug.tik_whole_reduce_debug_ import VecReduce
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_reduce_debug_ import VecAllReduce
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_reduce_debug_ import VReduceAdd
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import VReduce
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_compare_debug_ import VconvNew
from tbe.tik.common.common_util import is_scalar
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.debug.tik_vector_ops_debug.tik_vector_identify_debug_ import IdentifyDebug
from tbe.tik.debug.object_detect import VMS4
from tbe.tik.debug.object_detect import VEXTRACT
from tbe.tik.debug.object_detect import VCONCAT
from tbe.tik.debug.object_detect import RpnCor
from tbe.tik.debug.object_detect import VBS32
from tbe.tik.debug.object_detect import VMS4V2


def vec_reduce_add_decorator(func):
    """
    bind this decorator with vec_reduce_add instructions
    """

    @wraps(func)
    def wrapper(op_obj):
        if not op_obj.tik_instance.debug_disabled:
            stmt = VReduceAdd(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vec_all_reduce_decorator():
    """
    bind this decorator with vec_reduce_max, vec_reduce_min

    Parameters
    ----------

    Returns
    -------
    function
    """

    def reduce_decorator(func):
        @wraps(func)
        def wrapper(op_obj):
            """
            bind this decorator with vec_all_reduce
            """
            if not op_obj.tik_instance.debug_disabled:
                ctx = op_obj.tik_instance.context
                vec_reduce = VecAllReduce(get_caller_context(), op_obj)
                ctx.curr_scope().add_stmt(vec_reduce)
            return func(op_obj)

        return wrapper

    return reduce_decorator


def vec_multi_elewise_func_dec_new(func):
    """
    bind this decorator with vector_binary_elewise_func

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vector_binary_elewise_func
        """
        if not op_obj.tik_instance.debug_disabled:
            vector_vector_ = NewVectorVectorTemplate(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(vector_vector_)
        return func(op_obj)

    return wrapper


def vec_single_elewise_func_dec_new(func):
    """
    bind this decorator with vector_single_elewise_func

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vector_single_elewise_func
        """
        if not op_obj.tik_instance.debug_disabled:
            vector_only_ = NewVectorOnlyTemplate(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(vector_only_)
        return func(op_obj)

    return wrapper


def vec_scalar_single_elewise_dec_new(func):
    """
    bind this decorator with vector_scalar_single_elewise

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vector_scalar_single_elewise
        """
        if not op_obj.tik_instance.debug_disabled:
            vector_scalar_ = NewVectorScalarTemplate(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(vector_scalar_)
        return func(op_obj)

    return wrapper


def vec_scalar_elewise_func_dec_new(func):
    """
    bind this decorator with DupOpApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with DupOpApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = NewVectorScalarEltwise(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vpadding_decorator(func):
    """
    bind this decorator with vpadding instructions

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        transform data between chw and hwc
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VPadding(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vcmp_decorator_new(func):
    """
    bind this decorator with VcmpApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with VcmpApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = NewVcmp(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vcmpv_decorator_new(func):
    """
    bind this decorator with VcmpvApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with VcmpvApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = NewVcmpv(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vcmpvs_decorator_new(func):
    """
    bind this decorator with VcmpvsApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with VcmpvsApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = NewVcmpvs(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vec_reduce_decorator(func):
    """
    bind this decorator with vec_reduce

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vec_reduce
        """
        if not op_obj.tik_instance.debug_disabled:
            ctx = op_obj.tik_instance.context
            if op_obj.maxmin_cnt_index is not None:
                # maxmin_cnt_index may have 1 or 3 elements
                ctx = _ctx_set_scalar(op_obj, ctx)
            vec_reduce = VecReduce(get_caller_context(), op_obj)
            ctx.curr_scope().add_stmt(vec_reduce)
        return func(op_obj)

    return wrapper


def vsel_decorator_new(func):
    """
    bind this decorator with VselApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with VselApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = Vsel(
                get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vec_reduce_group_decorator(func):
    """
    bind this decorator with vec_reduce_wo_order

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vec_reduce_wo_order
        """
        # modified args' name for static changes
        if not op_obj.tik_instance.debug_disabled:
            vec_reduce = VecReduce(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(vec_reduce)
        return func(op_obj)

    return wrapper


def vec_reduce_wo_order_decorator(func):
    """
    bind this decorator with vec_reduce_wo_order

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vec_reduce_wo_order
        """
        if not op_obj.tik_instance.debug_disabled:
            vec_reduce = VecReduce(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(vec_reduce)
        return func(op_obj)

    return wrapper


def _ctx_set_scalar(op_obj, ctx):
    for mci_tmp in op_obj.maxmin_cnt_index:
        for var in mci_tmp.debug_var:
            ctx.bind_var(var)
        ctx.set_scalar_var_mapping(mci_tmp.reg_buffer, mci_tmp.debug_var)
    return ctx


def vbcb_decorator(func):
    """
    bind this decorator with vbrcb instructions
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vbrcb_decorator
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VBrcb(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)
    return wrapper


def vadddeqrelu_decorator(func):
    """
    bind this decorator with vaddeqrelu

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vaddeqrelu
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = NewVectorVectorTemplate(get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger,
                                           deqscale=op_obj.deqscale)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vreduce_decorator(func):
    """
    bind this decorator with VselApi's gen code

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """

    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with VcmpvsApi's gen code
        """
        if not op_obj.tik_instance.debug_disabled:
            if op_obj.rsvd_scalar is not None:
                if not is_scalar(op_obj.rsvd_scalar):
                    TikCheckUtil.raise_error(
                        "rsvd_scalar should be None or Scalar, input type of "
                        "rsvd_scalar: {}".format(type(op_obj.rsvd_scalar)))
                debug_var = op_obj.rsvd_scalar.debug_var
                offset = op_obj.tik_instance.context.evaluate_expr(op_obj.rsvd_scalar.offset)
                bind_var = debug_var[offset]
            else:
                debug_var = None
                bind_var = None
            stmt = VReduce(get_caller_context(), op_obj, bind_var)
            if debug_var is not None:
                op_obj.tik_instance.context.bind_var(bind_var)
                op_obj.tik_instance.context.set_scalar_var_mapping(op_obj.rsvd_scalar.reg_buffer, debug_var)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vconv_decorator_new(func):
    """
    bind this decorator with vaddeqrelu

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vaddeqrelu
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VconvNew(get_caller_context(), op_obj, op_obj.tik_instance.context.tik_debugger)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vscatter_decorator(func):
    """
    bind this decorator with vscatter instructions
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vscatter_decorator
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VScatter(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)
    return wrapper


def vgather_decorator(func):
    """
    bind this decorator with vgather instructions
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vgather_decorator
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VGather(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)
    return wrapper


def identify_decorator(func):
    """
    bind this decorator with vaddeqrelu

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vaddeqrelu
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = IdentifyDebug(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)

    return wrapper


def vgatherb_decorator(func):
    """
    bind this decorator with vgatherb instructions
    """
    @wraps(func)
    def wrapper(op_obj):
        """
        bind this decorator with vgatherb_decorator
        """
        if not op_obj.tik_instance.debug_disabled:
            stmt = VGatherb(get_caller_context(), op_obj)
            op_obj.tik_instance.context.curr_scope().add_stmt(stmt)
        return func(op_obj)
    return wrapper


def vmsv2_decarator(func):
    """
    bind this decorator with vms v2

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with vms v2
        """
        if not tik_instance.debug_disabled:
            vmsv2_stmt = VMS4V2(get_caller_context(), op_obj,
                                tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vmsv2_stmt)
        return func(tik_instance, op_obj)

    return wrapper


def vextract_decorator(func):
    """
    bind this decorator with vextract

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with vextract
        """
        if not tik_instance.debug_disabled:
            vextract_stmt = VEXTRACT(get_caller_context(), op_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vextract_stmt)
        return func(tik_instance, op_obj)

    return wrapper


def vconcate_decorator(func):
    """
    bind this decorator with

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with
        """
        if not tik_instance.debug_disabled:
            vconcate_stmt = VCONCAT(get_caller_context(), op_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vconcate_stmt)
        return func(tik_instance, op_obj)

    return wrapper


def rpn_cor_decorator(func):
    """
    bind this decorator with rpn_cor

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, rpn_cor_obj):
        """
        bind this decorator with rpn_cor
        """
        if not tik_instance.debug_disabled:
            rpn_cor_stmt = RpnCor(get_caller_context(), rpn_cor_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(rpn_cor_stmt)
        return func(tik_instance, rpn_cor_obj)

    return wrapper


def vms_decarator(func):
    """
    bind this decorator with vms

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with vms
        """
        if not tik_instance.debug_disabled:
            vms_stmt = VMS4(get_caller_context(), op_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vms_stmt)
        return func(tik_instance, op_obj)

    return wrapper


def vbs32_decorator(func):
    """
    bind this decorator with vbs32

    Parameters
    ----------
    func : the decorated function

    Returns
    -------
    function
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        bind this decorator with vbs32
        """
        if not tik_instance.debug_disabled:
            vbs32_stmt = VBS32(get_caller_context(), op_obj,
                               tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(vbs32_stmt)
        return func(tik_instance, op_obj)

    return wrapper


def v4dtrans_decorator(func):
    """
    bind this decorator with v4dtrans instructions
    """
    @wraps(func)
    def wrapper(tik_instance, op_obj):
        """
        transform data between chw and hwc

        Parameters
        ----------
        tik_instance: an instance of tik
        chw2hwc : bool, True - chw->hwc; False - hwc->chw
        dst : destination operator
        src : source operation
        m_len : H*W direction dimension
        channels: size of C

        Returns
        -------
        None
        """
        if not tik_instance.debug_disabled:
            stmt = V4DTRANS(get_caller_context(), op_obj, tik_instance.context.tik_debugger)
            tik_instance.context.curr_scope().add_stmt(stmt)
        return func(tik_instance, op_obj)

    return wrapper
