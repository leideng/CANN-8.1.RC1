#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_cmp_api.py
DESC:     make a module
CREATED:  2020-3-16 21:12:13
MODIFIED: 2020-12-7 19:17:00
"""
from collections import namedtuple

from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VcmpvOpApi


class TikCompareApiv1:
    """
    Provide compare api for open
    """
    default_blk_stride = 1
    vcmpv_api = namedtuple('VcmpvApi', ["name", "dst", "src0", "src1", "repeat_times", "src0_blk_stride",
                                        "src1_blk_stride", "src0_rep_stride", "src1_rep_stride"])

    def vec_cmpv_lt(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_lt', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_lt_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_lt_obj.run_all()

    def vec_cmpv_gt(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_gt', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_gt_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_gt_obj.run_all()

    def vec_cmpv_ge(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_ge', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_ge_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_ge_obj.run_all()

    def vec_cmpv_eq(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_eq', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_eq_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_eq_obj.run_all()

    def vec_cmpv_ne(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_ne', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_ne_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_ne_obj.run_all()

    def vec_cmpv_le(self, dst, src0, src1, repeat_times, src0_rep_stride, src1_rep_stride):
        """
        Performs element-wise comparison to generate a 1-bit result
        Parameters
        ----------
        dst: Destination operand, which is the start element of the tensor.
        src0: Source operand 0, which is the start element of the tensor.
        src1: Source operand 1, which is the start element of the tensor.
        repeat_times: Number of iteration repeats.
        src0_rep_stride: Block-to-block stride between adjacent iterations of source operand 0.
        src1_rep_stride: Block-to-block stride between adjacent iterations of source operand 1.

        Returns
        -------
        no return
        """
        vcmpv_api = TikCompareApiv1.vcmpv_api('vec_cmpv_le', dst, src0, src1, repeat_times, self.default_blk_stride,
                                              self.default_blk_stride, src0_rep_stride, src1_rep_stride)
        vcmpv_le_obj = VcmpvOpApi(self, vcmpv_api)
        vcmpv_le_obj.run_all()
