#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     conv2d_c04.py
DESC:     provide conv2d api for c0=4 inner class
CREATED:  2022-3-20 21:12:13
MODIFIED: 2022-4-11 12:17:00
"""

from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_params import C1_C04
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.api.cube.conv2d import Conv2dImpl
from tbe.tik.api.cube.conv2d_c04_gen_code import CubeModeTilingC04
from tbe.tik.api.cube.conv2d_c04_tiling import gen_best_tiling_c04


class Conv2dC04Impl(Conv2dImpl, CubeModeTilingC04):
    """
    implement class of conv2d with C0=4
    """

    @staticmethod
    def _check_c0_value(c0, dtype, input_param_name):
        if TikSocManager.is_910b_soc() or TikSocManager.is_310b_610l_soc():
            Conv2dImpl._check_c0_value(c0, dtype, input_param_name)
        else:
            TikCheckUtil.check_equality(
                c0, 4, "%s C0 dimension should be 4 when dtype is %s" % (input_param_name, dtype))

    @staticmethod
    def _check_channel_value(c, dtype, input_param_name):
        if TikSocManager.is_910b_soc() or TikSocManager.is_310b_610l_soc():
            Conv2dImpl._check_channel_value(c, dtype, input_param_name)
        else:
            TikCheckUtil.check_equality(c, C1_C04, msg="When input C0=4, C1 can only be 1")

    def execute(self, conv2d_api):
        """
        execute of conv2d to get best tiling and gen code
        Parameters
        ----------
        conv2d_api: contains var
        - dst:  the dst tensor in L0C
        - feature_map:  the Feature map tensor in L0A.
        - weight: the filter tensor in L0B.
        - fm_shape: the feature map shape
        - kernel_shape:  the filter shape
        - stride: conv2d stride data
        - pad: conv2d padding values
        - dilation: conv2d dilations
        - pad_value: padding value
        - init_l1out: whether init L0C result
        """
        self.check_input_params(conv2d_api)

        # fm_shape: fm_c1, fm_h, fm_w, fm_c0
        # kernel_shape:k_c1, k_h, k_w, k_cout, k_c0
        # create new object for save feature map info
        fm_desc = self.get_fm_desc(conv2d_api)

        # create new object for save filter info
        filter_desc = self._get_filter_desc(conv2d_api.kernel_shape, conv2d_api.weight.dtype)

        # find the best tiling
        tiling = gen_best_tiling_c04(fm_desc, filter_desc, self.tik_instance, conv2d_api.bias)
        self.gen_code_by_tiling(conv2d_api, fm_desc, tiling)
