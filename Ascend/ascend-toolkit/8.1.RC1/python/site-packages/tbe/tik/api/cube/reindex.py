#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     reindex.py
DESC:     matmul function
CREATED:  2020-4-23 21:12:13
MODIFIED: 2020-12-7 19:17:00
"""
from tbe.tik.api.tik_tensor import Tensor
from tbe.tik.tik_lib.tik_expr_convert import type_convert


# @cond
class ReIndexProxy:
    """
    tensor help proxy class
    """
    def __init__(self, tensor, sub_dims):
        """
        init the ReIndexProxy class
        Parameter
        ---------
        tensor:  the tensor
        sub_dims:  the dim of tensor.
        """
        self.tensor = tensor
        self.dtype = tensor.dtype
        self.sub_dims = sub_dims
        self.tensor_shape = tensor.original_shape
        self.tensor_start_idx = [i.start for i in tensor.dimensions]

    def __getitem__(self, index):
        new_dims = []
        if index is None:
            for i in self.tensor_shape:
                new_dims.append(slice(0, i, 1))
        else:
            if isinstance(index, (tuple, list)):
                for idx in index:
                    start_ = type_convert(idx)
                    new_dims.append(slice(start_, start_ + 1, 1))
            else:
                start_ = type_convert(index)
                new_dims.append(slice(start_, start_ + 1, 1))
        new_strides = self.tensor.strides
        new_data = self.tensor.data
        for dim, stride in zip(new_dims, self.tensor.strides):
            new_data += stride * dim.start
        proxy_tensor = self.tensor._new_tensor(
            self.tensor.ir_generator, self.tensor.buffer, self.tensor.dtype,
            new_dims, new_strides, self.tensor.is_workspace,
            self.tensor.is_atomic_add, new_data,
            original_shape=self.tensor.original_shape,
            last_tensor=self.tensor, is_getitem=False,
            is_global_tensor=self.tensor.is_global_tensor, scope=self.tensor.tensor_scope)
        return proxy_tensor

    def flat_access(self, index):
        """
        flat access the tensor .
        Parameter
        ---------
        index: the index of tensor.

        Returns
        -------
        new tensor
        """
        start_ = type_convert(index)
        new_dims = [slice(start_, start_ + 1, 1)]
        flatten_stride = self.tensor.strides[-1]
        new_strides = [flatten_stride * new_dims[0].step]
        new_data = self.tensor.data + flatten_stride * new_dims[0].start
        proxy_tensor = Tensor(
            self.tensor.ir_generator, buffer_=self.tensor.buffer, dtype=self.tensor.dtype,
            dims=new_dims, stride=new_strides, is_workspace=self.tensor.is_workspace,
            is_atomic_add=self.tensor.is_atomic_add, data=new_data,
            original_shape=self.tensor.original_shape, last_tensor=self.tensor, is_getitem=False,
            is_global_tensor=self.tensor.is_global_tensor, scope=self.tensor.tensor_scope)
        return proxy_tensor
