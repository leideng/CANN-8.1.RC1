#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_ir_builder_util.py
DESC:     util for tik_ir_builder.
CREATED:  2021-12-09 18:53:42
MODIFIED: 2021-12-09 21:29:18
"""
from collections import namedtuple
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_params import MAX_BUFFER_NUM


_LAST_ELEMENT = -1

# block num min should greater than 0, less than 65536
_MIN_BLOCK_NUM = 1
_MAX_BLOCK_NUM = 65535

_DEFAULT_THREAD_BLOCK_NUM = 1
_MIN_NIDX = 3
_DEVICE_API = 0

# for type id value
_SERIAL_FOR_TYPE_ID = 0

# elif and else follow an if should less than 400
# because maximum recursion depth exceeded in comparison
_MAX_IFTHENELIF_DEEP = 400


_SUB_SYNC_WAIT = "pragma_multicore_subblock_sync_wait_before"
_SUB_SYNC_SET = "pragma_multicore_subblock_sync_set_before"
_ALL_SYNC_BEFORE = "pragma_multicore_all_block_sync_before"
_ALL_SYNC_AFTER = "pragma_multicore_all_block_sync_after"

ForRangeTuple = namedtuple("ForRangeTuple", ["begint", "endt", "name", "thread_num",
                                             "thread_type", "block_num", "dtype", "for_type"])
ForLoopTuple = namedtuple("ForLoopTuple", ["begin", "end", "bind_var", "block_nums",
                                           "source_info", "dtype", "tik_debugger"])


def set_for_params_min_extent(dtype, begin, extent):
    """
    begin and extent's dtype should be same with dtype of loop_var

    Parameters
    ----------
    dtype: str, data type of loop_var
    begin: for_loop params min
    extent: for_loop params extent

    Returns
    ---------
    begin: tvm const with dtype of loop_var
    extent: tvm const with dtype of loop_var
    """
    begin = Expr(begin, dtype).get()
    extent = Expr(extent, dtype).get()
    return begin, extent


def check_params_for_range(thread_num, block_num, thread_type, dtype, for_type):
    """
    check dtype, range of params

    Parameters
    ----------
    thread_num: int, how many thread to run for loop
    block_num: int, maximum is device aicore num
    thread_type: str, whole or partial
    dtype: str, The data type of iteration variable.
    for_type: str, The special tag on the for loop.

    Returns
    -------
    None
    """
    TikCheckUtil.check_type_match(
        thread_num, int, "thread_num(%s) should be int" % str(thread_num))
    TikCheckUtil.check_in_range_by_dtype(
        thread_num, msg="thread_num(%d) can only in (0, 1, 2, 3, 4)" % thread_num, var_range=[0, MAX_BUFFER_NUM])
    TikCheckUtil.check_type_match(
        thread_type, str, "thread_type(%s) should be str" % str(type(thread_type)))
    TikCheckUtil.check_type_match(
        dtype, str, "dtype(%s) should be str" % str(type(dtype)))
    TikCheckUtil.check_type_match(for_type, str, "for_type should be str")


def gen_ret_loop_var(loop_var, range_tuple, offset):
    """
    gen ret loop var

    Parameters
    ----------
    loop_var : loop str var
    range_tuple : parmas tuple of for_range
    offset : offset

    Returns
    -------
    ret_loop_var
    """
    ret_loop_var = loop_var
    # if begint is not 0, the loop var need to add offset
    if Expr(range_tuple.begint).eval_value() != 0:
        ret_loop_var = loop_var + offset
    return ret_loop_var
