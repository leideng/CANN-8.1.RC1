#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_whole_reduce_api.py
DESC:     provide reduce vector instructions
CREATED:  2021-11-3 09:55:42
MODIFIED: 2021-11-3 09:55:42
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_vector_api.tik_whole_reduce_api_ import WholeReduceOps
from tbe.tik.tik_lib.tik_vector_api.tik_whole_reduce_api_ import WholeReduceOpsNano
from tbe.tik.tik_lib.tik_vector_api.tik_whole_reduce_api_ import PairReduceOps
from tbe.tik.tik_lib.tik_vector_api.tik_whole_reduce_api_ import GroupReduceOps
from tbe.tik.tik_lib.tik_vector_api.tik_whole_reduce_api_ import GroupReduceOpsNano


class ReduceOpsApi(TikIRBuilder):
    """
    Provide whole-reduce group-reduce pair-reduce api
    """
    reduce_api = namedtuple('WholeReduceApi', ["name", "mask", "dst", "src", "repeat_times", "dst_rep_stride",
                                               "src_blk_stride", "src_rep_stride", "stride_unit", "order",
                                               "maxmin_cnt_index"])

    def vcadd(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride, stride_unit=0):
        """
        Sum for all element in a repeat.

        Parameters
        ----------
        mask: Effective operation on element, divided into two model: Continuous and bit by bit.
        dst: destination operator
        src: source operation
        repeat_times: Repeated iterations times
        dst_rep_stride: offset of dst operator in the same block between adjacent iterations
        src_blk_stride: offset of src operator between different block in one iteration
        src_rep_stride: offset of src operator in the same block between adjacent iterations
        stride_unit: address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        order = 0
        maxmin_cnt_index = None
        whole_reduce_api = ReduceOpsApi.reduce_api("vcadd", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order,
                                                   maxmin_cnt_index)
        if TikSocManager.is_nano_soc():
            vcadd_obj = WholeReduceOpsNano(self, whole_reduce_api)
        else:
            vcadd_obj = WholeReduceOps(self, whole_reduce_api)
        vcadd_obj.run_all()

    def vcmax(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride,
              stride_unit=0, index_low=False, max_cnt_index=None):
        """
        Get the max value and index for all element in a repeat.

        Parameters
        ----------
        mask: Effective operation on element, divided into two model: Continuous and bit by bit.
        dst: destination operator
        src: source operation
        repeat_times: Repeated iterations times
        dst_rep_stride: offset of dst operator in the same block between adjacent iterations
        src_blk_stride: offset of src operator between different block in one iteration
        src_rep_stride: offset of src operator in the same block between adjacent iterations
        stride_unit: address and offset unit both affect it. default = 0
        index_low: order
        max_cnt_index: cnt_index

        Returns
        -------
        None
        """
        if index_low:
            order = 1
        else:
            order = 0
        whole_reduce_api = ReduceOpsApi.reduce_api("vcmax", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order,
                                                   max_cnt_index)
        if TikSocManager.is_nano_soc():
            vcmax_obj = WholeReduceOpsNano(self, whole_reduce_api)
        else:
            vcmax_obj = WholeReduceOps(self, whole_reduce_api)
        vcmax_obj.run_all()

    def vcmin(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride,
              stride_unit=0, index_low=False, min_cnt_index=None):
        """
        Get the min value and index for all element in a repeat.

        Parameters
        ----------
        mask: Effective operation on element, divided into two model: Continuous and bit by bit.
        dst: destination operator
        src: source operation
        repeat_times: Repeated iterations times
        dst_rep_stride: offset of dst operator in the same block between adjacent iterations
        src_blk_stride: offset of src operator between different block in one iteration
        src_rep_stride: offset of src operator in the same block between adjacent iterations
        stride_unit: address and offset unit both affect it. default = 0
        index_low: order
        min_cnt_index: cnt_index

        Returns
        -------
        None
        """
        if index_low:
            order = 1
        else:
            order = 0
        whole_reduce_api = ReduceOpsApi.reduce_api("vcmin", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order,
                                                   min_cnt_index)
        if TikSocManager.is_nano_soc():
            vcmin_obj = WholeReduceOpsNano(self, whole_reduce_api)
        else:
            vcmin_obj = WholeReduceOps(self, whole_reduce_api)
        vcmin_obj.run_all()

    def vcgadd(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride, stride_unit=0):
        """
        Sum for all element in a block.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        src_blk_stride : offset of src operator between different block in one iteration
        src_rep_stride : offset of src operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        order = None
        maxmin_cnt_index = None
        group_reduce_api = ReduceOpsApi.reduce_api("vcgadd", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order, maxmin_cnt_index)
        if TikSocManager.is_nano_soc():
            vcgadd_obj = GroupReduceOpsNano(self, group_reduce_api)
        else:
            vcgadd_obj = GroupReduceOps(self, group_reduce_api)
        vcgadd_obj.run_all()

    def vcgmax(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride, stride_unit=0):
        """
        Get the max value and index for all element in a block.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        src_blk_stride : offset of src operator between different block in one iteration
        src_rep_stride : offset of src operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        order = None
        maxmin_cnt_index = None
        group_reduce_api = ReduceOpsApi.reduce_api("vcgmax", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order, maxmin_cnt_index)
        if TikSocManager.is_nano_soc():
            vcgmax_obj = GroupReduceOpsNano(self, group_reduce_api)
        else:
            vcgmax_obj = GroupReduceOps(self, group_reduce_api)
        vcgmax_obj.run_all()

    def vcgmin(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride, stride_unit=0):
        """
        Get the min value and index for all element in a block.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        src_blk_stride : offset of src operator between different block in one iteration
        src_rep_stride : offset of src operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        order = None
        maxmin_cnt_index = None
        group_reduce_api = ReduceOpsApi.reduce_api("vcgmin", mask, dst, src, repeat_times, dst_rep_stride,
                                                   src_blk_stride, src_rep_stride, stride_unit, order, maxmin_cnt_index)
        if TikSocManager.is_nano_soc():
            vcgmin_obj = GroupReduceOpsNano(self, group_reduce_api)
        else:
            vcgmin_obj = GroupReduceOps(self, group_reduce_api)
        vcgmin_obj.run_all()

    def vcpadd(self, mask, dst, src, repeat_times, dst_rep_stride, src_blk_stride, src_rep_stride, stride_unit=0):
        """
        do parity summation on elements in adjacent pair

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_rep_stride : offset of dst operator in the same block between adjacent iterations
        src_blk_stride : offset of src operator between different block in one iteration
        src_rep_stride : offset of src operator in the same block between adjacent iterations
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        order = None
        maxmin_cnt_index = None
        pair_reduce_api = ReduceOpsApi.reduce_api("vcpadd", mask, dst, src, repeat_times, dst_rep_stride,
                                                  src_blk_stride, src_rep_stride, stride_unit, order, maxmin_cnt_index)

        vcpadd_obj = PairReduceOps(self, pair_reduce_api)
        vcpadd_obj.run_all()
