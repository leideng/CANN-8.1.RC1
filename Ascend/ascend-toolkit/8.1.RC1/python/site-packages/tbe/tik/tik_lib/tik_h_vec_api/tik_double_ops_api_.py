#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_double_ops_api_.py
DESC:     double operations vector instructions for tik 1.5
CREATED:  2021-06-24 18:53:42
MODIFIED: 2021-06-24 19:17:00
"""

from collections import namedtuple
from tbe import tvm
from tbe.tik.tik_lib.tik_h_vec_api.common_params_check_ import check_double_ops_params
from tbe.tik.tik_lib.tik_h_vec_api.common_util_ import set_tik_version_1_5
from tbe.tik.debug.decorators_high_vec import double_ops_debug_for_high_api
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_h_vec_api.tik_h_vec_api_base_ import TikHVecApiBase
from tbe.tik.api.tik_tensor import Tensor
from tbe.tik.api.tik_scalar import Scalar


class TikDoubleOpsApi(TikHVecApiBase):
    """
    Double Operation Api
    """

    double_ops_api = namedtuple("DoubleOps", "dst src0 src1 api_name")

    def __init__(self):
        super(TikDoubleOpsApi, self).__init__()
        self.core_arch = None
        self.core_version = None
        self.ir_generator = self

    @set_tik_version_1_5()
    @double_ops_debug_for_high_api
    def double_ops_code_make(self, code_make_params):
        """
        code maker for double ops instruction
        """
        with self.new_scope():
            self.add_source_id()
            if isinstance(code_make_params.src0, Tensor) and isinstance(code_make_params.src1, Tensor):
                self.ir_generator.emit(tvm.tir.Evaluate(
                    tvm.call_cce_intrin("int32", code_make_params.api_name,
                                 code_make_params.dst.info_node, code_make_params.src0.info_node,
                                  code_make_params.src1.info_node)))
            elif isinstance(code_make_params.src0, Tensor) and\
                    isinstance(code_make_params.src1, (int, float, Scalar, Expr)):
                self.ir_generator.emit(tvm.tir.Evaluate(
                    tvm.call_cce_intrin("int32", code_make_params.api_name,
                                 code_make_params.dst.info_node, code_make_params.src0.info_node,
                                  Expr(code_make_params.src1, code_make_params.dst.dtype).get())))
            elif isinstance(code_make_params.src0, (int, float, Scalar, Expr)) and\
                    isinstance(code_make_params.src1, Tensor):
                self.ir_generator.emit(tvm.tir.Evaluate(
                    tvm.call_cce_intrin("int32", code_make_params.api_name,
                                 code_make_params.dst.info_node,
                                  Expr(code_make_params.src0, code_make_params.dst.dtype).get(),
                                  code_make_params.src1.info_node)))

    @source_info_decorator()
    def h_add(self, dst, src0, src1):
        """
        vector add for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_add"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_sub(self, dst, src0, src1):
        """
        vector sub for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_sub"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_mul(self, dst, src0, src1):
        """
        vector mul for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_mul"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_div(self, dst, src0, src1):
        """
        vector div for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_div"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_max(self, dst, src0, src1):
        """
        vector max for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_max"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_min(self, dst, src0, src1):
        """
        vector min for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_min"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_and(self, dst, src0, src1):
        """
        vector and for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_and"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)

    @source_info_decorator()
    def h_or(self, dst, src0, src1):
        """
        vector or for tik 1.5
        Parameters
        ----------
        dst: Tensor or Tensor slice
        src0: Imm, Scalar, Expr, Tensor or Tensor slice
        src1: Imm, Scalar, Expr, Tensor or Tensor slice

        Returns
        -------
        None
        """
        api_name = "h_or"
        double_ops_api_ins = TikDoubleOpsApi.double_ops_api(dst, src0, src1, api_name)
        check_double_ops_params(double_ops_api_ins)
        self.double_ops_code_make(double_ops_api_ins)
