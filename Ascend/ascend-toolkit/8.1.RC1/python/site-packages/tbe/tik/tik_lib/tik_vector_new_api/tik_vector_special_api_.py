#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_special_api_.py
DESC:     special vector instructions
CREATED:  2020-03-10 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
from tbe import tvm
from tbe.tvm import call_extern
from tbe.tvm import call_cce_pure_intrin

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_expr_convert import type_convert
from tbe.tik.debug.decorators_spec_v210 import vector_dhist_chist_decorator
from tbe.tik.debug.decorators_spec_v210 import vector_dhist_chist_v2_decorator


class TikSpecApiInner(TikIRBuilder):
    """
    Vector, Serialization, Spr Operation Api
    """
    def __init__(self):
        super(TikSpecApiInner, self).__init__()
        self.core_arch = None
        self.core_version = None

    @vector_dhist_chist_decorator
    def vector_vdhist_vchist_gen_code(self, hist_params):
        """
        vdhist vchist gen code
        Parameters
        ----------
        hist_params

        Returns
        -------

        """
        name = hist_params.name
        with self.new_scope():
            preg = self._gen_mask(hist_params.mask, hist_params.src.dtype)
            instr_name = name + "0"
            hist_instr_0 = call_extern(hist_params.dst0.dtype, instr_name, type_convert(hist_params.dst0),
                                       type_convert(hist_params.src), type_convert(preg))
            self.emit(hist_instr_0)
            instr_name = name + "1"
            hist_instr_1 = call_extern(hist_params.dst1.dtype, instr_name, type_convert(hist_params.dst1),
                                       type_convert(hist_params.src), type_convert(preg))
            self.emit(hist_instr_1)
            instr_name = name + "2"
            hist_instr_2 = call_extern(hist_params.dst2.dtype, instr_name, type_convert(hist_params.dst2),
                                       type_convert(hist_params.src), type_convert(preg))
            self.emit(hist_instr_2)
            instr_name = name + "3"
            hist_instr_3 = call_extern(hist_params.dst3.dtype, instr_name, type_convert(hist_params.dst3),
                                       type_convert(hist_params.src), type_convert(preg))
            self.emit(hist_instr_3)

    @vector_dhist_chist_v2_decorator
    def vector_vdhistv2_vchistv2_gen_code(self, histgram_args):
        """
        vdhistv2 gen code
        Parameters
        ----------
        histgram_args

        Returns
        -------

        """
        with self.new_scope():
            preg = self._gen_mask(histgram_args.mask, histgram_args.src.dtype)
            instr_name = histgram_args.name
            part_bin_expr = call_cce_pure_intrin(
                'handle', 'tvm_cce_string_print', tvm.tir.StringImm("Bin_N" + "0"))
            hist_instr_0 = call_extern(histgram_args.dst0.dtype, instr_name, type_convert(histgram_args.dst0),
                                       type_convert(histgram_args.src), type_convert(preg), part_bin_expr)
            self.emit(hist_instr_0)
            part_bin_expr = call_cce_pure_intrin(
                'handle', 'tvm_cce_string_print', tvm.tir.StringImm("Bin_N" + "1"))
            hist_instr_1 = call_extern(histgram_args.dst1.dtype, instr_name, type_convert(histgram_args.dst1),
                                       type_convert(histgram_args.src), type_convert(preg), part_bin_expr)
            self.emit(hist_instr_1)
