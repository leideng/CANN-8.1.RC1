#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_conv_api.py
DESC:     provide vector instructions
CREATED:  2019-08-12 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.common.common_nametuple_util import VconvApi
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VconvOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_compare_api_ import VconvOpApiNano
from tbe.tik.tik_lib.tik_vector_api.tik_vector_precision_conv_api_ import PrecisionConvOps


class VconvVectorApi(TikIRBuilder):
    """
    Vconv, Vcbd Vector Api
    """
    precision_conv_api = namedtuple('PrecisionConvApi', ["name", "mask", "dst", "src", "repeat_times", "dst_blk_stride",
                                                         "src_blk_stride", "dst_rep_stride", "src_rep_stride",
                                                         "stride_unit", "mask_mode"])

    def vcbd(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
             stride_unit=0, mask_mode="normal"):
        """
        Convert bit depth between integer types listed above.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : addr and offset unit both affect it. default = 0
        mask_mode: mode of mask, normal/counter, default value = normal

        Returns
        -------
        None
        """
        precision_conv_api = VconvVectorApi.precision_conv_api("vcbd", mask, dst, src, repeat_times,
                                                               dst_blk_stride,
                                                               src_blk_stride, dst_rep_stride, src_rep_stride,
                                                               stride_unit, mask_mode)

        vcbd_obj = PrecisionConvOps(self, precision_conv_api)
        vcbd_obj.run_all()

    def vconv(self, mask, round_mode, dst, src, repeat_times,
              dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
              deqscale=None, ldst_high_half=False, stride_unit=0, name="vconv", mask_o=None):
        """
        Accurate numerical conversion between integers and floating point numbers.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        round_mode : 'none', 'round', 'floor', 'ceil'/'ceilling', 'away-zero', 'to-zero', 'odd'
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        deqscale : default None
        ldst_high_half : ldst high half flag
        stride_unit : address and offset unit both affect it. default = 0
        name : name
        mask_o : mask

        Returns
        -------
        None
        """
        # check ldst_high_half
        vonv_api = VconvApi(mask, round_mode, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                            dst_rep_stride, src_rep_stride, deqscale, ldst_high_half, stride_unit, name, mask_o)
        if TikSocManager.is_nano_soc():
            vconv_obj = VconvOpApiNano(self, vonv_api)
        else:
            vconv_obj = VconvOpApi(self, vonv_api)
        vconv_obj.run_all()
