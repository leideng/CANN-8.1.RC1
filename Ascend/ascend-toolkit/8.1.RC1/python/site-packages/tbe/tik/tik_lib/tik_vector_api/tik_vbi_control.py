#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vbi_control.py
DESC:     provide vector instructions
CREATED:  2021-11-23 10:53:42
MODIFIED: 2021-11-26 10:17:00
"""

from tbe.tik.common import TikUtil
from tbe.tik.common.util import get_mask_len
from tbe.tik.common.util import check_scalar_dtype
from tbe.tik.api.tik_scalar import Scalar
from tbe.tik.tik_lib.tik_check_util import TikCheckUtil
from tbe.tik.tik_lib.tik_expr import is_basic_expr
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_params import MASK_HIGH_IDX
from tbe.tik.tik_lib.tik_params import DEFAULT_STRIDE
from tbe.tik.tik_lib.tik_params import MASK_LEN_CONTINOUS_MODE
from tbe.tik.tik_lib.tik_params import MIN_REPEAT_TIMES
from tbe.tik.tik_lib.tik_params import MAX_REPEAT_TIMES
from tbe.tik.tik_lib.tik_params import MAX_REP_STRIDE_DOUBLE_BYTE


class VbiControlOp:
    """
    Control Ops
    """
    def __init__(self, mask, repeat_times_list, repeat_mode, vertical_repeat_offset):
        self.mask = mask
        self.mask_value = mask
        self.vertical_repeat_times, self.horizontal_repeat_times = repeat_times_list
        self.vertical_repeat_times_value = self.vertical_repeat_times
        self.horizontal_repeat_times_value = self.horizontal_repeat_times
        self.repeat_mode = repeat_mode
        self.vertical_repeat_offset = vertical_repeat_offset
        self.mask_len = None
        self.total_repeat_times = self.vertical_repeat_times * self.horizontal_repeat_times
        self.total_repeat_times_value = self.total_repeat_times
        self.repeat_times = self.total_repeat_times
        self.repeat_times_value = self.total_repeat_times_value
        self.vertical_repeat_offset_value = self.vertical_repeat_offset
        self.stride_unit = 0
        self.mask_mode = "normal"
        self.context = None

    def set_context(self, context):
        """
        set context

        Parameters
        ----------
        context

        Returns
        -------
        None
        """
        self.context = context
        if self.context:
            self.vertical_repeat_times_value = context.evaluate_expr(self.vertical_repeat_times_value)
            self.horizontal_repeat_times_value = context.evaluate_expr(self.horizontal_repeat_times_value)
            self.vertical_repeat_offset_value = context.evaluate_expr(self.vertical_repeat_offset)
            self.total_repeat_times_value = self.vertical_repeat_times_value * self.horizontal_repeat_times_value
            if isinstance(self.mask_value, (list, tuple)):
                self.mask_value = [context.evaluate_expr(value) for value in self.mask_value]
            else:
                self.mask_value = context.evaluate_expr(self.mask_value)

    def get_vbi_mask_len(self):
        """
        get vbi mask_len corresponding to mask

        Returns
        -------
        mask_len: mask_len is None(mask is scalar-list) or imme(mask is imme/imme-list) or scalar(mask is scalar)
        """
        mask = self.mask
        if not isinstance(mask, (list, tuple)):
            mask = [mask]
        if len(mask) == MASK_LEN_CONTINOUS_MODE:
            mask_len = mask[MASK_HIGH_IDX]
        else:
            if is_basic_expr(TikUtil.to_list(mask)):
                return None
            mask_len = get_mask_len(mask)
        return mask_len

    def check_vertical_repeat_times(self):
        """
        check vertical_repeat_times

        Returns
        -------
        None
        """
        if self.context is None:
            TikCheckUtil.check_type_match(
                self.vertical_repeat_times_value, (int, Scalar, Expr),
                "vertical_repeat_times should be int, Scalar or Expr, input type of"
                " vertical_repeat_times: {}".format(type(self.vertical_repeat_times_value)))
            check_scalar_dtype(self.vertical_repeat_times_value,
                               "scalar vertical_repeat_times should be a scalar of int/uint")
        TikCheckUtil.check_in_range_by_dtype(
            self.vertical_repeat_times_value, msg="vertical_repeat_times should be in the range of [%d, %d], "
            "input vertical_repeat_times: %s" % (
                MIN_REPEAT_TIMES, MAX_REPEAT_TIMES, self.vertical_repeat_times_value),
            var_range=[MIN_REPEAT_TIMES, MAX_REPEAT_TIMES])

    def check_horizontal_repeat_times(self):
        """
        check horizontal_repeat_times

        Returns
        -------
        None
        """
        if self.context is None:
            TikCheckUtil.check_type_match(
                self.horizontal_repeat_times_value, (int, Scalar, Expr),
                "horizontal_repeat_times should be int, Scalar or Expr, input type "
                "of horizontal_repeat_times: {}".format(type(self.horizontal_repeat_times_value)))
            check_scalar_dtype(self.horizontal_repeat_times_value,
                               "scalar horizontal_repeat_times should be a scalar of int/uint")
        TikCheckUtil.check_in_range_by_dtype(
            self.horizontal_repeat_times_value, msg="horizontal_repeat_times should be in the range of [%d, %d], "
            "input horizontal_repeat_times: %s" % (
                MIN_REPEAT_TIMES, MAX_REPEAT_TIMES, self.horizontal_repeat_times_value),
            var_range=[MIN_REPEAT_TIMES, MAX_REPEAT_TIMES])

    def check_repeat_mode(self):
        """
        check repeat_times

        Returns
        -------
        None
        """
        TikCheckUtil.check_equality(
            type(self.repeat_mode), int, "repeat_mode should be int, input type is %s" % type(self.repeat_mode))
        TikCheckUtil.check_var_in_list(
            self.repeat_mode, [0, 1], "repeat_mode only support 0 and 1, input value is %s" % self.repeat_mode)

    def check_vertical_repeat_offset(self):
        """
        check vertical_repeat_offset

        Returns
        -------
        None
        """
        if self.context is None:
            TikCheckUtil.check_type_match(
                self.vertical_repeat_offset, (int, Scalar, Expr),
                "vertical_repeat_offset should be int, Expr and Scalar, "
                "input type is %s" % type(self.vertical_repeat_offset_value))
            check_scalar_dtype(self.vertical_repeat_offset_value,
                               "scalar vertical_repeat_offset should be a scalar of int/uint")
        TikCheckUtil.check_in_range_by_dtype(
            self.vertical_repeat_offset_value, msg="vertical_repeat_offset should be in the range of [%d, %d], "
            "input value is %s" % (DEFAULT_STRIDE, MAX_REP_STRIDE_DOUBLE_BYTE, self.vertical_repeat_offset_value),
            var_range=[DEFAULT_STRIDE, MAX_REP_STRIDE_DOUBLE_BYTE])
