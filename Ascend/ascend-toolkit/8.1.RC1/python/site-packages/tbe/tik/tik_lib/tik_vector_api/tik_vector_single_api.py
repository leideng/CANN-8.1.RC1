#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_single_api.py
DESC:     provide vector instructions
CREATED:  2019-08-12 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
from collections import namedtuple

from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_vector_api.tik_vector_single_api_ import SingleOpApi
from tbe.tik.tik_lib.tik_vector_api.tik_vector_single_api_ import NanoSingleOpApi
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class SingleVectorApi(TikIRBuilder):
    """
    Single Vector Api
    """
    single_api = namedtuple('SingleApi', ["name", "mask", "dst", "src", "repeat_times", "dst_blk_stride",
                                          "src_blk_stride", "dst_rep_stride", "src_rep_stride", "stride_unit"])

    def vabs(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
             stride_unit=0):
        """
        Get absolute value by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vabs', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vabs_obj = NanoSingleOpApi(self, single_api)
        else:
            vabs_obj = SingleOpApi(self, single_api)
        vabs_obj.run_all()

    def vrelu(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
              stride_unit=0):
        """
        Do linear rectification by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vrelu', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vrelu_obj = NanoSingleOpApi(self, single_api)
        else:
            vrelu_obj = SingleOpApi(self, single_api)

        vrelu_obj.run_all()

    def vexp(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
             stride_unit=0):
        """
        Get natural index by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vexp', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vexp_obj = NanoSingleOpApi(self, single_api)
        else:
            vexp_obj = SingleOpApi(self, single_api)
        vexp_obj.run_all()

    def vln(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
            stride_unit=0):
        """
        Get natural logarithm by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vln', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vln_obj = NanoSingleOpApi(self, single_api)
        else:
            vln_obj = SingleOpApi(self, single_api)
        vln_obj.run_all()

    def vrec(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
             stride_unit=0):
        """
        Get reciprocal by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vrec', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vrec_obj = NanoSingleOpApi(self, single_api)
        else:
            vrec_obj = SingleOpApi(self, single_api)
        vrec_obj.run_all()

    def vsqrt(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
              stride_unit=0):
        """
        sqrt by single element.

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vsqrt', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vsqrt_obj = NanoSingleOpApi(self, single_api)
        else:
            vsqrt_obj = SingleOpApi(self, single_api)
        vsqrt_obj.run_all()

    def vrsqrt(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
               stride_unit=0):
        """
        vsqrt + vrec

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vrsqrt', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vrsqrt_obj = NanoSingleOpApi(self, single_api)
        else:
            vrsqrt_obj = SingleOpApi(self, single_api)
        vrsqrt_obj.run_all()

    def vnot(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride, dst_rep_stride, src_rep_stride,
             stride_unit=0):
        """
        bitwise not.
        dst = !src

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block in one repeat
        src_blk_stride : offset of src operator between different block in one repeat
        dst_rep_stride : offset of dst operator in the same block between two repeats
        src_rep_stride : offset of src operator in the same block between two repeats
        stride_unit : address and offset unit both affect it. default = 0

        Returns
        -------
        None
        """
        single_api = SingleVectorApi.single_api('vnot', mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                                dst_rep_stride, src_rep_stride, stride_unit)
        if TikSocManager.is_nano_soc():
            vnot_obj = NanoSingleOpApi(self, single_api)
        else:
            vnot_obj = SingleOpApi(self, single_api)
        vnot_obj.run_all()
