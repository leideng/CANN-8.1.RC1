#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_preg_api.py
DESC:     provide vector instructions
CREATED:  2020-03-10 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""

from tbe import tvm
from tbe.tvm import call_extern
from tbe.tvm import call_cce_pure_intrin
from tbe.tik.debug.decorators_spec_v210 import wpack_wpacks_decorator
from tbe.tik.debug.decorators_spec_v210 import wmul_wmuls_decorator
from tbe.tik.debug.decorators_spec_v210 import wmul_v2_decorator
from tbe.tik.debug.decorators_spec_v210 import wmuls_v2_decorator
from tbe.tik.debug.decorators_spec_v210 import wfifr2_decorator
from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_api_constants import DTYPE_MAP
from tbe.tik.common.util import TikCheckUtil
from tbe.tik.common.util import get_instr_name_by_acc_mode
from tbe.tik.common.util import WMUL_NO_PG_DTYPE_LIST
from tbe.tik.common.util import WFIFR2_OFFSET_LIST
from tbe.tik.common.util import WFIFR2_BITWIDE_LIST
from tbe.tik.tik_lib.tik_check_util import print_error_msg
from tbe.tik.tik_lib.tik_util import concat_params
from tbe.tik.tik_lib.tik_expr_convert import type_convert
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class TikWideApiInner(TikIRBuilder):
    """
    Vector, Serialization, Spr Operation Api
    """
    def __init__(self):
        super(TikWideApiInner, self).__init__()
        self.core_arch = None
        self.core_version = None

    @staticmethod
    def get_part_mode(wmul_params, dst_dtype, dtype_str_list, dst_name="dst"):
        """
        get part mode
        Parameters
        ----------
        wmul_params
        dst_dtype
        dtype_str_list
        dst_name

        Returns
        -------

        """
        part_mode = wmul_params.part_mode
        src_dtype = wmul_params.src0.dtype
        api_name = wmul_params.api_name
        dtype_str = DTYPE_MAP[src_dtype] + DTYPE_MAP[dst_dtype]
        if dtype_str not in dtype_str_list:
            if part_mode is not None:
                TikCheckUtil.raise_warning(
                    "For intrinsic %s, when src0's dtype is %s, %s's dtype is %s, "
                    "part_mode must be None" % (api_name, src_dtype, dst_name, dst_dtype))
            return ""

        # check part_mode
        if part_mode not in ["EVEN", "ODD"]:
            print_error_msg(
                "For intrinsic %s, when src0's dtype is %s, %s's dtype is %s, "
                "part_mode can only be [\"EVEN\", \"ODD\"]" % (api_name, src_dtype, dst_name, dst_dtype))

        part_mode_str = tvm.tir.StringImm("PART_EVEN")
        if part_mode == "ODD":
            part_mode_str = tvm.tir.StringImm("PART_ODD")

        return part_mode_str

    @staticmethod
    def check_and_get_rs_mode_str(rs_mode, api_name):
        """
        check and get rs mode str
        Parameters
        ----------
        rs_mode
        api_name

        Returns
        -------

        """
        if not isinstance(rs_mode, bool):
            print_error_msg("Intrinsic %s's rs_mode can only be [True, False]" % api_name)
        rs_mode_str = tvm.tir.StringImm("RS_DISABLE")
        if rs_mode is True:
            rs_mode_str = tvm.tir.StringImm("RS_ENABLE")
        return rs_mode_str

    @wmul_v2_decorator
    def _vector_wmul_wmula_gen_code_v300(self, wmul_params):

        if TikSocManager.is_v300_610l_soc():
            instr = call_extern(
                wmul_params.dst.dtype, wmul_params.name, type_convert(wmul_params.dst),
                type_convert(wmul_params.src0), type_convert(wmul_params.src1), type_convert(wmul_params.src2))
            self.emit(instr)

    @wmuls_v2_decorator
    def _vector_wmuls_wmulas_gen_code_v300(self, wmul_params, src1_dtype):
        if isinstance(wmul_params.src1, int):
            src1 = type_convert(wmul_params.src1, src1_dtype)
        else:
            src1 = type_convert(wmul_params.src1)
        instr = call_extern(
            wmul_params.dst.dtype, wmul_params.name,
            type_convert(wmul_params.dst), type_convert(wmul_params.src0), src1)
        self.emit(instr)

    @wmul_wmuls_decorator
    def _vector_wmul_wmuls_gen_code(self, wmul_params):

        part_mode_str = self.get_part_mode(wmul_params, wmul_params.src1_dtype, WMUL_NO_PG_DTYPE_LIST, "src1")

        if part_mode_str != "" and wmul_params.mask is not None:
            print_error_msg(
                "For intrinsic %s, when src0's dtype is %s, src1's dtype is %s, dst's dtype is %s, mask must be None" %
                (wmul_params.api_name, wmul_params.src0.dtype, wmul_params.src1_dtype, wmul_params.dst.dtype))

        # code gen
        instr_name = get_instr_name_by_acc_mode(wmul_params.acc_mode, wmul_params.name)
        with self.new_scope():
            # for wmuls, wmulas, if input src1 is int, need type convert
            if isinstance(wmul_params.src1, int):
                src1 = type_convert(wmul_params.src1, wmul_params.src1_dtype)
            else:
                src1 = type_convert(wmul_params.src1)

            # if part_mode_str is not "", no need mask
            if part_mode_str != "":
                instr = call_extern(
                    wmul_params.dst.dtype, instr_name,
                    type_convert(wmul_params.dst), type_convert(wmul_params.src0), src1,
                    call_cce_pure_intrin('handle', 'tvm_cce_string_print', part_mode_str))
            else:
                preg = self._gen_mask(wmul_params.mask, wmul_params.src0.dtype)
                pg_mode = tvm.tir.StringImm("MODE_MERGING")
                instr = call_extern(
                    wmul_params.dst.dtype, instr_name, type_convert(wmul_params.dst),
                    type_convert(wmul_params.src0), src1,
                    type_convert(preg), call_cce_pure_intrin('handle', 'tvm_cce_string_print', pg_mode))

            self.emit(instr)

    @wpack_wpacks_decorator
    def _vector_wpack_wpacks_gen_code(self, gen_code_params):
        mask = gen_code_params.mask
        rs_mode_str = self.check_and_get_rs_mode_str(gen_code_params.rs_mode, gen_code_params.api_name)
        dtype_str_list = ["s24s16", "s24u16", "s48s32"]
        part_mode_str = self.get_part_mode(gen_code_params, gen_code_params.dst.dtype, dtype_str_list)
        if part_mode_str != "" and mask is not None:
            print_error_msg("For intrinsic %s, when src0's dtype is %s dst's dtype is %s, "
                            "mask must be None" % (gen_code_params.api_name,
                                                   gen_code_params.src0.dtype, gen_code_params.dst.dtype))
        # if mask is int and mask value same with VL_t of dst, no need mask
        if isinstance(mask, int) and\
                mask == self.get_vector_length(gen_code_params.dst.dtype):
            mask = None

        # code gen
        with self.new_scope():
            # if part_mode_str is not "", no need mask
            if part_mode_str != "":
                instr = call_extern(
                    gen_code_params.dst.dtype, gen_code_params.name, type_convert(gen_code_params.dst),
                    type_convert(gen_code_params.src0), type_convert(gen_code_params.src1),
                    call_cce_pure_intrin('handle', 'tvm_cce_string_print', rs_mode_str),
                    call_cce_pure_intrin('handle', 'tvm_cce_string_print', part_mode_str))
            else:
                if mask is not None:
                    preg = self._gen_mask(mask, gen_code_params.dst.dtype)
                    pg_mode = tvm.tir.StringImm("MODE_MERGING")
                    instr = call_extern(
                        gen_code_params.dst.dtype, gen_code_params.name, type_convert(gen_code_params.dst),
                        type_convert(gen_code_params.src0), type_convert(gen_code_params.src1),
                        call_cce_pure_intrin('handle', 'tvm_cce_string_print', rs_mode_str),
                        type_convert(preg), call_cce_pure_intrin('handle', 'tvm_cce_string_print', pg_mode))
                else:
                    instr = call_extern(
                        gen_code_params.dst.dtype, gen_code_params.name, type_convert(gen_code_params.dst),
                        type_convert(gen_code_params.src0), type_convert(gen_code_params.src1),
                        call_cce_pure_intrin('handle', 'tvm_cce_string_print', rs_mode_str))

            self.emit(instr)

    def _vector_wpack(self, wpack_params):
        """
        generate preg instruction according init_mode
        Parameters
        ----------
        mask: mask value, if is None, all data is available
        dst: vector register, int16, int8, uint16, uint8
        src0: wide register, int24, int48, int64
        src1: vector register
        rs_mode: defines the rounding and saturation police on the right-shift result, None(False), True, False
        part_mode: even or odd indicator for src0, None, True, False

        Returns
        -------
        None
        """

        self._vector_wpack_wpacks_gen_code(wpack_params)

    def _vector_wpacks(self, wpacks_params):
        """
        generate preg instruction according init_mode
        Parameters
        ----------
        mask: mask value, if is None, all data is available
        dst: vector register, int16, int8, uint16, uint8
        src: wide register, int24, int48, int64
        src1: imm/Scalar/Expr
        rs_mode: defines the rounding and saturation police on the right-shift result, None(False), True, False
        part_mode: even or odd indicator for src0, "EVEN", "ODD"

        Returns
        -------
        None
        """

        self._vector_wpack_wpacks_gen_code(wpacks_params)

    def _vector_wmul_wmuls(self, wmul_params):
        """
        for instructions wmul wmula wmuls wmulas to gen code
        Parameters
        ----------
        mask: mask value, if is None, all data is available
        dst: wide register, int24, int48, int64
        src0: vector register, int16, int8, uint16, uint8
        src1: vector register, int, Scalar, Expr
        acc_mode: accumulate mode, None or "MULA"
        part_mode: even or odd indicator for src0, None, True, False

        Returns
        -------
        None
        """

        self._vector_wmul_wmuls_gen_code(wmul_params)

    @wfifr2_decorator
    def _wfifr2_gen_code(self, wfifr2_params):
        # concat the input coefficient to a uint32 Scalar
        dtype = "uint32"
        filter_coef = concat_params([wfifr2_params.coef0, wfifr2_params.coef1,
                                     wfifr2_params.coef2, wfifr2_params.coef3, wfifr2_params.coef4], WFIFR2_OFFSET_LIST,
                                    WFIFR2_BITWIDE_LIST, dtype)

        with self.new_scope():
            if wfifr2_params.src1 is None:
                instr = call_extern(wfifr2_params.dst.dtype, wfifr2_params.name, type_convert(wfifr2_params.dst),
                                    type_convert(wfifr2_params.src0), type_convert(filter_coef, "uint32"))
            else:
                instr = call_extern(wfifr2_params.dst.dtype, wfifr2_params.name, type_convert(wfifr2_params.dst),
                                    type_convert(wfifr2_params.src0), type_convert(wfifr2_params.src1),
                                    type_convert(filter_coef, "uint32"))
            self.emit(instr)
