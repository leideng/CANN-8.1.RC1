#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_data_move_api_.py
DESC:     tik_data_move_api_
CREATED:  2021-11-30 5:57 AM
MODIFIED: 2021-11-30 5:57 AM
"""
from collections import namedtuple

from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_ import DataMoveQuantApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_operation_ import TensorMoveApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_ import DataMovePadApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_operation_ import VCopyOpApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_ import DataMoveMultiNd2NzApi
from tbe.tik.tik_lib.tik_data_move_api.tik_load_image_operation_ import LoadImageApi
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_nano import DataMovePadApiNano
from tbe.tik.tik_lib.tik_data_move_api.tik_data_move_operation_nano import VCopyOpApiNano
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


class TikDataMoveOpApi:
    """
    data_move operation api
    """

    data_move_quant_api = namedtuple('DataMoveApi', ['dst', 'src', 'sid', 'nburst', 'burst', 'src_stride',
                                                     'dst_stride', 'quant_param', 'relu_flag'])

    tensor_mov_api = namedtuple('TensorMovApi', ['dst', 'src', 'block_mode', 'nburst', 'burst_len', 'dst_stride',
                                                 'src_stride', 'deqscale', 'sid_store_mode', 'relu', 'pad_mode',
                                                 'pad_value', 'onthefly_mode', 'src_onthefly', 'src_onthefly_stride'])

    data_move_pad_api = namedtuple('DataMovePadApi', ['dst', 'src', 'nburst', 'burst', 'dst_gap', 'src_gap',
                                                      'right_padding', 'left_padding', 'padding_value'])

    load_image_api = namedtuple('LoadImageApi', ['dst', 'src0', 'src1', 'input_format', 'function_switch', 'src_info',
                                                 'crop_info', 'pre_clip_info', 'swap_list', 'csc_info', 'scf_info',
                                                 'post_clip_info', 'dtc_info', 'flip_mode', 'channel_pad_info',
                                                 'area_pad_info', 'stretch_info', 'raw_info', 'sid'])

    vcopy_api = namedtuple('VcopyApi', ['mask', 'dst', 'src', 'repeat_times', 'dst_blk_stride', 'src_blk_stride',
                                        'dst_rep_stride', 'src_rep_stride', 'mask_mode'])

    data_move_multi_nd2nz_api = namedtuple('DataMoveMultiNd2NzApi', ['dst', 'src', 'nd_num', 'nd_n', 'nd_d',
                                                                     'src_nd_stride', 'src_n_stride', 'dst_c0_stride',
                                                                     'dst_n_stride', 'dst_nd_stride'])

    def data_move_pad(self, dst, src, nburst, burst, dst_gap, src_gap,
                      right_padding=0, left_padding=0, padding_value=None):
        """
        data move for src to dst with padding

        Parameters
        ----------
        dst: the des addr
        src: the src addr
        nburst: numbers of burst
        burst: the lenght of the burst, its length is defined in unit of bytes
        dst_gap: each 2 adjacent bursts(gap between front burst tail and the next burst header), the gap of UB is in
        unit of 32B, while the gaps of OUT is in unit of byte
        src_gap: each 2 adjacent bursts(gap between front burst tail and the next burst header), the gap of UB is in
        unit of 32B, while the gaps of OUT is in unit of byte
        right_padding: right padding count of elements
        left_padding: left padding count of elements
        padding_value: value of padding for scope_ubuf

        Returns
        -------
        Nones
        """
        dmp_api = TikDataMoveOpApi.data_move_pad_api(dst, src, nburst, burst, dst_gap, src_gap,
                                                     right_padding, left_padding, padding_value)
        if TikSocManager.is_nano_soc():
            dmp_obj = DataMovePadApiNano(self, dmp_api)
        else:
            dmp_obj = DataMovePadApi(self, dmp_api)
        dmp_obj.run_all()

    def data_move_quant(self, dst, src, sid, nburst, burst, src_stride, dst_stride, quant_param, relu_flag=False):
        """
        Move tensor from tik.cbuf to tik.ubuf

        Parameters
        ----------
        dst : destination operator
        src : source operation
        sid: 0, float16
        nburst : [1, 4095] continuous data segment for transfer instruction
        burst: nburst's length [1, 65535]
        dst_stride : offset of dst tensor between adjacent data segment
        src_stride : offset of src tensor between adjacent data segment
        quant_param : Anti-quantization parameter tensor start element
        relu_flag : True/False

        Returns
        -------
        None
        """
        dmq_api = TikDataMoveOpApi.data_move_quant_api(dst, src, sid, nburst, burst, src_stride, dst_stride,
                                                       quant_param, relu_flag)
        dmq_obj = DataMoveQuantApi(self, dmq_api)
        dmq_obj.run_all()

    def tensor_mov(self, dst, src, block_mode, nburst, burst_len, dst_stride, src_stride, deqscale=None,
                   sid_store_mode=0, relu=False, pad_mode=None, pad_value=None, onthefly_mode=0,
                   src_onthefly=None, src_onthefly_stride=0):
        """
        # function's unused params(pad_value) is used in decorators, so disable
        # them
        pad_value is not support yet, please use _set_padding().
        Leaky-Relu is not supported yet.
        block_mode: '' for 32B
        -           'm' for 16*16 matrix(only cc)
        -           'v' for 1*16 matrix(only cc)
        -           'sc' for 16*4 matrix(only cc)
        -           'dp' for 16*8 matrix(only cc)
        deqscale: None for normal-mode
        -         (float, Scalar.float) for deq-mode;
        -         (int, Scalar.uint) for deq8/deq16/deqs16-mode;
        -         (tensor.float) for vdeq-mode;
        -         (tensor.uint) for vdeq8/vdeq16/vdeqs16-mode;
        sid_storeMode: sid for gm
        -              0 for store-high-16B(only cc)
        -              1 for store-low-b6B(only cc)
        -              2 for store-compact(only cc)
        Note: if you don't attempt to use/modify onthefly_mode/padMode, please config it as None or let it alone,
        otherwise, the perfermance will shrink.
        """
        tm_api = TikDataMoveOpApi.tensor_mov_api(dst, src, block_mode, nburst, burst_len, dst_stride, src_stride,
                                                 deqscale, sid_store_mode, relu, pad_mode, pad_value, onthefly_mode,
                                                 src_onthefly, src_onthefly_stride)
        tm_obj = TensorMoveApi(self, tm_api)
        tm_obj.run_all()

    def load_image(self, dst, src0, src1, input_format, function_switch, src_info, crop_info, pre_clip_info,
                   swap_list, csc_info, scf_info, post_clip_info, dtc_info, flip_mode, channel_pad_info,
                   area_pad_info, stretch_info, raw_info, sid):
        """
        load image api
        """
        la_api = TikDataMoveOpApi.load_image_api(dst, src0, src1, input_format, function_switch, src_info,
                                                 crop_info, pre_clip_info, swap_list, csc_info, scf_info,
                                                 post_clip_info, dtc_info, flip_mode, channel_pad_info,
                                                 area_pad_info, stretch_info, raw_info, sid)
        la_obj = LoadImageApi(self, la_api)
        la_obj.run_all()

    def vcopy(self, mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
              dst_rep_stride, src_rep_stride, mask_mode='normal'):
        """
        data copy from src to dst with mask

        Parameters
        ----------
        mask : Effective operation on element, divided into two model: Continuous and bit by bit.
        dst : destination operator
        src : source operation
        repeat_times : Repeated iterations times
        dst_blk_stride : offset of dst operator between different block
        src_blk_stride : offset of src operator between different block
        dst_rep_stride : offset of dst operator in the same block between
        src_rep_stride : offset of src operator in the same block between
        mask_mode: "normal" - mask normal mode
        -          "counter" - mask counter mode

        Returns
        -------
        Nones
        """
        vcopy_api = TikDataMoveOpApi.vcopy_api(mask, dst, src, repeat_times, dst_blk_stride, src_blk_stride,
                                               dst_rep_stride, src_rep_stride, mask_mode)
        if TikSocManager.is_nano_soc() is True:
            vcopy_obj = VCopyOpApiNano(self, vcopy_api)
        else:
            vcopy_obj = VCopyOpApi(self, vcopy_api)
        vcopy_obj.run_all()

    def data_move_multi_nd2nz(self, dst, src, nd_num, nd_n, nd_d, src_nd_stride, src_n_stride,
                              dst_c0_stride, dst_n_stride, dst_nd_stride):
        """
        Move multi matrix from tik.gm to tik.cbuf, with multi nd to nz

        Parameters
        ----------
        dst : destination operator
        src : source operation
        nd_num : nd number of data to be moved
        nd_n: nd_n value
        nd_d : nd_d value, in unit of element
        src_nd_stride : stride between nd matrixs at source, in unit of element
        src_n_stride : SRC_D value, in unit of element
        dst_c0_stride : stride of nz between 2 C0 in L1, in unit of C0_size
        dst_n_stride : stride of n between 2 C0 in L1, is used in DeConv and Weight, in unit of C0_size
        dst_nd_stride : DST_nz_matrix_stride in L1, in unit of element

        Returns
        -------
        None
        """
        dm_obj = TikDataMoveOpApi.data_move_multi_nd2nz_api(dst, src, nd_num, nd_n, nd_d,
            src_nd_stride, src_n_stride, dst_c0_stride, dst_n_stride, dst_nd_stride)
        dm_obj = DataMoveMultiNd2NzApi(self, dm_obj)
        dm_obj.run_all()