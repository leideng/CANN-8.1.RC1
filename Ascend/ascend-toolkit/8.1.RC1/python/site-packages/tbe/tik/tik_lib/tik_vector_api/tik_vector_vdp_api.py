#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_multi_api.py
DESC:
CREATED:  2021-11-03 10:05
MODIFIED: 2021-11-03 10:05
"""

from collections import namedtuple

from tbe import tvm
from tbe.tik.api.tik_ir_builder import TikIRBuilder
from tbe.tik.tik_lib.tik_expr_convert import type_convert
from tbe.tik.tik_lib.tik_util import concat_params
from tbe.tik.tik_lib.tik_api_util import check_vdp_param
from tbe.tik.tik_lib.tik_api_util import calculate_vdp_extent
from tbe.tik.tik_lib.tik_params import PIPE_V
from tbe.tik.tik_lib.tik_source_info import source_info_decorator
from tbe.tik.tik_lib.tik_params import PNT_COE_OFFSET_LIST
from tbe.tik.tik_lib.tik_params import PNT_COE_SEGMENT_LIST
from tbe.tik.debug.decorators import vdp_decorator


class VdpOpsApi(TikIRBuilder):
    """
    Multi Vector Api
    """
    vdp_api = namedtuple('VdpApi', ["dst", "src0", "src1", "num_pixel", "num_max_disparity", "p1", "p2",
                                    "is_begin_pixel", "is_path_reverse", "path_mode", "offset_pixel",
                                    "dynamic_addr_range"])

    @source_info_decorator()
    def vdp(self, dst, src0, src1, num_pixel, num_max_disparity, p1, p2,
            is_begin_pixel, is_path_reverse, path_mode, offset_pixel):
        """
        Get dynamic costs by dynamic programming.

        Parameters
        ----------
        dst : destination operator
        src0 : source operation
        src1 : source operation
        num_pixel : the number of pixels to compute
        num_max_disparity : the max disparity number
        p1 : the penalty coefficient
        p2 : the penalty coefficient
        is_begin_pixel : the beginning pixel indicator
        is_path_reverse : the reverse path indicator
        path_mode : the path mode
        offset_pixel : the pixel offset

        Returns
        -------
        None
        """
        dynamic_addr_range = 0
        vdp_api = VdpOpsApi.vdp_api(dst, src0, src1, num_pixel, num_max_disparity, p1, p2,
                                    is_begin_pixel, is_path_reverse, path_mode, offset_pixel, dynamic_addr_range)
        # check params
        check_vdp_param(vdp_api)
        # set penalty coefficient
        pnt_coe_param = concat_params([p1, p2], PNT_COE_OFFSET_LIST, PNT_COE_SEGMENT_LIST)

        self._set_pnt_coe(pnt_coe_param)
        self.vdp_gen_code(vdp_api)

    @vdp_decorator
    def vdp_gen_code(self, vdp_api):
        """
        vdp gen code

        Parameters
        ----------
        vdp_api: vdp of namedtuple

        Returns
        -------
        None
        """
        # code gen
        params = [vdp_api.num_pixel, vdp_api.num_max_disparity, vdp_api.offset_pixel,
                  vdp_api.dynamic_addr_range, vdp_api.is_begin_pixel, vdp_api.is_path_reverse, vdp_api.path_mode]

        # calculate dst extent
        dst_extent, src0_extent, src1_extent = calculate_vdp_extent(vdp_api)

        with self.new_scope():
            self.scope_attr(tvm.thread_axis("cce"), "coproc_scope", PIPE_V)
            instr = tvm.call_extern("int16", "vdp",
                                    vdp_api.dst.access_ptr('w', extent=dst_extent),
                                    vdp_api.src0.access_ptr('r', extent=src0_extent),
                                    vdp_api.src1.access_ptr('r', extent=src1_extent),
                                    *type_convert(params))
            # two ir is call_extern
            self.emit(instr)

    def _set_pnt_coe(self, pnt_coe_param):
        """
        set penalty coefficient
        """
        if "pnt_coe" in self.global_dict:
            pnt_coe = self.global_dict["pnt_coe"]
        else:
            pnt_coe = self.global_scalar(dtype="int64")
            self.global_dict["pnt_coe"] = pnt_coe
        with self.context.freeze():
            with self.new_scope():
                t_pnt_coe = self.scalar_(dtype="int64")
                t_pnt_coe.set_as(pnt_coe_param)
                self.scope_attr(tvm.thread_axis("cce"), "if_protect", PIPE_V)
                with self.if_scope_(pnt_coe != t_pnt_coe):
                    pnt_coe.set_as(t_pnt_coe)
                    # one ir is call_extern
                    self.emit(
                        tvm.call_extern("int64", "set_pnt_coe", pnt_coe.get()))
