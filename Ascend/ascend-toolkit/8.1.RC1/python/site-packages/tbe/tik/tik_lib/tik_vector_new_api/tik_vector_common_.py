#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.
FILE:     tik_vector_common_.py
DESC:     provide common inner api for vector instructions
CREATED:  2020-03-10 18:53:42
MODIFIED: 2020-12-7 19:17:00
"""
import re
from tbe import tvm
from tbe.common.platform import intrinsic_check_support
from tbe.common.platform import scope_preg
from tbe.common.platform import scope_vreg
from tbe.tik.tik_lib.tik_check_util import print_error_msg
from tbe.tik.common.util import TikCheckUtil
from tbe.tik.tik_lib.tik_params import gen_api_check_statement
from tbe.tik.tik_lib.tik_params import DTYPE_IMM_MAX
from tbe.tik.tik_lib.tik_params import DTYPE_IMM_MIN
from tbe.tik.api.tik_scalar import Scalar
from tbe.tik.api.tik_vector import Vector
from tbe.tik.tik_lib.tik_expr import Expr
from tbe.tik.tik_lib.tik_api_constants import DTYPE_MAP
from tbe.tik.tik_lib.tik_soc_manager import TikSocManager


def check_param_is_preg(api_name, param, param_name):
    """
    check param is preg
    """
    TikCheckUtil.check_type_match(param, Vector, "Instruction %s's %s should be Vector" % (api_name, param_name))
    TikCheckUtil.check_equality(param.scope, scope_preg,
                                "Instruction %s's %s's dtype error, it should be bool, but "
                                "input is:%s" % (api_name, param_name, param.dtype))


def check_param_is_vreg(api_name, param, param_name):
    """
    check param is register
    Parameters
    ----------
    api_name: api name
    param: param
    param_name: param name

    Returns
    -------
    no return
    """
    TikCheckUtil.check_type_match(param, Vector, "Instruction %s's %s should be Vector" % (api_name, param_name))
    TikCheckUtil.check_equality(param.scope, scope_vreg,
                                "Instruction %s's %s's dtype error, but "
                                "input is:%s" % (api_name, param_name, param.dtype))


def check_vector_one_src_two_dst_params(name, dst0, dst1, src):
    """
    check vector one src and two dst params
    """
    # current only for vector_vdhistv2, vector_vchistv2 instructions
    api_name = name.replace("vectorized_", "vector_v")
    # check vector
    TikCheckUtil.check_type_match(src, Vector, "Instruction %s's src should be Vector" % api_name)
    TikCheckUtil.check_type_match(dst0, Vector, "Instruction %s's dst0 should be Vector" % api_name)
    TikCheckUtil.check_type_match(dst1, Vector, "Instruction %s's dst1 should be Vector" % api_name)

    # check data type
    TikCheckUtil.check_equality(dst1.dtype, dst0.dtype,
                                "Instruction %s's dst1's dtype should be equal to dst0's dtype" % api_name)

    dtype_str = DTYPE_MAP[src.dtype] + DTYPE_MAP[dst0.dtype]
    dtype_str_error = "src " + src.dtype + " dst " + dst0.dtype
    TikCheckUtil.check_equality(intrinsic_check_support("Intrinsic_" + name, dtype_str), True,
                                gen_api_check_statement(dtype_str_error, api_name))


def check_slide_size(name, slide_size, vl_t):
    """
    check slide size
    """
    api_name = name.replace("vectorized", "vector")
    TikCheckUtil.check_type_match(slide_size, (int, Expr, Scalar),
                                  "Instruction %s's slide_size should be int, Expr or Scalar, "
                                  "but input type of slide_size: %s" % (api_name, type(slide_size)))
    slide_size_range = [0, vl_t]
    TikCheckUtil.check_in_range_by_dtype(
        slide_size, msg="Instruction %s's slide_size must be in [%d, %d]"
                        % (api_name, slide_size_range[0], slide_size_range[1]), var_range=slide_size_range)
    if isinstance(slide_size, (Scalar, Expr)):
        TikCheckUtil.check_equality("int16", slide_size.dtype,
                                    "Instruction %s's slide_size's dtype should be equal to int16" % api_name)


def scalar_dtype_check(api_name, scalar_name, dst_dtype, scalar, scalar_range=None):
    """
    scalar data type check
    """
    if isinstance(scalar, Expr) and dst_dtype == "float16" and TikSocManager.is_v210_vec_soc():
        dst_dtype = "float32"

    if scalar_range is None:
        scalar_range = [DTYPE_IMM_MIN[dst_dtype], DTYPE_IMM_MAX[dst_dtype]]

    if isinstance(scalar, (Scalar, Expr)):
        err_msg = "Instruction %s's %s's dtype %s should be equal to " \
                  "dtype %s" % (api_name, scalar_name, scalar.dtype, dst_dtype)
        TikCheckUtil.check_equality(dst_dtype, scalar.dtype, err_msg)
    elif "int" in dst_dtype and isinstance(scalar, int):
        err_msg = "Instruction %s's %s should be in range [%d, %d]" \
                  % (api_name, scalar_name, scalar_range[0], scalar_range[1])
        TikCheckUtil.check_in_range_by_dtype(scalar, dst_dtype, msg=err_msg, var_range=scalar_range)
    elif "float" in dst_dtype and isinstance(scalar, float):
        err_msg = "Instruction %s's %s should be in range [%s, %s]" \
                  % (api_name, scalar_name, scalar_range[0], scalar_range[1])
        TikCheckUtil.check_in_range_by_dtype(scalar, dst_dtype, msg=err_msg, var_range=scalar_range)
    else:
        print_error_msg("Instruction %s's %s's dtype %s should be equal"
                        " to dtype %s" % (api_name, scalar_name, type(scalar), dst_dtype))


def vrnd_scalar_check(api_name, scalar_name, scalar_dtype, scalar):
    """
    check vrnd scalar
    Parameters
    ----------
    api_name: real name
    scalar_name: scalar's name
    scalar_dtype: scalar's type
    scalar: scalar's value

    Returns
    -------
    no return
    """
    scalar_range = [DTYPE_IMM_MIN[scalar_dtype], DTYPE_IMM_MAX[scalar_dtype]]

    if not isinstance(scalar, int):
        if scalar.dtype != "uint16":
            print_error_msg("Intrinsic vector_vrnd's %s's dtype can only be uint16 when %s "
                            "is not vector dtype" % (scalar_name, scalar_name))

    if isinstance(scalar, int):
        err_msg = "Instruction %s's %s should be in range [%d, %d] when %s is not vector dtype" \
                  % (api_name, scalar_name, scalar_range[0], scalar_range[1], scalar_name)
        TikCheckUtil.check_in_range_by_dtype(scalar, scalar_dtype, msg=err_msg, var_range=scalar_range)


def get_vld_str_mode(src_type, ld_mode):
    """
    get Data Transfer Mode
    Parameters
    ----------
    src_type: src type
    ld_mode: Data Transfer Mode

    Returns
    -------
    no return
    """
    if ld_mode in ("NORM", "BDINTLV"):
        return ld_mode
    return get_vst_str_mode(src_type, ld_mode)


def get_vst_str_mode(src_type, st_mode):
    """
    get vector storage mode
    Parameters
    ----------
    src_type: src type
    st_mode: Data Storage Mode

    Returns
    -------
    no return
    """
    num_of_bits = re.findall(r'\d+', src_type)[0]
    return ''.join([st_mode, "_B", num_of_bits])


def get_vector_dup_instruction_name(src, highest_flag):
    """
    get vector dup instr name
    Parameters
    ----------
    src
    highest_flag

    Returns
    -------

    """
    name = ""
    if isinstance(src, (int, float, Scalar, Expr)):
        name = "vectorized_vdups"
    elif isinstance(src, Vector):
        if highest_flag:
            name = "vectorized_vdupm"
        else:
            name = "vectorized_vdup"
    else:
        print_error_msg("src input type is error! input type of src: %s" % type(src))
    return name


def check_vfcvf_mode(vfcvf_params, part_mode, mode, ro_mode):
    """
    check vfcvf mode
    Parameters
    ----------
    vfcvf_params
    part_mode
    mode
    ro_mode

    Returns
    -------

    """
    src_dtype = vfcvf_params.src.dtype
    dst_dtype = vfcvf_params.dst.dtype
    part_indicator = vfcvf_params.part_indicator
    if part_mode is None:
        if part_indicator is not None:
            print_error_msg("when src %s cast to dst %s, part_indicator should be None" % (src_dtype, dst_dtype))
    else:
        TikCheckUtil.check_var_in_list(part_indicator, part_mode,
                                       "when src %s cast to dst %s, part_indicator doesn't support %s" %
                                       (src_dtype, dst_dtype, part_indicator))
    if ro_mode is None:
        if mode not in ["", "none"]:
            print_error_msg("when src %s cast to dst %s, round_mode should be '' or 'none'" % (src_dtype, dst_dtype))
    else:
        TikCheckUtil.check_var_in_list(mode, ro_mode, "when src %s cast to dst %s, round_mode doesn't support %s" %
                                       (src_dtype, dst_dtype, mode))


def vfcvt_param_check(vfcvt_params, dtype_str, mode):
    """
    vfcvt param check
    Parameters
    ----------
    vfcvt_params
    dtype_str
    mode

    Returns
    -------

    """
    rnd_mode = ["round", "away-zero", "floor", "ceil", "ceiling", "to-zero"]
    rz_mode = ["round", "to-zero"]
    part_mode = ["PART_EVEN", "PART_ODD"]
    ro_mode = rnd_mode
    if dtype_str == "f16f32":
        ro_mode.append("odd")
        if not TikSocManager.is_v300_610l_soc():
            ro_mode = ["round", "odd"]
    elif dtype_str in ["s32f32", "f32s32", "f16s16", "s16f16"]:
        part_mode = None
        if not TikSocManager.is_v300_610l_soc() and dtype_str in ["f32s32", "s16f16", "f16s16"]:
            ro_mode = None
    elif dtype_str == "s16f32":
        if not TikSocManager.is_v300_610l_soc():
            ro_mode = rz_mode
    elif dtype_str in ["f32f16", "f16u8", "f16s8", "f32s16"]:
        ro_mode = None
    elif dtype_str in ["s8f16", "u8f16", "s32f16"]:
        pass
    else:
        part_mode = None
        ro_mode = None
    check_vfcvf_mode(vfcvt_params, part_mode, mode, ro_mode)


def vsfcvt_param_check(vsfcvt_params, dtype_str, mode):
    """
    vsfcvt param check
    Parameters
    ----------
    vsfcvt_params
    dtype_str
    mode

    Returns
    -------

    """
    rnd_mode = ["round", "away-zero", "floor", "ceil", "ceiling", "to-zero"]
    part_mode = ["PART_EVEN", "PART_ODD"]
    rz_mode = rnd_mode
    if dtype_str == "f16f32":
        rz_mode.append("odd")
    elif dtype_str in ["s32f32", "f32s32", "f16s16", "s16f16"]:
        part_mode = None
        if not TikSocManager.is_v300_610l_soc() and dtype_str in ["f32s32", "s16f16", "f16s16"]:
            rz_mode = None
    elif dtype_str == "s16f32":
        if not TikSocManager.is_v300_610l_soc():
            rz_mode = ["round", "to-zero"]
    elif dtype_str in ["s8f16", "u8f16"]:
        pass
    else:
        part_mode = None
        rz_mode = None
    check_vfcvf_mode(vsfcvt_params, part_mode, mode, rz_mode)


def vfcvt_dtype_check(check_params, mode):
    """
    vfcvt dtype check
    Parameters
    ----------
    check_params
    mode

    Returns
    -------

    """
    saturate_index = check_params.saturate_flag
    if not isinstance(saturate_index, bool):
        print_error_msg("saturate_flag input value should be bool type")
    dtype_str = DTYPE_MAP[check_params.dst.dtype] + DTYPE_MAP[check_params.src.dtype]

    if saturate_index:
        vsfcvt_dtype = ["s32f32", "s16f32", "s8f16", "u8f16", "s16f16"]
        if TikSocManager.is_v300_610l_soc():
            vsfcvt_dtype.append("f16f32")
        TikCheckUtil.check_var_in_list(dtype_str, vsfcvt_dtype,
                                       "vector_cast Instruction doesn't support src %s cast to dst %s, "
                                       "when saturate_flag is True" % (check_params.src.dtype, check_params.dst.dtype))
        vsfcvt_param_check(check_params, dtype_str, mode)
    else:
        vfcvt_dtype = ["f16f32", "s32f32", "s16f32", "f32f16", "s8f16",
                       "u8f16", "s32f16", "s16f16", "f16u8", "f16s8",
                       "f16s16", "f32s16", "f32s32"]
        TikCheckUtil.check_var_in_list(
            dtype_str, vfcvt_dtype, "vector_cast Instruction doesn't support src %s cast to dst %s, when saturate_"
                                    "flag is False" % (check_params.src.dtype, check_params.dst.dtype))
        vfcvt_param_check(check_params, dtype_str, mode)


def vscvt_param_check(vscvt_params, dtype_str):
    """
    part_indicator check in vscvt
    Parameters
    ----------
    vscvt_params
    dtype_str: the string indicating the src and dst datatype

    Returns
    -------
    None
    """
    part_mode = ["PART_EVEN", "PART_ODD"]
    pp_mode = ["PART_P0", "PART_P1", "PART_P2", "PART_P3"]
    if dtype_str in ["u8u16", "u8s16", "u16u32", "s16u32", "u16s32", "s16s32"]:
        check_vfcvf_mode(vscvt_params, part_mode, "", None)
    else:
        check_vfcvf_mode(vscvt_params, pp_mode, "", None)


def vcvt_param_check(vcvt_params, dtype_str):
    """
    part_indicator check in vcvt
    Parameters
    ----------
    vcvt_params
    dtype_str: the string indicating the src and dst datatype

    Returns
    -------
    None
    """
    part_mode = ["PART_EVEN", "PART_ODD"]
    pp_mode = ["PART_P0", "PART_P1", "PART_P2", "PART_P3"]
    if dtype_str in ["u16u8", "s16s8", "u8u16", "u32u16", "u8s16", "u32s16",
                     "s32s16", "u16u32", "s16u32", "u16s32", "s16s32"]:
        check_vfcvf_mode(vcvt_params, part_mode, "", None)
    else:
        check_vfcvf_mode(vcvt_params, pp_mode, "", None)


def _vcvt_dtype_check(vcvt_params):
    """
    data type check in vcvt
    Parameters
    ----------
    name: instr name
    dst: vector destination operator
    src: vector source operator
    saturate_flag: the flag that whether do saturation in the instr

    Returns
    -------
    None
    """
    dtype_str = DTYPE_MAP[vcvt_params.dst.dtype] + DTYPE_MAP[vcvt_params.src.dtype]
    vcvt_range = ["u16u8", "u32u8", "s16s8", "s32s8", "u8u16",
                  "u32u16", "u8s16", "u32s16", "s32s16", "u8u32",
                  "u16u32", "s16u32", "u8s32", "u16s32", "s16s32"]
    vscvt_range = ["u8u16", "u8s16", "u8u32", "u16u32",
                   "s16u32", "u8s32", "u16s32", "s16s32"]
    if not isinstance(vcvt_params.saturate_flag, bool):
        print_error_msg("saturate_flag input value should be bool type")
    if vcvt_params.part_indicator is None:
        print_error_msg("when src %s cast to dst %s, part_indicator should not be None" %
                        (vcvt_params.src.dtype, vcvt_params.dst.dtype))
    if vcvt_params.saturate_flag:
        TikCheckUtil.check_var_in_list(
            dtype_str, vscvt_range,
            "vector_cast Instruction doesn't support dst %s and src %s, "
            "when saturate_flag is True" % (vcvt_params.dst.dtype, vcvt_params.src.dtype))
        vscvt_param_check(vcvt_params, dtype_str)
    else:
        TikCheckUtil.check_var_in_list(
            dtype_str, vcvt_range,
            "vector_cast Instruction doesn't support dst %s and src %s, "
            "when saturate_flag is False" % (vcvt_params.dst.dtype, vcvt_params.src.dtype))
        vcvt_param_check(vcvt_params, dtype_str)


def gen_cvt_common(part_indicator, literal_value, args):
    """
    gen cvt common
    Parameters
    ----------
    part_indicator
    literal_value
    args

    Returns
    -------

    """
    if part_indicator is not None:
        part_indicator_value = tvm.tir.StringImm(part_indicator)
        part_indicator_exp = tvm.call_cce_pure_intrin('handle', 'tvm_cce_string_print', part_indicator_value)
        args.append(part_indicator_exp)
    if literal_value is not None:
        literal_value_string = tvm.tir.StringImm(literal_value)
        literal_value_exp = tvm.call_cce_pure_intrin('handle', 'tvm_cce_string_print', literal_value_string)
        args.append(literal_value_exp)
    return args


def gen_vcvt_param(part_indicator, literal_value, saturate_flag, dtype_str):
    """
    gen vcvt param
    Parameters
    ----------
    part_indicator
    literal_value

    Returns
    -------

    """
    args = []
    if TikSocManager.is_v300_610l_soc():
        if dtype_str in ["u162u8", "s162u8", "u322u8", "u322u16", "u322s16", "u322u8", "u322u16", "s322u8",
                         "s322u16", "s322s16", "s642s32"]:
            if saturate_flag:
                sat_value = tvm.tir.StringImm("RS_ENABLE")
            else:
                sat_value = tvm.tir.StringImm("RS_DISABLE")
            sat = tvm.call_cce_pure_intrin('handle', 'tvm_cce_string_print', sat_value)
            args.append(sat)
        
    args = gen_cvt_common(part_indicator, literal_value, args)
    return args


def gen_vfcvt_param(part_indicator, mode, literal_value, saturate_flag, dtype_str):
    """
    gen vfcvt param
    Parameters
    ----------
    part_indicator
    mode
    literal_value

    Returns
    -------

    """
    args = []
    if mode is not None:
        mode_value = tvm.tir.StringImm(mode)
        mode_exp = tvm.call_cce_pure_intrin('handle', 'tvm_cce_string_print', mode_value)
        args.append(mode_exp)
    if TikSocManager.is_v300_610l_soc():
        if dtype_str in ["f322s64", "f322s32", "f322s16", "f162s16", "f162s8", "f162u8", "f162s4",
                         "f322f16", "f322bf16"]:
            if saturate_flag:
                sat_value = tvm.tir.StringImm("RS_ENABLE")
            else:
                sat_value = tvm.tir.StringImm("RS_DISABLE")
            sat = tvm.call_cce_pure_intrin('handle', 'tvm_cce_string_print', sat_value)
            args.append(sat)
    args = gen_cvt_common(part_indicator, literal_value, args)

    return args
