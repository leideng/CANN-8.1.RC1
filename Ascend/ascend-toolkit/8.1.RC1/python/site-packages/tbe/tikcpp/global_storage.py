#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2024. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
AscendC global var storage class
"""

import threading


class GlobalStorageSingleton:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        with cls._lock:
            if not cls._instance:
                cls._instance = super(GlobalStorageSingleton, cls).__new__(cls, *args, **kwargs)
        return cls._instance

    def __init__(self):
        self.ascendc_compile_debug_config = False
        self.ascendc_dump_disable_compile_options = False
        self.ascendc_debug_compile_options = False
        self.ascendc_enable_sanitizer = False
        self.ascendc_compiler_path = None
        self.ascendc_enable_ccache = False
        self.ascendc_asan_obj_path = {}
        self.ascendc_enable_build_log = False
        self.ascendc_enable_coverage = False
        self.ascendc_build_log_path = None
        self.ascendc_build_log_list = []
        self.ascendc_time_stamp_compile_options = False
        self.ascendc_enable_super_kernel = False
        self.ascendc_sub_super_kernel_params = []
        self.ascendc_sub_super_kernel_type = ""
        self.ascendc_sub_super_kernel_fun_names = {}
        self.ascendc_sub_super_kernel_early_start_set_flag = False
        self.ascendc_sub_super_kernel_early_start_wait_flag = False
        self.ascendc_enable_aicore_exception_restart = False

    def set_variable(self, name, value):
        if hasattr(self, name):
            setattr(self, name, value)
        else:
            raise Exception(f'current varibale not exists, variable name: {name}')

    def get_variable(self, name):
        if hasattr(self, name):
            return getattr(self, name, None)
        else:
            raise Exception(f'current varibale not exists, variable name: {name}')


global_var_storage = GlobalStorageSingleton()