#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
Tiling helper, set and get a fixed tiling
"""
import os
import copy
import json
from typing import Union
from tbe.tvm import deepcopy
from tbe.common.utils.errormgr.error_manager_cube import raise_err_message_cube
from tbe.common.tiling.tiling_global_var_internal_use import KEY_DEVICE_ID
from tbe.common.tiling.tiling_api_internal_use import dict_value_none_deepcopy


class Singleton():
    """
    Singleton base class
    """
    __instance = None

    def __init__(self) -> None:
        """
        init the config path
        """
        self._singleton__tiling = dict()
        self._singleton__tiling_type = "auto_tiling"
        self._singleton__input_params = None
        self._singleton__model_type = "xgboost"
        self._singleton__device_id = None

        # get first device_id number
        env_device_id = os.getenv(KEY_DEVICE_ID, "").strip().split(":")[0]
        if env_device_id.isdecimal():
            self._singleton__device_id = int(env_device_id)

    def __new__(cls, *args, **kw):
        """
        new object
        """
        if not cls.__instance:
            cls.__instance = super(Singleton, cls).__new__(cls, *args, **kw)
        return cls.__instance

    def get_params(self):
        """
        Get tiling input params

        Notice
        ------
        this function is create for auto tune tool to get tiling input params

        Returns
        ----------
        input_params: dict
            set by tiling query or get tiling
        """

        return dict_value_none_deepcopy(self._singleton__input_params)

    def set_params(self, inputs: dict) -> None:
        """
        Set get tiling or tiling query input params

        Parameters
        ----------
        inputs: dict
            build up by schedule

        Notice
        ------
        this function is create for auto tune tool to get tiling input params,
            params set last time should be same to get_tiling inputs, usually
            called under non-tuning_tiling mode by schedule when building
            executable binary file

        """
        self._singleton__input_params = dict_value_none_deepcopy(inputs)

    def get_tiling(self, inputs: dict) -> dict:
        """
        Get the tiling from Singleton object
        Parameters
        ----------

        Notice
        ------
        this function is work under tuning tiling mode together with
            set tiling, input params used is set by set_params last
            time, should be exaclty same to inputs

        some list value given is tvm.expr.Int, so compare use string
            and not original dict

        Returns
        -------
        tiling: dict
            The tiling saved in Singleton object
        """
        _kernel_name = inputs['kernel_name']
        if not isinstance(inputs, dict) or not inputs:
            raise_err_message_cube(
                "when it is tuning tiling mode, illegal current input params is: {}.".format(
                    inputs))
        if not isinstance(inputs, dict) or not self._singleton__input_params:
            raise_err_message_cube(
                "when it is tuning tiling mode, illegal previous input params is: {}.".format(
                    self._singleton__input_params))

        ignore_list = ["reserved_ub", "kernel_name", "op_name", "test_case", \
            "model_type"]
        pre_params = dict()
        cur_params = dict()
        for input_param in self._singleton__input_params:
            if input_param not in ignore_list:
                pre_params[input_param] = self._singleton__input_params[input_param]

        for input_param in inputs:
            if input_param not in ignore_list:
                cur_params[input_param] = inputs[input_param]

        if str(dict(sorted(cur_params.items()))) != str(dict(sorted(pre_params.items()))): 
            raise_err_message_cube(
                "tiling params is changed, previous input is {}, current input is {}.".format(
                    pre_params, cur_params))

        return deepcopy(self._singleton__tiling.get(_kernel_name, None))

    def set_tiling(self, tiling: dict, kernel_name: str = "kernel_name") -> None:
        """
        Set the tiling to private member variable of Singleton object
        Parameters
        ----------
        tiling: dict
            The setting tiling

        Returns
        -------
        """
        type_list = ["tuning_tiling"]
        if self._singleton__tiling_type not in type_list:
            raise_err_message_cube(
                "tiling mode is not tuning tiling, current is {}.".format(
                    self._singleton__tiling_type))

        if isinstance(tiling, dict):
            self._singleton__tiling[kernel_name] = deepcopy(tiling)
        else:
            raise_err_message_cube(
                "the input param is illegal, only support {}, but the param is {}.".format(
                    "dict", type(tiling)))

    def get_tiling_type(self) -> str:
        """
        Get the tiling type from Singleton object
        Parameters
        ----------

        Returns
        -------
        tiling_type: string
            The tiling type saved in Singleton object
        """
        return deepcopy(self._singleton__tiling_type)

    def set_tiling_type(self, tiling_type: str) -> None:
        """
        Set the tiling type to private member variable of Singleton object
        Parameters
        ----------
        tiling_type: string
            The setting tiling type

        Returns
        -------
        """
        if isinstance(tiling_type, str):
            self._singleton__tiling_type = deepcopy(tiling_type)
        else:
            raise_err_message_cube(
                "the input param is illegal, only support {}, but the param is {}.".format(
                    "str", type(tiling_type)))

    def instance_refresh(self, tiling_type: str = None, input_params: dict = None, \
                         tiling_dict: dict = None) -> dict:
        """
        refresh private member variable of Singleton object
        Parameters
        ----------
        tiling_type: string
            The setting tiling type
        input_params:dict
        tiling_dict: tiling dict
        Returns
        -------
        """
        ret_value = dict()
        ret_value["input_params"] = dict_value_none_deepcopy(self._singleton__input_params)
        self._singleton__tiling = deepcopy(tiling_dict)
        self._singleton__tiling_type = deepcopy(tiling_type)
        self._singleton__input_params = dict_value_none_deepcopy(input_params)
        return ret_value

    def get_device_id(self) -> Union[int, None]:
        """Get saved device_id during init

        Parameters
        ----------

        Returns
        -------
        device_id: int or None
            Hardward device index assigned
        """
        return self._singleton__device_id

TILING_INSTANCE = Singleton()
