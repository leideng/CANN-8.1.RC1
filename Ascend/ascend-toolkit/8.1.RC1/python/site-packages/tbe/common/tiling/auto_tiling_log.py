#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
TBE auto_tiling_log
"""
import os
import json
import inspect
from functools import wraps


LOG_LEVEL = 10
LOG_LEN = 900 # max log length is 1024, reserved 124 characters for log head

INFO = "info"
WARN = "warn"
DEBUG = "debug"
ERROR = "error"


def log_wrapper(func):
    @wraps(func)
    def wrapper(self, log_msg):
        log_frame = inspect.currentframe().f_back
        if self.long_log_flag:
            log_frame = inspect.currentframe().f_back.f_back
        line_no = log_frame.f_lineno
        funcname = log_frame.f_code.co_name
        co_filename = log_frame.f_code.co_filename
        filename = os.path.basename(co_filename)
        standard_msg = '[%s:%d][%s] ' % (filename, line_no, funcname)
        if self.use_slog:
            total_log = standard_msg + log_msg
        else:
            total_log = log_msg
        func(self, total_log)
    return wrapper


class AutoTilingLog():
    """
    log for tiling
    """

    def __init__(self):
        """
        init the specific object
        """
        self.use_slog = False
        self.long_log_flag = False
        try:
            from te.utils.AscendLog import LOGGER
            self.slog = LOGGER
            self.use_slog = True
        except ImportError:
            # for ut/st, AscendLog is different path in source and package
            import logging
            self.log = logging.getLogger('auto_tiling')
            self.log.setLevel((int(os.getenv("ASCEND_GLOBAL_LOG_LEVEL", "3")) + 1) * LOG_LEVEL)
    
    def __new__(cls):
        """
        create new object
        """
        if not hasattr(AutoTilingLog, "_instance"):
            AutoTilingLog._instance = object.__new__(cls)
        return AutoTilingLog._instance

    def set_long_log_flag(self, long_log_flag):
        self.long_log_flag = long_log_flag
    
    @log_wrapper
    def info(self, log_msg):
        """
        algorithm: info
        info level log

        parameters
        ----------
        log_msg:str
          info message

        Returns
        ---------
        None
        """
        if self.use_slog:
            self.slog.info(self.slog.module.tbe, log_msg)
        else:
            self.log.info(log_msg)

    @log_wrapper
    def debug(self, log_msg):
        """
        algorithm: debug
        debug level log

        parameters
        ----------
        log_msg:str
          debug message

        Returns
        ---------
        None
        """
        if self.use_slog:
            self.slog.debug(self.slog.module.tbe, log_msg)
        else:
            self.log.debug(log_msg)

    @log_wrapper
    def warn(self, log_msg):
        """
        algorithm: warn
        warn level log

        parameters
        ----------
        log_msg:str
          warn message

        Returns
        ---------
        None
        """
        if self.use_slog:
            self.slog.warn(self.slog.module.tbe, log_msg)
        else:
            self.log.warning(log_msg)

    @log_wrapper
    def error(self, log_msg):
        """
        algorithm: error
        error level log

        parameters
        ----------
        log_msg:str
          error message

        Returns
        ---------
        None
        """
        if self.use_slog:
            self.slog.error(self.slog.module.tbe, log_msg)
        else:
            self.log.error(log_msg)


AUTOTILINGLOG = AutoTilingLog()


def tiling_show_long_log(log_level: str, log_head: str, log_msg):
    """
    Print information longer than 1024 characters
    """
    line_no = inspect.currentframe().f_back.f_lineno
    funcname = inspect.currentframe().f_back.f_code.co_name
    co_filename = inspect.currentframe().f_back.f_code.co_filename
    filename = os.path.basename(co_filename)
    log_file_str = '[%s:%d][%s]' % (filename, line_no, funcname)

    log_limit_len = LOG_LEN - len(log_file_str) - len(log_head)

    log_msg = json.dumps(log_msg, sort_keys=True)
    log_msg_len = (len(log_msg) + LOG_LEN - 1) // LOG_LEN

    auto_tiling_log_object = AutoTilingLog()
    auto_tiling_log_object.set_long_log_flag(True)

    log_dict = {"info": auto_tiling_log_object.info,
                "warn": auto_tiling_log_object.warn,
                "debug": auto_tiling_log_object.debug,
                "error": auto_tiling_log_object.error}

    log_func = log_dict.get(log_level, None)
    if not log_func:
        auto_tiling_log_object.error("{} isn't supported. \
            The supported log levels are info, warn, debug, error".format(log_level))
        return
    for i in range(log_msg_len):
        start, end = i * LOG_LEN, (i + 1) * LOG_LEN
        log_func("{}:{}".format(log_head, log_msg[start:end]))