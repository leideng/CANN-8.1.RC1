#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
from tbe.common.tiling.tiling_global_var_internal_use import BANK_CACHE as internal_BANK_CACHE
from tbe.common.tiling.tiling_query import tiling_query as internal_tiling_query
from tbe.common.tiling.tiling_query import encode_array
from tbe.common.tiling.tiling_api_internal_use import reset_repository as internal_reset_repository
from tbe.common.tiling.tiling_api_internal_use import global_func_flexible_analyzer
from tbe.common.tiling.tiling_api_internal_use import global_func_tiling_analyzer
from tbe.common.tiling.get_tiling_cube import get_tiling as internal_get_tiling
from tbe.common.tiling.tiling_helper import TILING_INSTANCE
from tbe.common.tiling.op_param_encode.params_encoder import SUPPORT_ENCODER_MAP
from tbe.common.tiling.op_param_encode.params_encoder import ParamsEncoder


BANK_CACHE = internal_BANK_CACHE


def tiling_query(a_shape:list, b_shape:list, c_shape:list = None, a_dtype:str = 'float16', \
                 b_dtype:str = 'float16', c_dtype:str = 'float16', mad_dtype:str = 'float16', \
                 padl:int = 0, padr:int = 0, padu:int = 0, padd:int = 0, strideh:int = 1, \
                 stridew:int = 1, strideh_expand:int = 1, stridew_expand:int = 1, \
                 dilationh:int = 1, dilationw:int = 1, group:int = 1, \
                 fused_double_operand_num:int = 0, bias_flag:bool = False, op_tag:str = 'conv2d', \
                 fused_coefficient:list = None, fused_channel_wise:list = None, \
                 padf:int = 0, padb:int = 0, strided:int = 0, \
                 kernel_name:str = "kernel_name") -> dict:
    """
    query the tiling of convolution/convolution 3d from module

    Parameters
    ----------
    a_shape: list
        5D/6D shape information of feature map

    b_shape: list
        5D/6D shape information of filter

    c_shape: list
        5D/6D shape information of output

    a_dtype, b_dtype, c_dtype, mad_dtype: str
        type of data
        0 represent uint8; 1 represent int8;
        2 represent float16; 3 represent float32

    padl, padr, padu, padd, padf, padb: int
        the pad of six direction
        padl, padr = padW
        padu, padd = padH
        padf, padb = padD

    strideh, stridew, strided: int
        the stride of three direction

    dilationh, dilationw: int
        the dilation param of H and W direction of dilation convolution

    strideh_expand, stridew_expand: int
        the param of expansion on H and W direction of a_shape

    group: int
        the param of group convolution

    fused_double_operand_num:
        the param of num of fused double operand vector operator

    bias_flag: bool
        whether there is bias bool value

    op_tag: str
        the tag of operator, see OP_TYPE_DICT

    fused_coefficient: list
        the params of num of fused double operand vector operator

    fused_channel_wise: list
        the params of num of LOA, LOB, LOC in channel direction

    Returns
    -------
    tiling: dict
        the result
    """
    return internal_tiling_query(a_shape, b_shape, c_shape, a_dtype, \
                        b_dtype, c_dtype, mad_dtype, padl, padr, padu, padd, strideh, stridew, \
                        strideh_expand, stridew_expand, dilationh, dilationw, group, fused_double_operand_num, \
                        bias_flag, op_tag, fused_coefficient, fused_channel_wise, padf, padb, strided, kernel_name)


def reset_repository() -> None:
    """
    Reload custom repository

    """
    return internal_reset_repository()


def tiling_analyzer(op_type: str, tuning_flag: int, info_dict: dict) -> list:
    """
    Tiling Analyzer interface on the python side

    Parameters
    ----------
    op_type: str
        the input type of operator
    tuning_flag: int
        the flag of tuning mode.
    info_dict: dict
        the input params
    Returns
    -------
    tiling_space: list
        return the space of tiling
    """
    if op_type in SUPPORT_ENCODER_MAP:
        global_func_analyzer = global_func_flexible_analyzer
        encoder = ParamsEncoder(op_type)
        shape_encode_array = encoder.encode_array(info_dict)
    else:
        global_func_analyzer = global_func_tiling_analyzer
        shape_encode_array = encode_array(info_dict)
    tiling_space = global_func_analyzer(shape_encode_array, tuning_flag)

    return tiling_space


def get_tiling(info_dict: dict) -> dict:
    """
    Get the tiling from module

    Parameters
    ----------
    info_dict: dict
        the params of operator

    Returns
    -------
    tiling : dict
        The result.
    """
    return internal_get_tiling(info_dict)


def input_args_encode(info_dict: dict) -> tuple:
    """
    Get the shape_id and length of vocabulary of shape

    Parameters
    ----------
    info_dict: dict
        the params of operator

    Returns
    -------
    length_shape_vocabulary : number
        the length of shape vocabulary
    shape_id : list
        The encoded shapeID.
    """
    return internal_input_args_encode(info_dict)


def tiling_vocabulary_encode(info_dict: dict) -> tuple:
    """
    Get the tiling vocabulary

    Parameters
    ----------
    info_dict: dict
        the params of operator

    Returns
    -------
    length_tiling_vocabulary: int
        length of tiling vocabulary for all cube
    length_operator_tiling: int
        length of dimention for specified operator tiling
    """
    return internal_tiling_vocabulary_encode(info_dict)


def tiling_validator(info_dict: dict, intermediate_tiling_array: list) -> list:
    """
    Get the mask of specific dimension of tiling

    Parameters
    ----------
    info_dict: dict
        the params of operator
    intermediate_tiling_array: list
        the intermediate tiling array

    Returns
    -------
    index_array : list
        The array store all index for true elet.
    """
    return internal_tiling_validator(info_dict, intermediate_tiling_array)


def convert_tiling_format(info_dict: dict, tiling_index_array: list) -> str:
    """
    Get the mask of specific dimension of tiling

    Parameters
    ----------
    info_dict: dict
        the params of operator
    tiling_index_array: list
        the operator's tiling array which is unsame

    Returns
    -------
    tiling_dict: str
        The array store all index for true elet.
    """
    return internal_convert_tiling_format(info_dict, tiling_index_array)


def instance_refresh(tiling_type:str=None, input_params:dict=None, tiling_dict:dict=None) -> None:
    """
    refresh private member variable of Singleton object

    Parameters
    ----------
    tiling_type: string
        The setting tiling type
    input_params:dict
    tiling_dict: tiling dict
    Returns
    -------
    """
    return TILING_INSTANCE.instance_refresh(tiling_type, input_params, tiling_dict)


def set_tiling_type(tiling_type: str) -> None:
    """
    Set the tiling type to private member variable of Singleton object

    Parameters
    ----------
    tiling_type: string
        The setting tiling type

    Returns
    -------
    """
    return TILING_INSTANCE.set_tiling_type(tiling_type)


def get_tiling_type() -> str:
    """
    Get the tiling type from Singleton object

    Parameters
    ----------

    Returns
    -------
    tiling_type: string
        The tiling type saved in Singleton object
    """
    return TILING_INSTANCE.get_tiling_type()


def set_tiling(tiling: dict, kernel_name: str = "kernel_name") -> None:
    """
    Set the tiling to private member variable of Singleton object

    Parameters
    ----------
    tiling: dict
        The setting tiling

    Returns
    -------
    """
    return TILING_INSTANCE.set_tiling(tiling, kernel_name)


def get_params() -> dict:
    """
    Get tiling input params

    Notice
    ------
    this function is create for auto tune tool to get tiling input params

    Returns
    ----------
    input_params: dict
        set by tiling query or get tiling
    """
    return TILING_INSTANCE.get_params()
