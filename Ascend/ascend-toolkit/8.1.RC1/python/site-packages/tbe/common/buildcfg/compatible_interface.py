#!/usr/bin/env python
# coding: utf-8
# Copyright 2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
parser the config params
"""
from __future__ import absolute_import as _abs
from tbe.tvm._ffi.registry import get_global_func
from tbe.tvm.error_mgr import raise_tbe_python_err, TBE_DEFAULT_PYTHON_ERROR_CODE
from .buildcfg import get_current_build_config
from .buildcfg import set_current_build_config
from .ascend import AscendPassContext
from .global_info import GlobalInfoContainer
from .global_info import NameDict


def get_L1_info(key):
    """get L1 space"""
    if key == "op_L1_space":
        func = get_global_func("cce.get_soc_spec")
        return func("L1_SIZE")
    if key in NameDict:
        if AscendPassContext.get_scope_size() > 0:
            return get_current_build_config(NameDict.get(key))
        return GlobalInfoContainer.global_info.get(key)
    raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, "key[%s] not support." % key)
    return None


def set_L1_info(key, value):
    """set L1 space"""
    ret = True
    if key == "op_L1_space":
        if int(value) >= 0:
            func = get_global_func("cce.set_l1_buffer", True)
            if func:
                ret = func(int(value))
        else:
            func = get_global_func("cce.reset_l1_buffer", True)
            if func:
                ret = func()
    elif key in NameDict:
        ret = set_current_build_config(NameDict.get(key), value)
        GlobalInfoContainer.global_info[key] = value
    else:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, "key[%s] not support." % key)
    return ret

def get_UB_info(key):
    """get UB space"""
    if key == "op_UB_space":
        func = get_global_func("cce.get_soc_spec")
        return func("UB_SIZE")
    raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, "key[%s] not support." % key)
    return None


def set_UB_info(key, value):
    """set UB space"""
    ret = True
    if key == "op_UB_space":
        if int(value) >= 0:
            func = get_global_func("cce.set_ub_buffer", True)
            if func:
                ret = func(int(value))
        else:
            func = get_global_func("cce.reset_ub_buffer", True)
            if func:
                ret = func()
    else:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, "key[%s] not support." % key)
    return ret
