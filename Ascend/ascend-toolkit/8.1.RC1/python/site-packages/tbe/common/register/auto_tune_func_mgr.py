#!/usr/bin/env python
# coding: utf-8
# Copyright 2019-2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

"""
auto tune function manager
"""
import functools

_tune_space = {}
_tune_param_check = {}


def register_tune_space(op_type):
    """
    Parameters
    ----------
    op_type : string
        op type

    Returns
    -------
    decorator : decorator
        decorator to set fusion build config
    """

    if op_type is None:
        raise RuntimeError("register tune space failed, op_type is none")

    def decorator(func):
        """
        Parameters
        ----------
        func : function
            func
        Returns
        -------
        wrapper : wrapper
            wrapper to exce func
        """

        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            """
            Parameters
            ----------
            args : list
            kwargs : dict
            Returns
            -------
            wrapper : func
                func to exce func
            """

            return func(*args, **kwargs)
        _tune_space[op_type] = wrapper
        return wrapper
    return decorator


def get_tune_space(op_type):
    """
    :return:
    """

    if op_type is None:
        raise RuntimeError("register tune space failed, op_type is none")
    return _tune_space.get(op_type)


def register_tune_param_check_supported(op_type):
    """
    register tune param check supported

    Parameters
    ----------
    op_type : string
        op type

    Returns
    -------
    decorator : decorator
        decorator to set fusion build config
    """

    if op_type is None:
        raise RuntimeError("register tune param check supported failed, op_type is none")

    def decorator(func):
        """
        Parameters
        ----------
        func : function
            func
        Returns
        -------
        wrapper : wrapper
            wrapper to exce func
        """

        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            """
            Parameters
            ----------
            args : list
            kwargs : dict
            Returns
            -------
            wrapper : func
                func to exce func
            """

            return func(*args, **kwargs)
        _tune_param_check[op_type] = wrapper
        return wrapper
    return decorator


def get_tune_param_check_supported(op_type):
    """
    :return:
    """

    if op_type is None:
        raise RuntimeError("register tune param check supported failed, op_type is none")
    return _tune_param_check.get(op_type)
