#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
static rl bank
"""
import math
from functools import reduce
from typing import List
from typing import Dict
from typing import NoReturn

from tbe import tvm
from tbe.common.utils import log
from tbe.dsl.base import operation
from tbe.dsl.unify_schedule import util
from tbe.common.context import op_context
from tbe.common.rl_bank import search_bank
from tbe.common.rl_bank.withdraw import gen_sch_by_cheque

RL_STATIC_KERNEL_KEY = 0xffffffffffffffff


def get_dtype_size(dtype):
    """
    get_dtype_size
    :param dtype:
    :return:
    """
    if dtype in ["bool", "uint1"]:
        bit_size = 8
    else:
        digit_list = list(filter(str.isdigit, dtype))
        bit_size = int("".join(digit_list))
    return bit_size // 8


def add_workspace_info(workspace_tensor):
    """
    add workspace info
    :param workspace_tensor:
    :return:
    """
    workspace_num = len(workspace_tensor)
    workspace_size = []
    workspace_type = []
    if workspace_num > 0:
        for tensor in workspace_tensor:
            tensor_shape = util.shape_to_list(tensor.shape)
            block_size = 32 // get_dtype_size(tensor.dtype)
            align_tensor_shape = tensor_shape[:]
            align_tensor_shape[-1] = math.ceil(align_tensor_shape[-1] / block_size) * block_size
            shape_size = reduce(lambda x, y: x * y, align_tensor_shape)
            workspace_size.append(get_dtype_size(tensor.dtype) * shape_size)
            workspace_type.append(0)
        workspace_dict_in_json = {
            "num": workspace_num,
            "size": workspace_size,
            "type": workspace_type
        }
        op_context.get_context().add_build_json_result("workspace", workspace_dict_in_json)


class StaticRLBank:
    """
    static rl bank, to gerenate static schedule
    """
    def __init__(self,
                 output_tensors: List,
                 op_info: Dict = None,
                 sync_tensor: List = None) -> NoReturn:
        self._output_tensors = output_tensors
        self._op_info = op_info
        self._sync_tensor = sync_tensor

    def query_static_rl_bank(self) -> [bool, object]:
        """
        query static rl bank
        :return:
        """
        # debug info
        op_info_dfs_tensor_list = []
        if self._op_info is not None:
            op_info_dfs_tensor_list = self._op_info.get("dfs_tensor_list", "")
        context_ori, op_infos = search_bank.get_op_context_infos()
        op_name = op_infos.get("op_name", "")
        kernel_name = op_infos.get("kernel_name", "")
        log.debug("Auto search bank info: query dynamic rl bank begin, op_name: %s, kernel_name: %s,"
                  "out_tensors: %s, op_info_dfs_tensor_list: %s.",
                  op_name, kernel_name, self._output_tensors, op_info_dfs_tensor_list)

        cheque = search_bank.get_cheque(self._output_tensors, op_info=self._op_info,
                                        op_infos=op_infos, context=context_ori)
        if not cheque:
            log.debug("Auto search bank info: op_name: %s, kernel_name: %s, get cheque end, cheque is %s.",
                      op_name, kernel_name, cheque)
            return False, []

        # generate sch by cheque
        try:
            get_obj_status, rl_schedule_obj = gen_sch_by_cheque(self._output_tensors, cheque, self._sync_tensor)
        except Exception as excp:
            get_obj_status = False
            rl_schedule_obj = None
            log.warn("Auto search exception occur: can not gen sch by cheque, excp_msg: %s.", repr(excp))
        finally:
            pass

        log.debug("Auto search bank info: transform the cheque to sch: %s.", get_obj_status)

        if get_obj_status and isinstance(rl_schedule_obj, tvm.Schedule):
            with operation.schedule() as sch_context:
                rl_schedule_obj.tiling_key = RL_STATIC_KERNEL_KEY
                search_bank.add_sch_additional_entry(rl_schedule_obj, "original_outs",
                                                     rl_schedule_obj.cce_special.get("orign_out_tensor"))
                search_bank.add_sch_additional_entry(rl_schedule_obj, "real_outs",
                                                     rl_schedule_obj.cce_special.get("real_out_tensor"))
                search_bank.add_sch_additional_entry(rl_schedule_obj, "context", sch_context)

            # calc workspace_size and add build_json
            workspace_tensor = rl_schedule_obj.cce_special.get("tensor_list")
            add_workspace_info(workspace_tensor)
            del rl_schedule_obj.cce_special
            # add compile arg
            operation.add_build_arg("double_buffer_non_reuse", True)

            return get_obj_status, [rl_schedule_obj]

        return get_obj_status, []
