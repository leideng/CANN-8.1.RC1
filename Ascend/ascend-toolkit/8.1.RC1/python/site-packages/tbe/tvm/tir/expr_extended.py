#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""extended Expr"""

import tvm._ffi
from . import _ffi_api
from .expr import PrimExprWithOp


@tvm._ffi.register_object("tir.Sparse")
class Sparse(PrimExprWithOp):
    """Sparse node.

    Parameters
    ----------
    src : list of Expr
        The source expression.

    rdom : list of IterVar
        The iteration domain

    condition : Expr
        The sparse condition.

    value_index : int
        The value index.
    """
    def __init__(self, src, rdom, condition, out_of_bound_check, default, span=None):
        self.__init_handle_by_constructor__(
            _ffi_api.Sparse, src, rdom, condition, out_of_bound_check, default, span)


@tvm._ffi.register_object("tir.SortExpr")
class SortExpr(PrimExprWithOp):
    """Construct a sort compute.

    Parameters
    ----------
    tensor : Expr
        sort tensor list

    axis : IterVar
        sort axis.

    index : IterVar
        index axis

    order: str
        sort order, in ["ascend", "descend"]

    cond: Expr
        sort condition

    sort_type: Integer
        sort type, 0 means sort, 1 means merge_sort, 2 means topk, 3 means index sort
        and 4 means index merge sort

    k: Expr
        topk number

    Returns
    -------
    node : Node
    The tvm.expr.SortExpr node
    """
    SORT = 0
    MERGE_SORT = 1
    TOPK = 2
    INDEX_SORT = 3
    INDEX_MERGE_SORT = 4

    def __init__(self, tensor, axis, index, order, cond, sort_type, k, span=None):
        self.__init_handle_by_constructor__(
            _ffi_api.SortExpr, tensor, axis, index, order, cond, sort_type, None, k, None, span)
