#!/usr/bin/env python
# coding: utf-8
# Copyright (c) Huawei Technologies Co., Ltd. 2022. All rights reserved.
from tvm.runtime import Object
from tvm._ffi import register_func, register_object
from . import _ffi_api


def register_tile_func(func_name, f=None, override=False):
    """
    The Register for tile func, available for user custom tile func.
    """

    def decorator(myfunc):
        def wrapper(stmt, tile_api):
            """
            Before executing func, initialize the tik instance and tensor.
            After the func is executed, substitute tik buffer by original buffer.

            Parameters
            ----------
            stmt: the original stmt
            tile_api: the tile api including tilefy info

            Returns
            ----------
            new_stmt: the stmt processed by func
            """
            tile_api.init()
            new_stmt = myfunc(stmt, tile_api)
            new_stmt = tile_api.exit(new_stmt)
            return new_stmt

        register_func(func_name, f, override)(wrapper)
        return wrapper

    return decorator


@register_object
class TileAPI(Object):
    """
    The API which provides the tile_ir base function.
    """
    __tik_instance = None
    __tik_tensor = []

    def init(self):
        """
        Init the tik env.
        """
        from tbe import tik
        self.__tik_instance = tik.Tik()
        buffer_var = self.get_buffer_var()
        buffer_shape = self.get_buffer_shape()
        buffer_scope = self.get_buffer_scope()
        buffer_type = self.get_buffer_type()
        buffer_num = len(buffer_var)
        if not (buffer_num == len(buffer_type) and buffer_num == len(buffer_shape)):
            raise RuntimeError('The number of buffer_var, buffer_type, buffer_shape should be same!')
        for i in range(buffer_num):
            shape = []
            for s in buffer_shape[i]:
                shape.append(s if isinstance(s, int) else self.__tik_instance.Scalar(dtype="int32", name="any"))
            self.__tik_tensor.append(
                self.__tik_instance.Tensor(buffer_type[i].value,
                                           shape,
                                           buffer_scope[i].value,
                                           buffer_var[i].name.replace(".", "_")))

    def exit(self, stmt):
        """
        Receive the original stmt and return the new_stmt whose tik_buffer was substituted by the original buffer_var.

        Parameters
        ----------
        stmt: the original stmt

        Returns
        ----------
        new_stmt: the stmt whose tik_buffer was substituted by the original buffer_var
        """
        buffer_var = self.get_buffer_var()
        buffer_num = len(buffer_var)
        if not buffer_num == len(self.__tik_tensor):
            raise RuntimeError('The number of buffer_var, self.__tik_tensor should be same!')
        buf2buf = {}
        for i in range(buffer_num):
            buf2buf[self.__tik_tensor[i].buffer.data] = buffer_var[i]
        new_stmt = _ffi_api.TileAPISubstituteSymbolBuffer(self, stmt, buf2buf)
        return new_stmt

    def get_tik_instance(self):
        """
        Get the tik instance.
        """
        return self.__tik_instance

    def get_tik_tensor(self):
        """
        Get tik tensor.
        """
        return self.__tik_tensor

    def get_inner_loop_var(self):
        """
        Get the inner loop var.
        """
        return _ffi_api.TileAPIGetInnerLoopVar(self)

    def get_inner_loop_extent(self):
        """
        Get the inner loop extent.
        """
        return _ffi_api.TileAPIGetInnerLoopExtent(self)

    def get_buffer_var(self):
        """
        Get the buffer var.
        """
        return _ffi_api.TileAPIGetBufferVar(self)

    def get_buffer_shape(self):
        """
        Get the buffer shape.
        """
        return _ffi_api.TileAPIGetBufferShape(self)

    def get_buffer_scope(self):
        """
        Get the buffer scope.
        """
        return _ffi_api.TileAPIGetBufferScope(self)

    def get_buffer_type(self):
        """
        Get the buffer type.
        """
        return _ffi_api.TileAPIGetBufferType(self)

    def get_buffer_type_byte_size(self):
        """
        Get the buffer type byte size.
        """
        return _ffi_api.TileAPIGetBufferTypeByteSize(self)

    def get_operand_idx(self):
        """
        Get the operand idx.
        """
        return _ffi_api.TileAPIGetOperandIdx(self)

    def get_operand_offset(self):
        """
        Get the operand offset.
        """
        return _ffi_api.TileAPIGetOperandOffset(self)
