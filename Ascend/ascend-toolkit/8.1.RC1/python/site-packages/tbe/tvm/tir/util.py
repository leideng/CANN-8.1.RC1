#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Wrapping existing extended utils."""
# pylint: disable=invalid-name
from . import _ffi_api


def Simplify(*args):
    """Run arithmetic simplifications on the statements and expressions.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.Simplify(*args)  # type: ignore


def CanonicalSimplify(*args):
    """Run arithmetic canonical simplifications on the statements and expressions.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.CanonicalSimplify(*args)  # type: ignore


def IsTikHybrid(*args):
    """Run arithmetic canonical simplifications on the statements and expressions.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.IsTikHybrid(*args)  # type: ignore


def UsesVar(expr, var):
    """tell whether expr use var

    Returns
    -------
    bool: the result
    """
    return _ffi_api.UsesVar(expr, var)


def EmitInsnAttr(attr_map_str_expr):
    """make EmitInsnAttr using attr_map_str_expr

    Returns
    -------
    void
    """
    return _ffi_api.EmitInsnAttr(attr_map_str_expr)


def location_init():
    """location_init:
     Save loc.json file which record cce file line to python op file line

    Returns
    -------
    void
    """
    return _ffi_api._LocationInit()

# space value is a tuple: fixed_tensor_size and multiplier_of_op 
# for example, (520, 2) means need 520B space and 2 Survival Node
space_node_v220 = {
    'add_b64_vector': (520, 2),
    'sub_b64_vector': (520, 2),
    'max_b64_vector': (0, 5),
    'min_b64_vector': (0, 5),
    'abs_b64_vector': (520, 5),
    'vcmpv_gt_b64_vector': (0, 5),
    'vcmpv_ge_b64_vector': (0, 5),
    'vcmpv_lt_b64_vector': (0, 5),
    'vcmpv_le_b64_vector': (0, 5),
    'vcmpv_eq_b64_vector': (0, 3),
    'vcmpv_ne_b64_vector': (0, 3),
}


def get_extra_tensor(intrinsic_name, dtype, compute_method, soc_version):
    if dtype.lower() in ('int64', 'uint64'):
        dtype = 'b64'
    elif dtype.lower() in ('float32', 'int32', 'uint32'):
        dtype = 'b32'
    elif dtype.lower() in ('float16', 'int16', 'uint16'):
        dtype = 'b16'
    key = "_".join([intrinsic_name, dtype, compute_method])
    key = key.lower()
    if soc_version in ('Ascend910B1', 'Ascend910B2', 'Ascend910B3', 'Ascend910B4', 'Ascend910B4-1'):
        return space_node_v220.get(key, (0, 0))  # if not find, return default value(0, 0)
    return (0, 0)
