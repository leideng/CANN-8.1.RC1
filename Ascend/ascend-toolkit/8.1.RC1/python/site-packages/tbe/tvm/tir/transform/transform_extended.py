#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Wrapping existing extended transformations."""
# pylint: disable=invalid-name
import json
import os
import tvm

from . import _ffi_api


def InjectSocVersion():
    """Inject soc version into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectSocVersion()  # type: ignore


def ChangeL1FusionDataFlow():
    """change l1 fusion data flow into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ChangeL1FusionDataFlow()  # type: ignore


def RemapBufferAddress():
    """remap buffer address into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RemapBufferAddress()  # type: ignore


def PragmaPropagation():
    """pragma propagation.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.PragmaPropagation()  # type: ignore


def BranchMotion():
    """branch motion.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.BranchMotion()  # type: ignore


def RelocateRealize():
    """Emit insn instruction into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RelocateRealize()  # type: ignore


def ClearTailAddr():
    """Insert stmt of value at the end of input tensor into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ClearTailAddr()  # type: ignore


def EmitInsn():
    """Emit insn instruction into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.EmitInsn()  # type: ignore


def SetAutoAtomic():
    """Set atomic automatically into stmt according to build config
    Returns
    -------
    fpass :  tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SetAutoAtomic()


def StorageRewriteCCE():
    """Allocate buffer address.
    Returns
    ------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.StorageRewriteCCE()  # type: ignore


def AutoFuseBuffer():
    """Fuse buffer for cce.
    Returns
    ------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.AutoFuseBuffer()  # type: ignore


def SetCacheMode():
    """Set cache mode
    Returns
    ------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SetCacheMode()  # type: ignore


def InjectAccessPtrMSG():
    """Append stride message for tvm_access_ptr.
    Returns
    ------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectAccessPtrMSG()  # type: ignore


def RemoveAccessPtrMSG():
    """remove stride message for tvm_access_ptr.
    Returns
    ------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RemoveAccessPtrMSG()  # type: ignore


def InjectSync():
    """Inject synchronization instruction into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectSync()  # type: ignore


def ShiftBlockAccess():
    """Inject shift for block access.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ShiftBlockAccess()  # type: ignore


def InjectPipe():
    """Insert a pipe label into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectPipe()  # type: ignore


def SubstituteMoveAlign():
    """substitute common dma to move align.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SubstituteMoveAlign()


def GmAddrPrompt():
    """Emit insn instruction into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.GmAddrPrompt()  # type: ignore


def PrintIR(prefix="", simple_mode=True):
    """Print IR for debug.

    Parameters
    ----------
    prefix: string
        sentence print before IR.

    simple_mode: Bool
        whether print simple mode

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    @tvm.transform.module_pass(opt_level=0)
    def print_func(mod, ctx):
        if prefix != "":
            print(prefix)
        tvm.ir._ffi_api.PrintIRMod(mod, simple_mode)
        return mod

    return print_func


def SaveJson(file_path="."):
    """Save Json for debug.

    Parameters
    ----------
    file_path: string
        the directory that the json file should be put.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    @tvm.transform.module_pass(opt_level=0)
    def save_json(mod, ctx):
        data = tvm.ir.save_json(mod)
        try:
            current_var_name = str(mod.get_global_vars()[0].name_hint)
            file_name = os.path.realpath(
                os.path.join(file_path, current_var_name + ".json"))
            stream = open(file_name, "w")
            stream.write(data)
            stream.close()
        except IOError:
            print("file open failed %s" % file_name)
        return mod

    return save_json


def LoadJson(file_name="default.json"):
    """Load Json for debug.

    Parameters
    ----------
    file_name: string
        json file name.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    @tvm.transform.module_pass(opt_level=0)
    def load_json(mod, ctx):
        new_mod = mod
        try:
            stream = open(file_name, "r")
            new_mod = tvm.ir.load_json(json.dumps(json.load(stream)))
            stream.close()
        except IOError:
            print("file open failed %s" % file_name)
        return new_mod

    return load_json


def FullySplitLoopPartition(optimize_floormod_partition: bool = True):
    """Split for loop partition into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FullySplitLoopPartition(optimize_floormod_partition)


def ReorderProcess():
    """Reorder process into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ReorderProcess()


def GMConflictElimination(group: int = 4):
    """GM Conflict Elimination for RNN.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.GMConflictElimination(group)


def InjectPipeBuffer():
    """inject pipe buffer into stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectPipeBuffer()


def FoldEmitInsnAttr():
    """fold emit_insn_attr pragma to emit_insn node.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FoldEmitInsnAttr()


def SparseAccessTransform():
    """Transform sparse array access from the form with select to the form without select.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SparseAccessTransform()


def ReuseBuf():
    """Identify reused buffer.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ReuseBuf()


def InjectGroupCoproc():
    """inject group_coproc_scope into stmt..

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectGroupCoproc()  # type: ignore


def SequenceSprInsn():
    """Sequence Spr Insn.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SequenceSprInsn()


def DeSequenceSprInsn():
    """DeSequence Spr Insn.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.DeSequenceSprInsn()


def DeadCodeElimination():
    """Dead Code Elimination.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.DeadCodeElimination()


def CanonicalSimplify():
    """Canonical Simplify.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.CanonicalSimplify()


def FoldEmitInsnAttr():
    """Fold EmitInsn Attr.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FoldEmitInsnAttr()


def SetSPROptimizer():
    """Set SPR Optimizer.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SetSPROptimizer()


def HoistKernelInvariantVar():
    """Hoist Kernel Invariant Var.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.HoistKernelInvariantVar()


def ReuseCoAxisBuffer():
    """Reuse Co Axis Buffer.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ReuseCoAxisBuffer()


def SplitCoproc():
    """Split Coproc.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SplitCoproc()


def RemoveRedundantRegMov():
    """Remove Redundant Reg Mov.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RemoveRedundantRegMov()


def EnableVectorCore():
    """Enable Vector Core.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.EnableVectorCore()


def RemoveInvalidLoop():
    """Remove Invalid Loop

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RemoveInvalidLoop()


def RemoveDuplicatesInLoad():
    """Remove Duplicates InLoad

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.RemoveDuplicatesInLoad()


def SubstituteRunOnceDBVar():
    """Substitute Run Once DB Var

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SubstituteRunOnceDBVar()


def ConstantAllocate():
    """Constant Allocate

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ConstantAllocate()


def TranslateToScalarExpr():
    """Translate To ScalarExpr

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.TranslateToScalarExpr()


def MergeSameIfCondition():
    """Merge Same If Condition

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MergeSameIfCondition()


def DataTypeChecker():
    """Data Type Checker

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.DataTypeChecker()


def SinglePointManager():
    """SinglePoint Manager

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SinglePointManager()


def ExprSplit():
    """Expr Split.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ExprSplit()


def ExtractLetStmt():
    """Extract Let Stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ExtractLetStmt()


def FissionLoop():
    """Fission Loop
    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FissionLoop()


def InjectStrideInfoIntoForLoop():
    """Inject Stride Info Into For Loop.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectStrideInfoIntoForLoop()


def OptimizeDMA():
    """Optimize DMA

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.OptimizeDMA()


def SubstituteInstr():
    """Substitute Instr

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SubstituteInstr()


def MarkScalarCoreType():
    """Mark Scalar Core Type

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MarkScalarCoreType()


def SplitCoreCode():
    """split one stmt to aic and aiv stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.SplitCoreCode()


def JumpInstructionElimination():
    """Jump Instruction Elimination

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.JumpInstructionElimination()


def DeviceMark():
    """Device Mark

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.DeviceMark()


def ConvertFloorDivToTruncDiv():
    """Convert FloorDiv To TruncDiv

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ConvertFloorDivToTruncDiv()


def MultiCoreReconstruct():
    """MultiCore Reconstruct

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MultiCoreReconstruct()


def BuildVirtualCore():
    """Build Virtual Core

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.BuildVirtualCore()


def RemoveInvalidLoop():
    """Remove Invalid Loop.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.RemoveInvalidLoop()


def ExtractExtent():
    """Extract Extent.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.ExtractExtent()


def PartitionSpecifiedRange():
    """Partition Specified Range.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.PartitionSpecifiedRange()


def Select2If():
    """Substitute select with if

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.Select2If()


def EliminateBranch():
    """Eliminate 'if' and update for->ext by condition constraint.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.EliminateBranch()


def InjectValidator():
    """Make emit_insn input IR valid.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.InjectValidator()


def ExtractComplexExpr():
    """Extract Complex Expr

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.ExtractComplexExpr()


def LoopUnswitch(loose_mode: bool):
    """Loop Unswitch

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.LoopUnswitch(loose_mode)


def OptimizeSetIntrin():
    """Optimize Set Intrin

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.OptimizeSetIntrin()


def EnableTempBufferDb():
    """enable tempo buffer to open db

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.EnableTempBufferDb()


def AdjustExtent():
    """Adjust the size of extent to standard.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.AdjustExtent()


def Int64Prompt():
    """Change the type of offset from int32 to int 64

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.Int64Prompt()


def TikDynamicShapeAllocMem():
    """storage rewrite pass for Tik dynamic shape.
    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.TikDynamicShapeAllocMem()


def DebugTikPreprocess():
    """preprocess pass for TIK debug.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.DebugTikPreprocess()


def ConstantFolding():
    """preprocess pass for TIK debug.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.ConstantFolding()


def TikDoubleBufferSupport():
    """
    DoubleBuffer pass for TIK.
    """
    return _ffi_api.TikDoubleBufferSupport()


def InjectBufferIndex(*args):
    """inject index for buffer

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectBufferIndex(*args)


def VerifyArgs(sch, args):
    """Verify Args

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.VerifyArgs(sch, args)


def StoreResource(sch):
    """Store schedule in c
    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.StoreResource(sch)


def ClearResource():
    """Clear schedule store in c

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.ClearResource()


def GetSchedule(index):
    """Get sub kernel schedule

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.GetSchedule(index)


def SetRandomKernelName(vector_random_kernel_name, cube_random_kernel_name, bin_path):
    """Set Random Kernel Name

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """

    return _ffi_api.SetRandomKernelName(vector_random_kernel_name, cube_random_kernel_name, bin_path)


def CountVar(stmt):
    """ count var int stmt

    Returns
    --------
    nums: int
        var nums int stmt
    """
    return _ffi_api.CountVar(stmt)


def MarkFragmentedStorage():
    """Mark Fragmented Storage

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MarkFragmentedStorage()


def ThreadMotion():
    """Thread motion

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ThreadMotion()


def DeduceOpPlatform():
    """Deduce op platform

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.DeduceOpPlatform()


def GetCurrentSpan():
    """Thread motion

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.GetCurrentSpan()


def ClearCurrentSpan():
    """Deduce op platform

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.ClearCurrentSpan()


def InjectMultiCoreSync():
    return _ffi_api.InjectMultiCoreSync()


def InjectDeterministicAnalysis():
    """inject deterministic analysis

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectDeterministicAnalysis()


def PackIntrinArgConfig():
    """Pack Intrin Arg Config

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.PackIntrinArgConfig()


def AlignLeafIterVars():
    """Align Leaf IterVars

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.AlignLeafIterVars()


def TransformReverseSchedule():
    """Transform Reverse Schedule

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.TransformReverseSchedule()


def BindAxes(sch, stmt):
    """Transform Reverse Schedule

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.BindAxes(sch, stmt)


def InsertCheckInvalidAccessOfDDR():
    """Insert Check Invalid Access Of DDR

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InsertCheckInvalidAccessOfDDR()


def EvaluateExternVar():
    """evaluate extern var for debug

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.EvaluateExternVar()


def NormalizeIR():
    """Normalize IR stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.NormalizeIR()  # type: ignore


def Vectorize():
    """Vectorize the stmt for vf.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.Vectorize()  # type: ignore


def MarkVF():
    """Mark vf in stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MarkVF()  # type: ignore


def FuseLoopInVF():
    """Fuse loop in vf.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FuseLoopInVF()  # type: ignore


def MappingInstr():
    """Mapping instruction for vf.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.MappingInstr()  # type: ignore


def CanonicalizeVF():
    """Canonicalize vf in stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.CanonicalizeVF()  # type: ignore


def FuseVF():
    """Fuse vf in stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.FuseVF()  # type: ignore


def OptimizeVF():
    """Optimize vf in stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.OptimizeVF()  # type: ignore


def GenerateVF():
    """Generate vf in stmt.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.GenerateVF()  # type: ignore


def InjectVFSync():
    """inject vf sync.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.InjectVFSync()  # type: ignore


def MixPipelineOptimize():
    """Open workspace double buffer for pad fusion

    Returns
    -------
    fpass : tvm.transform.Pass
        Thre Result pass
    """
    return _ffi_api.MixPipelineOptimize() # type: ignore


def OutlineVF():
    """Outline simt and simd func.

    Returns
    -------
    fpass : tvm.transform.Pass
        The result pass
    """
    return _ffi_api.OutlineVF()  # type: ignore
