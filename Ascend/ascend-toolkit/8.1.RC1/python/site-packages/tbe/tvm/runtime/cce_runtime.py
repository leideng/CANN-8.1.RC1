#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
from __future__ import absolute_import as _abs

import hashlib
import json
import os
import stat
import threading

import numpy as np
from tvm.ir import register_intrin_lowering

from .._ffi.registry import register_func
from ..contrib import ccec
from ..contrib import utils
from ..error_mgr import raise_tbe_python_err, TBE_DEFAULT_PYTHON_ERROR_CODE
from ..tir.op import call_extern
from ..tir.op_extended import call_cce_pure_intrin

# def the pipe line dict
PIPELINES = {19: "PIPE_MTE3", 18: "PIPE_MTE2", 11: "PIPE_FIX", 10: "PIPE_ALL", 9: "PIPE_V2",
             8: 'PIPE_MTE5', 7: 'PIPE_MTE4', 6: "PIPE_MTE3", 5: "PIPE_MTE2", 4: "PIPE_MTE1",
             3: "PIPE_M", 2: "PIPE_V", 1: "PIPE_S"}
EVENTS = ["EVENT_ID0", "EVENT_ID1", "EVENT_ID2", "EVENT_ID3"]
LOCK_CREATE_FILE = threading.Lock()

# save tik gm tensor whether is workspace in to a list
TIK_WORKSPACE_SIZE_LIST = threading.local()
TIK_WORKSPACE_SIZE_LIST.local_list = []

# Example: pylint: disable=invalid-name
# save tik gm tensor whether is atomic add in to a list
TIK_ATOMIC_ADD_LIST = threading.local()
TIK_ATOMIC_ADD_LIST.local_list = []

# save tbe gm tensor whether is workspace in to a list
TBE_WORKSPACE_SIZE_LIST = threading.local()
TBE_WORKSPACE_SIZE_LIST.local_list = []
TBE_WORKSPACE_IND_LIST = threading.local()
TBE_WORKSPACE_IND_LIST.local_list = []
TBE_ATUO_ATOMIC_IND_LIST = threading.local()
TBE_ATUO_ATOMIC_IND_LIST.local_list = []
MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST = threading.local()
MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST.local_list = []
MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST.params_added = False

# save tik global tensor name, size to list
TIK_GLOBAL_TENSOR_LIST = threading.local()
TIK_GLOBAL_TENSOR_LIST.local_list = []
# save stamp tensor info
TIK_MEM_STAMP_TENSOR_LIST = threading.local()
TIK_MEM_STAMP_TENSOR_LIST.local_list = []


def coproc_sync(tvm_cce_op):
    """
    coproc sync
    """
    pipe = "PIPE_ALL" if not tvm_cce_op.args else PIPELINES.get(tvm_cce_op.args[0].value)
    cce_print_params = call_cce_pure_intrin("int32", "tvm_cce_string_print", pipe)
    return call_extern("int32", "pipe_barrier", cce_print_params)


register_intrin_lowering(
    "cce.coproc_sync", target="cce", f=coproc_sync, level=99)


def coproc_dep_push(tvm_cce_op):
    """
    coproc deep push
    """
    args = [i.value for i in tvm_cce_op.args]
    cce_print_params = call_cce_pure_intrin("int32", "tvm_cce_string_print",
                                            PIPELINES.get(args[0]),
                                            PIPELINES.get(args[1]), EVENTS[args[2]])
    return call_extern("int32", "set_flag", cce_print_params)


register_intrin_lowering("cce.coproc_dep_push",
                         target="cce", f=coproc_dep_push, level=99)


def coproc_dep_pop(tvm_cce_op):
    """
    coproc deep pop
    """
    args = [i.value for i in tvm_cce_op.args]
    cce_print_params = call_cce_pure_intrin("int32", "tvm_cce_string_print",
                                            PIPELINES.get(args[0]),
                                            PIPELINES.get(args[1]), EVENTS[args[2]])
    return call_extern("int32", "wait_flag", cce_print_params)


register_intrin_lowering("cce.coproc_dep_pop",
                         target="cce", f=coproc_dep_pop, level=99)


# Example: pylint: disable=no-member
@register_func
def tvm_callback_create_tmp_dir():
    """
    create tmp dir
    """
    return utils.mk_tmpdir()


# Example: pylint: disable=no-member, too-many-boolean-expressions
def remove_temp_dir(dirpath):
    """
    :param dirpath: the temp_dir path
    :return:
    """
    dirpath = os.path.realpath(dirpath)
    # deal with soft links for real path like:os.path.realpathrealpath('/tmp')
    if dirpath.startswith('/tmp') or dirpath.startswith('/var/tmp') \
            or dirpath.startswith('/usr/tmp') \
            or dirpath.startswith(os.path.realpath('/tmp')) \
            or dirpath.startswith(os.path.realpath('/var/tmp')) \
            or dirpath.startswith(os.path.realpath('/usr/tmp')):
        utils.rm_tmpdir(dirpath + "/")


@register_func
def tvm_callback_remove_tmp_dir(dirpath):
    """
    remove tmp dir
    """
    remove_temp_dir(dirpath)


# Example: pylint: disable=useless-object-inheritance,too-few-public-methods
class CceFlag(object):
    """
    CceFlag
    """
    BatchBindOnly = False


@register_func
def tvm_callback_get_cce_output_dir():
    """
    get cce output directory
    """
    from tbe.common.platform.platform_info import KernelName
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    path = os.path.join(ccec.current_build_config().get(
        kernel_meta_parent_dir), "kernel_meta")
    if ccec.current_build_config().get(build_fatbin):
        path = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                            "kernel_meta", KernelName.get_kernel_name())
    if path[-1] != '/':
        path += '/'
    return path


@register_func
def tvm_callback_mkdir(dir_path):
    """
    create directory if not exist
    """
    if os.path.exists(dir_path) and not os.path.isdir(dir_path):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "The output directory specified should be a directory, " +
                             "but now is a file")

    if dir_path[-1] != '/':
        dir_path += '/'
    with LOCK_CREATE_FILE:
        if not os.path.exists(dir_path):
            try:
                os.makedirs(dir_path, stat.S_IRWXU +
                            stat.S_IRGRP + stat.S_IXGRP, True)
            except OSError as err:
                raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, err)


def make_output_dir(output_dir, dirpath):
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir, stat.S_IRWXU + stat.S_IRGRP + stat.S_IXGRP)
        except OSError as err:
            # 17, OSError: [Errno 17] File exists
            if err.errno == 17:
                pass
            # 2, No such file or directory
            elif err.errno == 2:
                remove_temp_dir(dirpath)
                raise_tbe_python_err(
                    TBE_DEFAULT_PYTHON_ERROR_CODE, "Invalid directory")
            else:
                remove_temp_dir(dirpath)
                raise_tbe_python_err(
                    TBE_DEFAULT_PYTHON_ERROR_CODE, "Invalid directory")
    if not os.access(output_dir, os.W_OK | os.X_OK):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             ("directory is not writable" + output_dir))


def update_kernel_name_by_enable_vector_core(kernel_name):
    from tbe.common.platform.platform_info import get_soc_spec
    from te.platform import cce_params
    core_type = get_soc_spec("AICORE_TYPE")
    if core_type == "AiCore":
        kernel_name += cce_params.MIX_AIC_SUFFIX
    elif core_type == "VectorCore":
        kernel_name += cce_params.MIX_AIV_SUFFIX
    return kernel_name


# Example: pylint: disable=too-many-branches
# 'pylint: disable=too-many-locals
@register_func
def tvm_callback_cce_compile(compile_param, additional_info, json_info=None, dump_superkernel_to_h=False):
    """
    cce compile
    """
    from tbe.common.platform.platform_info import KernelName
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level, op_debug_config
    from tbe.common.buildcfg.buildcfg_mapping import enable_vector_core
    output_dir = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                              "kernel_meta")
    assert (len(compile_param) == 3)
    assert (len(additional_info) == 4)
    target = compile_param[0]
    kernel_name = compile_param[1]
    dirpath = compile_param[2]
    is_ffts_needed, is_mix, is_need_relocating, dfx_size = additional_info
    if ccec.current_build_config().get(enable_vector_core):
        is_mix = True
        kernel_name = update_kernel_name_by_enable_vector_core(kernel_name)

    if ccec.current_build_config().get(build_fatbin):
        output_dir = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                                  "kernel_meta", KernelName.get_kernel_name())
    if ccec.current_build_config().get(tbe_debug_level) > 0 or \
            "dump" in ccec.current_build_config().get(op_debug_config):
        output_dir = dirpath
    make_output_dir(output_dir, dirpath)

    is_aicpu = False
    if target == "cce_cpu":
        is_aicpu = True
    elif target == "cce_cpu_llvm":
        kernel_name = kernel_name[1:]
        is_aicpu = True

    bin_file_prefix = ""
    bin_file_suffix = ".o"
    from tbe.common.platform.platform_info import get_soc_spec
    from tbe.common.platform.platform_info import COMPILER_ARCH
    # for aicpu supports os only
    aicpu_support_os = (get_soc_spec(COMPILER_ARCH) == "true")

    if is_aicpu and aicpu_support_os:
        bin_file_prefix = "lib"
        bin_file_suffix = ".so"

    json_info = json_info or {}
    for key, _ in json_info.items():
        if key.name == "batchBindOnly":
            CceFlag.BatchBindOnly = True

    # set context for after using(fatbin, mix scene, etc.)
    from tbe.common.context import get_context
    context = get_context()
    if is_need_relocating:
        context.add_compile_info("is_need_relocating", True)
    if dfx_size:
        if context:
            context.add_compile_info("dfx_size", int(dfx_size))

    new_additional_info = [is_ffts_needed, is_mix, is_need_relocating]
    try:
        # 'pylint: disable=unused-variable
        ccebin = ccec.compile_cce(
            dirpath, kernel_name, new_additional_info, target,
            path_target=os.path.join(
                output_dir, bin_file_prefix + kernel_name + bin_file_suffix),
            dump_superkernel_to_h=dump_superkernel_to_h)
    except Exception as errs:
        remove_temp_dir(dirpath)
        path_target = os.path.join(
            output_dir, bin_file_prefix + kernel_name + bin_file_suffix)
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             ("compile cce error : " + errs.args[1] + \
                              ", dirpath: " + dirpath + \
                              ", path_target: " + path_target))


# Example: pylint: disable=broad-except
def write_code(js_dict, fname):
    """
    write code
    """
    try:
        with open(fname, "w") as nwe_file:
            # Only the owner and group have rights
            os.chmod(fname, stat.S_IRUSR + stat.S_IWUSR + stat.S_IRGRP)
            json.dump(js_dict, nwe_file, sort_keys=True, indent=4,
                      separators=(',', ':'))
    except Exception as err:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             ("open file error, reason:" + err))


def add_json_info(title_dict, json_info, json_info_tuple):
    """
    add json info
    """
    json_info = json_info or {}
    json_info_tuple = json_info_tuple or {}
    for key, val in json_info.items():
        title_dict[key.name] = val.value
        if key.name == "batchBindOnly":
            CceFlag.BatchBindOnly = True
    for key, val in json_info_tuple.items():
        list_value = []
        for args in val:
            list_value.append(int(args))
        title_dict[key.name] = list_value
    return title_dict


def _get_kernel_magic_ascend_310B(aicore_type: str, mix: str = None) -> dict:
    """
    get the magic info for Ascend310B
    Parameters
    ----------
    aicore_type: core type, string of VectorCore or AiCore

    Returns
    -------
    the magic info dict

    """
    from tbe.common.platform.platform_info import get_soc_spec
    value = get_soc_spec("cube_vector_combine")
    value_str_list = value.split(",")
    if value_str_list[0] == 'unknown' or ("fuse" in value_str_list and len(value_str_list)) == 1:
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    elif mix == "MIX":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    elif aicore_type == "VectorCore":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AIVEC"}
    elif aicore_type == "AiCore":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AICUBE"}
    else:
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    return title_dict


def _get_kernel_magic_asecnd_910B(aicore_type: str, mix: str = None,
                                  compatible_needed: bool = False,
                                  mix_type_info: str = None) -> dict:
    """
    get the magic info for Ascend910B / Ascend910_93 / Ascend910_95
    Parameters
    ----------
    aicore_type: core type, VectorCore or AiCore
    compatible_needed: whether mix type ops
    mix_type_info: mix type info, aic_mix or aiv_mix

    Returns
    -------
    the magic dict for Ascend910B

    """
    magic_dict = {"aic_mix": {"magic": "FFTS_BINARY_MAGIC_ELF_MIX_AIC"},
                  "aiv_mix": {"magic": "FFTS_BINARY_MAGIC_ELF_MIX_AIV"}}
    org_mix_flag = mix
    if compatible_needed and mix != "MIX":
        mix = "MIX"
        if aicore_type == "VectorCore":
            mix_type_info = "aiv_mix"
        elif aicore_type == "AiCore":
            mix_type_info = "aic_mix"
        return {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    from tbe.common.buildcfg.buildcfg_mapping import enforce_mix_mode
    if ccec.current_build_config().get(enforce_mix_mode):
        return {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    if aicore_type == "VectorCore" and org_mix_flag != "MIX":
        if mix == "MIX":
            title_dict = magic_dict.get(
                mix_type_info, {"magic": "FFTS_BINARY_MAGIC_ELF_MIX_AIV"})
        else:
            title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AIVEC"}
    elif aicore_type == "AiCore" and org_mix_flag != "MIX":
        if mix == "MIX":
            title_dict = magic_dict.get(
                mix_type_info, {"magic": "FFTS_BINARY_MAGIC_ELF_MIX_AIC"})
        else:
            title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AICUBE"}
    else:
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    return title_dict


def _add_kernel_magic(short_soc_version: str,
                      aicore_type: str,
                      compatible_needed: bool = False,
                      mix: str = None,
                      mix_type_info: str = None) -> dict:
    """
    get the kernel magic info
    Parameters
    ----------
    short_soc_version: short soc version
    aicore_type: core type
    compatible_needed: whether mix ops
    mix_type_info: mix type info, aic_mix or aiv_mix

    Returns
    -------
    the magic dict

    """
    if short_soc_version in ["Ascend610", "BS9SX1A", "Ascend610B", "Ascend310P"] and \
            aicore_type == "VectorCore":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AIVEC"}
    elif short_soc_version in ["Ascend910B", "Ascend910_93", "Ascend910_95"]:
        title_dict = _get_kernel_magic_asecnd_910B(aicore_type, mix, compatible_needed,
                                                   mix_type_info)
    elif short_soc_version == "Ascend310B" or short_soc_version == "AS31XM1":
        title_dict = _get_kernel_magic_ascend_310B(aicore_type, mix)
    elif short_soc_version == "Ascend031":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AICUBE"}
    else:
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF"}
    return title_dict


def _add_core_type(title_dict, core_type_info, mix):
    from tbe.common.platform.platform_info import get_soc_spec
    if "split" in get_soc_spec("cube_vector_combine") and mix != "MIX":
        for key, value in core_type_info.items():
            title_dict[key.name] = value.name
    return title_dict


# 'pylint: disable=too-many-arguments
def init_json_info(target: any,
                   kernel_name: any,
                   core_type_info: any,
                   compatible_needed: bool = False,
                   mix: str = None,
                   mix_type: str = None) -> any:
    """
    init json info
    :param target: comple target
    :param kernel_name: kernel name of ops
    :param core_type_info: core type AIC or AIV
    :param compatible_needed: compatible for c220
    :param mix_type: mix type of ops for c220
    :return: title_dict
    :rtype dict
    """
    from tbe.common.platform.platform_info import get_soc_spec
    is_aicpu = False
    if target == "cce_core":
        from tbe.common.buildcfg.buildcfg_mapping import enable_vector_core
        if ccec.current_build_config().get(enable_vector_core):
            kernel_name = update_kernel_name_by_enable_vector_core(kernel_name)

        short_soc_version = get_soc_spec("SHORT_SOC_VERSION")
        aicore_type = get_soc_spec("AICORE_TYPE")
        title_dict = _add_kernel_magic(short_soc_version, aicore_type, compatible_needed, mix,
                                       mix_type)
        title_dict = _add_core_type(title_dict, core_type_info, mix)
    elif target == "cce_cpu":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AICPU"}
        is_aicpu = True
    elif target == "cce_cpu_llvm":
        title_dict = {"magic": "RT_DEV_BINARY_MAGIC_ELF_AICPU"}
        if len(kernel_name) < 2:
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "Invalid code, the length of kernel_name \
                                  in IR code too short")
        kernel_name = kernel_name[1:]
        is_aicpu = True
    else:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "Unknown architecture, does not support now")
    return is_aicpu, kernel_name, title_dict


def _add_kernel_name(kernel_name, title_dict, kernel_list, kernel_list_deterministic):
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    if ccec.current_build_config().get(build_fatbin):
        title_dict["kernelName"] = kernel_name
        if len(kernel_list) != len(kernel_list_deterministic):
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "kernel_list size is not equal to kernel_list_deterministic size")
        if kernel_list:
            title_dict["kernelList"] = []
            for idx, name in enumerate(kernel_list):
                name = str(name).rstrip("\"").lstrip("\"")
                deterministic = str(kernel_list_deterministic[idx]).rstrip("\"").lstrip("\"")
                title_dict["kernelList"].append({"kernelName": name,
                                                 "deterministic": deterministic})
        else:
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "kernelList must have kernel_tilingkey")
    else:
        title_dict["kernelName"] = kernel_name + "__kernel0"


def _add_context_info(workspace_dict, fake_name="workspace_"):
    from tbe.common.context import get_context
    context = get_context()
    if workspace_dict["num"] == len(workspace_dict["type"]) and \
            workspace_dict["num"] == len(workspace_dict["size"]):
        for idx in range(workspace_dict["num"]):
            context.add_workspace(fake_name + str(idx), workspace_dict["size"][idx],
                                  workspace_dict["type"][idx])
    else:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "size and type in workspace dict should share the same size " +
                             "as num")


def _add_workspace_info(title_dict, workspace_list, is_context=False, fake_name="workspace_"):
    # compute workspace info from workspace_list
    ori_num = len(workspace_list)
    ori_type_list = [
        (val[2] if isinstance(val, tuple) and len(val) > 2 else 0)
        for val in workspace_list
    ]
    ori_size_list = [
        (val if not isinstance(val, tuple) else val[1] if len(val) > 1 else val[0])
        for val in workspace_list
    ]
    ori_name_list = [
        (val[0] if isinstance(val, tuple) and len(val) > 1 and val[0] else fake_name + str(i))
        for i, val in enumerate(workspace_list)
    ]

    # workspace_list check
    for idx in range(ori_num):
        if not isinstance(ori_type_list[idx], int) or \
                (ori_type_list[idx] != 0 and ori_type_list[idx] != 1):
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "workspace type size should be int value 0 or 1")
        if not isinstance(ori_size_list[idx], int) or ori_size_list[idx] < -1:
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "workspace size should be int value >= -1")
        if not isinstance(ori_name_list[idx], str):
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "workspace name should be string type")

    # remove the element in workspace_list, if its name is the same as element in context.
    from tbe.common.context import get_context
    context = get_context()
    num = 0
    type_list = []
    size_list = []
    name_list = []
    if is_context and context:
        name_set = set([name for name, _, _ in context.get_workspaces()])
        for idx in range(ori_num):
            if ori_name_list[idx] not in name_set:
                name_list.append(ori_name_list[idx])
                size_list.append(ori_size_list[idx])
                type_list.append(ori_type_list[idx])
                num += 1
    else:
        type_list = ori_type_list
        size_list = ori_size_list
        name_list = ori_name_list
        num = ori_num
    if num == 0:
        return

    # add workspace info to title_dict for json file output
    if "workspace" in title_dict and "num" in title_dict["workspace"] and \
            "size" in title_dict["workspace"] and "type" in title_dict["workspace"]:
        title_dict["workspace"] = {
            "num": (title_dict["workspace"]["num"] + num),
            "size": (title_dict["workspace"]["size"] + size_list),
            "type": (title_dict["workspace"]["type"] + type_list)}
    else:
        title_dict["workspace"] = {
            "num": num,
            "size": size_list,
            "type": type_list}

    # add workspace info to context
    if is_context and context:
        for idx in range(num):
            context.add_workspace(name_list[idx], size_list[idx], 0)


def _add_pass_workspace(title_dict):
    if hasattr(MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST, "local_list") and \
            len(MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST.local_list) > 0:
        _add_workspace_info(
            title_dict, MULTI_CORE_SYNC_WORKSPACE_SIZE_LIST.local_list, True, "pass_")
    return title_dict


def _add_workspace_to_title_dict(title_dict):
    # Example: pylint: disable:len-as-condition
    """
    only consider:
        1. pure TIK
        2. TIK TBE hybrid:
            a. use create_block_sync()
            b. sync tensor applied by user
        3. pure TBE: use create_block_sync()
        add worksapce info in order:
            TIK_WORKSPACE_SIZE_LIST
            TBE_WORKSPACE_SIZE_LIST
    """
    # set parameters info
    tbe_worksapce = hasattr(TBE_WORKSPACE_SIZE_LIST, "local_list") and \
                    len(TBE_WORKSPACE_SIZE_LIST.local_list) > 0
    tik_workspace = hasattr(TIK_WORKSPACE_SIZE_LIST, "local_list") and \
                    len(TIK_WORKSPACE_SIZE_LIST.local_list) > 0

    from tbe.common.platform.platform_info import get_soc_spec, ASCEND_910B, ASCEND_910_93
    is_c220 = get_soc_spec("SHORT_SOC_VERSION") in [ASCEND_910B, ASCEND_910_93]
    if tbe_worksapce:  # use create_block_sync()
        if hasattr(TIK_ATOMIC_ADD_LIST, "local_list") and \
                len(TIK_ATOMIC_ADD_LIST.local_list) > 0:
            # 2. TIK TBE hybrid: a. use create_block_sync()
            for i in range(len(TBE_WORKSPACE_SIZE_LIST.local_list)):
                # need atomic_clean
                title_dict["parameters"].append({"init_value": 0.0, "dtype": "float32"})
        elif not is_c220:
            # 3. pure TBE: use create_block_sync()
            for i in TBE_WORKSPACE_IND_LIST.local_list:
                # need atomic_clean
                if i < len(title_dict["parameters"]):
                    title_dict["parameters"][i] = {"init_value": 0.0, "dtype": "float32"}

    # add tik workspace info
    if tik_workspace:
        _add_workspace_info(title_dict, TIK_WORKSPACE_SIZE_LIST.local_list, True, "tik_")
    # add tbe workspace from block sync
    if tbe_worksapce:  # use create_block_sync()
        _add_workspace_info(title_dict, TBE_WORKSPACE_SIZE_LIST.local_list, True, "tbe_")

    if hasattr(TBE_ATUO_ATOMIC_IND_LIST, "local_list") and \
            len(TBE_ATUO_ATOMIC_IND_LIST.local_list) > 0:
        for i in TBE_ATUO_ATOMIC_IND_LIST.local_list:
            title_dict["parameters"][i] = {"init_value": 0.0, "dtype": "float32"}

    # add pass workspace info
    title_dict = _add_pass_workspace(title_dict)


def _add_global_tensor_title_to_dict(tensor_size_dict):
    """
    update global_tensor info
    :param tensor_size_dict:
    :type tensor_size_dict: dict
    :return: no return
    :rtype None
    """
    if hasattr(TIK_GLOBAL_TENSOR_LIST, "local_list") and \
            len(TIK_GLOBAL_TENSOR_LIST.local_list) > 0:
        for global_workspace_tensor in TIK_GLOBAL_TENSOR_LIST.local_list:
            if global_workspace_tensor:
                tensor_size_dict["".join(["globalworkspace_", global_workspace_tensor[0]])] = {
                    "size": global_workspace_tensor[1]
                }


def _mkdir_json_path(dir_path: str, kernel_name: str):
    """
    mkdir json file path
    :param dir_path: base path
    :param kernel_name: kernel name
    :return: json file name
    """
    file_name = os.path.join(dir_path, kernel_name + ".json")
    from te.platform import cce_params
    if not os.path.exists(dir_path):
        try:
            os.mkdir(dir_path)
        except OSError as err:
            # 17, OSError: [Errno 17] File exists
            if err.errno == cce_params.FILE_EXISTS_ERR:
                pass
            else:
                raise err
        os.chmod(dir_path,
                 stat.S_IRWXU + stat.S_IRGRP + stat.S_IXGRP)
    return file_name


def _add_mem_stamp_tensor_to_dict(tensor_size_dict):
    """
    add memory stamp gm tensor to json
    Parameters
    ----------
    tensor_size_dict: tensor size dict

    Returns None
    -------

    """
    if hasattr(TIK_MEM_STAMP_TENSOR_LIST, "local_list"):
        tensor_size_dict["memoryStamping"] = TIK_MEM_STAMP_TENSOR_LIST.local_list


def _save_operator_json_info(kernel_name, is_aicpu, title_dict,
                             kernel_list, kernel_list_deterministic, mix, is_ffts_id_needed):
    from tbe.common.platform.platform_info import get_soc_spec
    from tbe.common.platform.platform_info import COMPILER_ARCH
    from tbe.common.platform.platform_info import KernelName
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level
    from tbe.common.buildcfg.buildcfg_mapping import output_dir
    from tbe.common.buildcfg.buildcfg_mapping import status_check
    from tbe.common.platform.platform_info import ASCEND_910, ASCEND_310P, \
        HI3796CV300ES, HI3796CV300CS
    # for aicpu supports os only
    aicpu_support_os = (get_soc_spec(COMPILER_ARCH) == "true")

    # bin file without suffix
    bin_file_name = ""
    bin_file_suffix = ".o"
    header_file_suffix = ".h"
    bin_file_name = kernel_name
    if is_aicpu and aicpu_support_os:
        bin_file_name = "lib" + bin_file_name
        bin_file_suffix = ".so"

    # user set output directory in debug mode
    dir_path = os.path.join(ccec.current_build_config().get(
        kernel_meta_parent_dir), "kernel_meta")
    if ccec.current_build_config().get(build_fatbin):
        dir_path = os.path.join(ccec.current_build_config().get(
            kernel_meta_parent_dir), "kernel_meta", KernelName.get_kernel_name())
    if ccec.current_build_config().get(tbe_debug_level) > 0 and \
            output_dir in ccec.current_build_config() and \
            ccec.current_build_config().get(output_dir) != "":
        dir_path = ccec.current_build_config().get(output_dir)

    # compute the sha256 of a given tvm_cce_op file used by domi
    sha256_hash = ""
    bin_file_path = os.path.join(dir_path,
                                 bin_file_name + bin_file_suffix)
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level, op_debug_config
    if os.path.exists(bin_file_path):
        with open(bin_file_path, 'rb') as nwe_file:
            # Only the owner and group have rights
            os.chmod(bin_file_path, stat.S_IRUSR + stat.S_IWUSR + stat.S_IRGRP)
            sha256_hash = hashlib.sha256(nwe_file.read()).hexdigest()
    elif ccec.current_build_config().get(tbe_debug_level) > 0 or \
            "dump_bin" in ccec.current_build_config().get(op_debug_config):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "Open operator file failed.")

    # new parameters in aicpuos feature
    _add_kernel_name(kernel_name, title_dict, kernel_list,
                     kernel_list_deterministic)
    title_dict["binFileSuffix"] = bin_file_suffix
    from tbe.common.buildcfg.buildcfg_mapping import enable_model_fusion
    if ccec.current_build_config().get(enable_model_fusion):
        title_dict["headerFileSuffix"] = header_file_suffix
    title_dict["binFileName"] = bin_file_name
    title_dict["sha256"] = sha256_hash
    short_soc_version = get_soc_spec("SHORT_SOC_VERSION")
    support_soc_list = [ASCEND_310P, ASCEND_910, HI3796CV300ES, HI3796CV300CS]
    if ccec.current_build_config().get(status_check) and short_soc_version in support_soc_list:
        title_dict["globalworkspace_spec_workspace"] = {"size": 32, "type": 0}
    # add workspace info to .json
    _add_workspace_to_title_dict(title_dict)

    # add tensor size info to json
    _add_global_tensor_title_to_dict(title_dict)

    # add stamp tensor info to json
    _add_mem_stamp_tensor_to_dict(title_dict)

    # the tvm_cce_op json file used by domi
    # kernel_name has been checked, it only contains letters, numbers and underscores
    file_name = _mkdir_json_path(dir_path, kernel_name)
    from tbe.common.context import get_context
    from tbe.common.buildcfg.buildcfg_mapping import dynamic_tik
    context = get_context()
    if context and context.get_compile_info("dfx_size"):
        dfx_size = int(context.get_compile_info("dfx_size"))
        op_para_size = 0
        if "oriOpParaSize" in title_dict:
            op_para_size = title_dict["oriOpParaSize"]
        elif "opParaSize" in title_dict:
            op_para_size = title_dict["opParaSize"]
        if "oom" in ccec.current_build_config().get(op_debug_config):
            # tiling data size should align to 8
            op_para_size = (op_para_size + 7) // 8 * 8
        if ccec.current_build_config().get(build_fatbin) or \
                ccec.current_build_config().get(dynamic_tik) or dfx_size != -1:
            title_dict["opParaSize"] = int(op_para_size + dfx_size)

    final_dict = title_dict.copy()
    write_code(final_dict, file_name)

    if context is not None:
        if mix != "MIX" and not ccec.current_build_config().get(build_fatbin):
            context.add_build_res("json_file_path", os.path.abspath(file_name))
        context.add_addition("tik_mix_core_mode", mix)


def compile_buffer_random(kernel_name):
    from tbe.common.context import get_context
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    context = get_context()
    if not context:
        return False
    if not context.get_addition("compile_reset_op"):
        return False
    else:
        buffer_type = context.get_addition("compile_reset_op")
        bin_path = ccec.current_build_config().get(
            kernel_meta_parent_dir) + "/kernel_meta/" + kernel_name + ".o"
        reset_op_info = {"type": buffer_type,
                         "bin_path": bin_path,
                         "kernel_name": kernel_name}
        if context.get_addition("reset_op_info"):
            context.get_addition("reset_op_info").append(reset_op_info)
        else:
            context.add_addition("reset_op_info", [reset_op_info])
        return True


@register_func
def tvm_callback_save_main_json(ori_name: str, task_ration: str, block_dim: int,
                                intercore_sync: bool, tiling_key: str):
    from tbe.common.platform.platform_info import get_soc_spec
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    from tbe.common.buildcfg.buildcfg_mapping import output_dir
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level
    core_type = get_soc_spec("AICORE_TYPE")
    kernel_name = ori_name
    aic_file_name = ori_name + "_mix_aic.json"
    aiv_file_name = ori_name + "_mix_aiv.json"
    if ccec.current_build_config().get(build_fatbin):
        kernel_name = ori_name + "_" + tiling_key
        aic_file_name = ori_name + "_mix_aic_" + tiling_key + ".json"
        aiv_file_name = ori_name + "_mix_aiv_" + tiling_key + ".json"
    from te.platform import cce_params
    main_json_dict = {cce_params.JSON_KEY_CORE_TYPE: core_type,
                      cce_params.JSON_KEY_TASK_RATION: task_ration,
                      cce_params.JSON_KEY_BLOCK_DIM: block_dim,
                      cce_params.JSON_KEY_INTERCORE_SYNC_FLAG: intercore_sync}
    main_json_dict[cce_params.JSON_KEY_JSON_LIST] = \
        [{cce_params.JSON_KEY_CORE_TYPE: "CubeCore",
          cce_params.JSON_KEY_JSON_FILE_NAME: aic_file_name},
         {cce_params.JSON_KEY_CORE_TYPE: "VectorCore",
          cce_params.JSON_KEY_JSON_FILE_NAME: aiv_file_name}]
    if ccec.current_build_config().get(build_fatbin):
        main_json_dict[cce_params.JSON_KEY_KERNEL_LIST] = [
            {cce_params.JSON_KEY_KERNEL_NAME: kernel_name}]
    # user set output directory in debug mode
    dir_path = os.path.join(ccec.current_build_config(
    ).get(kernel_meta_parent_dir), cce_params.KERNEL_META_PATH)
    if ccec.current_build_config().get(build_fatbin):
        dir_path = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                                cce_params.KERNEL_META_PATH,
                                ori_name)
    if ccec.current_build_config().get(tbe_debug_level) > 0 and \
            output_dir in ccec.current_build_config() and \
            ccec.current_build_config().get(output_dir) != "":
        dir_path = ccec.current_build_config().get(output_dir)

    json_file_name = _mkdir_json_path(dir_path, kernel_name)
    write_code(main_json_dict, json_file_name)
    from tbe.common.context import get_context
    context = get_context()
    if context is not None:
        context.add_build_res(
            "json_file_path", os.path.abspath(json_file_name))


def link_mixbin_relocatable(src_dir, dst_file, kernel_name):
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level, enable_multicore_sync_with_atomic, \
        enable_deterministic_mode, duplicate_codes, build_fatbin
    from tbe.common.platform.platform_info import get_soc_spec, ASCEND_910B
    from tbe.common.context import get_context
    context = get_context()
    # after link global variable kernel, it's can't do any incremental link
    # If "is_need_relocating" is "True" in fatbin + mix scene, "link_relocatable_with_def_file" should be executed in
    # "gen_fatbin_file" stage only to avoid duplicate link which would cause "unknown file type" error.
    if context and context.get_compile_info("is_need_relocating") and not ccec.current_build_config().get(build_fatbin):
        link_relocatable_with_def_file(src_dir, dst_file, kernel_name)
        return
    if ((context and (context.get_compile_info("global_variable_link"))) or \
        ccec.current_build_config().get(tbe_debug_level) == 2 or \
        ccec.current_build_config().get(enable_multicore_sync_with_atomic) or \
        ccec.current_build_config().get(enable_deterministic_mode) or \
        (ccec.current_build_config().get(duplicate_codes) != 0 and
         get_soc_spec("SHORT_SOC_VERSION") == ASCEND_910B)) and \
            not ccec.current_build_config().get(build_fatbin):
        ccec.link_from_relocatable_file_to_final(dst_file, dst_file)


def gen_mixbin_file(kernel_name, final_dict, tiling_key):
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    from te.platform import cce_params
    final_dict[cce_params.JSON_KEY_KERNEL_NAME] = kernel_name + "__kernel0"
    final_dict[cce_params.JSON_KEY_BIN_FILE_NAME] = kernel_name
    if ccec.current_build_config().get(build_fatbin):
        final_dict[cce_params.JSON_KEY_KERNEL_NAME] = kernel_name + '_' + tiling_key
        final_dict[cce_params.JSON_KEY_BIN_FILE_NAME] = kernel_name + '_' + tiling_key

    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    json_dir = os.path.join(ccec.current_build_config().get(
        kernel_meta_parent_dir), "kernel_meta")
    if ccec.current_build_config().get(build_fatbin):
        json_dir = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                                cce_params.KERNEL_META_PATH, kernel_name)
    bin_file_path = ""
    if ccec.current_build_config().get(build_fatbin):
        bin_file_path = os.path.join(
            json_dir, kernel_name + '_' + tiling_key + '.o')
    else:
        bin_file_path = os.path.join(json_dir, kernel_name + '.o')
    ccec.compile_fatbin(
        json_dir, final_dict[cce_params.JSON_KEY_KERNEL_LIST], bin_file_path)
    if ccec.current_build_config().get(build_fatbin):
        if len(final_dict[cce_params.JSON_KEY_KERNEL_LIST]) > 0:
            final_dict[cce_params.JSON_KEY_KERNEL_LIST] = [
                final_dict[cce_params.JSON_KEY_KERNEL_LIST][0]]
            final_dict[cce_params.JSON_KEY_KERNEL_LIST][0][cce_params.JSON_KEY_KERNEL_NAME] = \
                kernel_name + "_" + tiling_key
    else:
        del final_dict[cce_params.JSON_KEY_KERNEL_LIST]

    link_mixbin_relocatable(json_dir, bin_file_path, kernel_name)

    try:
        with open(bin_file_path, 'rb') as new_file:
            # Only the owner and group have rights
            os.chmod(bin_file_path, stat.S_IRUSR + stat.S_IWUSR + stat.S_IRGRP)
            sha256_hash = hashlib.sha256(new_file.read()).hexdigest()
    except IOError:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "Open operator file failed.")

    final_dict['sha256'] = sha256_hash

    if ccec.current_build_config().get(build_fatbin):
        write_code(final_dict, os.path.join(
            json_dir, kernel_name + '_' + tiling_key + '.json'))
    else:
        write_code(final_dict, os.path.join(json_dir, kernel_name + '.json'))


@register_func
def tvm_callback_merge_mix_json(ori_name: str, task_ration: str, tiling_key: str):
    """
    merge aic and aiv jsons to one mix json file
    merge aic and aiv bins to one bin file
    """
    from tbe.common.buildcfg.buildcfg_mapping import build_fatbin
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    from tbe.common.buildcfg.buildcfg_mapping import enable_vector_core
    from te.platform import cce_params

    json_name = ori_name
    if ccec.current_build_config().get(build_fatbin):
        json_name = ori_name + "_" + tiling_key
    mix_aic_json_name = json_name + cce_params.MIX_AIC_SUFFIX + ".json"
    json_dir = os.path.join(ccec.current_build_config().get(
        kernel_meta_parent_dir), cce_params.KERNEL_META_PATH)
    if ccec.current_build_config().get(build_fatbin):
        json_dir = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir),
                                cce_params.KERNEL_META_PATH,
                                ori_name)
    json_file = os.path.join(json_dir, mix_aic_json_name)
    if not os.path.isfile(json_file):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "can't find json file {json_file}, \
                              probably due to error in subprocess "
                             "or cases with duplicate names.".format(json_file=json_file))
    main_json_dict = []
    with open(json_file, 'r') as fp:
        main_json_dict = json.load(fp)
    if not ccec.current_build_config().get(enable_vector_core):
        main_json_dict[cce_params.JSON_KEY_TASK_RATION] = task_ration

    mix_aiv_json_name = json_name + cce_params.MIX_AIV_SUFFIX + ".json"
    json_file = os.path.join(json_dir, mix_aiv_json_name)
    if not os.path.isfile(json_file):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "can't find json file {json_file}, \
                             probably due to error in subprocess "
                             "or cases with duplicate names.".format(json_file=json_file))
    with open(json_file, 'r') as fp:
        aiv_json_dict = json.load(fp)
    if len(main_json_dict[cce_params.JSON_KEY_PARAMETERS]) != \
            len(aiv_json_dict[cce_params.JSON_KEY_PARAMETERS]):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "mix aic json paramters numbers ar not equal to \
                              mix aiv json paramters numbers ")
    for i in range(len(aiv_json_dict['parameters'])):
        if aiv_json_dict[cce_params.JSON_KEY_PARAMETERS][i] is not None and \
                aiv_json_dict[cce_params.JSON_KEY_PARAMETERS][i] not in main_json_dict[cce_params.JSON_KEY_PARAMETERS]:
            main_json_dict[cce_params.JSON_KEY_PARAMETERS][i] = \
                aiv_json_dict[cce_params.JSON_KEY_PARAMETERS][i]

    if ccec.current_build_config().get(build_fatbin) and \
            ccec.current_build_config().get(enable_vector_core):
        aic_kernel_list = main_json_dict[cce_params.JSON_KEY_KERNEL_LIST][0]
        aiv_kernel_list = aiv_json_dict[cce_params.JSON_KEY_KERNEL_LIST][0]
        aic_kernel_list[cce_params.JSON_KEY_KERNEL_NAME] = \
            json_name + cce_params.MIX_AIC_SUFFIX
        aiv_kernel_list[cce_params.JSON_KEY_KERNEL_NAME] = \
            json_name + cce_params.MIX_AIV_SUFFIX
        main_json_dict[cce_params.JSON_KEY_KERNEL_LIST] = \
            [aic_kernel_list, aiv_kernel_list]
    elif ccec.current_build_config().get(build_fatbin):
        main_json_dict[cce_params.JSON_KEY_KERNEL_LIST] += \
            aiv_json_dict[cce_params.JSON_KEY_KERNEL_LIST]
    else:
        main_json_dict[cce_params.JSON_KEY_KERNEL_LIST] = \
            [{cce_params.JSON_KEY_KERNEL_NAME: ori_name + cce_params.MIX_AIC_SUFFIX},
             {cce_params.JSON_KEY_KERNEL_NAME: ori_name + cce_params.MIX_AIV_SUFFIX}]

    if ccec.current_build_config().get(enable_vector_core):
        main_json_dict[cce_params.JSON_KEY_CORE_TYPE] = "MIX_VECTOR_CORE"

    gen_mixbin_file(ori_name, main_json_dict, tiling_key)
    dir_path = json_dir
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level, output_dir
    if ccec.current_build_config().get(tbe_debug_level) > 0 and \
            output_dir in ccec.current_build_config() and \
            ccec.current_build_config().get(output_dir) != "":
        dir_path = ccec.current_build_config().get(output_dir)
    from tbe.common.context import get_context
    context = get_context()
    if context is not None:
        context.add_build_res("json_file_path",
                              os.path.abspath(_mkdir_json_path(dir_path, ori_name)))


def _get_atomic_init_args(atomic_args):
    list_value = []
    for args in atomic_args.split("_"):
        if args.isnumeric():
            list_value.append(None)
        else:
            tmp = args.split("*")
            if "." not in tmp[0]:
                list_value.append({"init_value": int(tmp[0]), "dtype": tmp[1]})
            else:
                list_value.append({"init_value": float(tmp[0]), "dtype": tmp[1]})
    return list_value


# Example: pylint: disable=too-many-locals,too-many-branches,too-many-statements,too-many-arguments
# blockdim: cpu num,default value is 1.
@register_func
def tvm_callback_cce_postproc(target,
                              kernel_name,
                              blockdim=1,
                              args_size=0,
                              atomic_args="",
                              json_info=None,
                              json_info_tuple=None,
                              core_type_info=None,
                              kernel_list=None,
                              kernel_list_deterministic=None,
                              is_ffts_id_needed: bool = False,
                              subblockdim: int = 1,
                              mix: str = None,
                              mix_type_info: str = None) -> any:
    """
    cce postproc
    """
    if compile_buffer_random(kernel_name):
        return

    is_aicpu, kernel_name, title_dict = init_json_info(target, kernel_name, core_type_info,
                                                       is_ffts_id_needed, mix, mix_type_info)
    if mix != "MIX":
        subblockdim = 0
    # to short_soc_version : add taskRation and modeInArgsFirstField params
    from tbe.common.platform.platform_info import get_soc_spec
    from tbe.common.buildcfg.buildcfg_mapping import enforce_mix_mode
    core_type = get_soc_spec("AICORE_TYPE")
    if mix != "MIX":
        title_dict["coreType"] = core_type

    from tbe.common.platform.platform_info import ASCEND_910B
    from tbe.common.platform.platform_info import ASCEND_910_93
    from tbe.common.platform.platform_info import ASCEND_910_95
    short_soc_version = get_soc_spec("SHORT_SOC_VERSION")
    if short_soc_version in [ASCEND_910B, ASCEND_910_93, ASCEND_910_95] and \
            (is_ffts_id_needed or mix == "MIX" or \
             ccec.current_build_config().get(enforce_mix_mode)):
        title_dict["coreType"] = "MIX"
        from te.platform import cce_params
        if core_type == "AiCore" and mix != "MIX":
            title_dict[cce_params.JSON_KEY_TASK_RATION] = "1:0"
        elif core_type == "VectorCore" and mix != "MIX":
            title_dict[cce_params.JSON_KEY_TASK_RATION] = "0:1"

    title_dict["blockDim"] = blockdim
    title_dict["opParaSize"] = args_size

    if short_soc_version in ["Ascend910B", "Ascend910_93", "Ascend910_95"]:
        mode_in_args_first_field = 0
        if is_ffts_id_needed or ccec.current_build_config().get(enforce_mix_mode):
            mode_in_args_first_field = 1
        title_dict["intercoreSync"] = mode_in_args_first_field
    title_dict = add_json_info(title_dict, json_info, json_info_tuple)
    # Example: pylint: disable:len-as-condition
    list_value = []
    if atomic_args:
        list_value = _get_atomic_init_args(atomic_args)
    title_dict["parameters"] = list_value
    if hasattr(TIK_ATOMIC_ADD_LIST, "local_list") and \
            len(TIK_ATOMIC_ADD_LIST.local_list) > 0:
        title_dict["parameters"] = TIK_ATOMIC_ADD_LIST.local_list
    from tbe.common.context import get_context
    context = get_context()
    if context:
        # get workspace list from dsl
        workspace_list = context.get_workspaces()
        _add_workspace_info(title_dict, workspace_list)

        # get json info from dsl
        jsons = context.get_build_json_result(None)
        if_get_workspace_from_json = "workspace" in jsons and not workspace_list
        for key in jsons.keys():
            if workspace_list and key == "workspace":
                continue
            title_dict[key] = jsons[key]

        # add workspace info to context if the info comes from get_build_json_result
        if if_get_workspace_from_json and "size" in jsons["workspace"] and \
                "type" in jsons["workspace"] and "num" in jsons["workspace"]:
            _add_context_info(jsons["workspace"])

    _save_operator_json_info(kernel_name, is_aicpu, title_dict,
                             kernel_list, kernel_list_deterministic, mix, is_ffts_id_needed)


def _incremental(bin_file_path, merge_bin_file):
    from tbe.common.buildcfg.buildcfg_mapping import incremental_link
    kernel_list = []
    if ccec.current_build_config().get(incremental_link):
        for js in ccec.current_build_config().get(incremental_link):
            json_path = js.value
            # collect json info
            with open(json_path, 'r') as f:
                json_str = f.read()
                json_dict = json.loads(json_str)
                kernel_list.extend(json_dict["kernelList"])

            # incremental link
            if merge_bin_file:
                o_path = json_path.rstrip(".json") + ".o"
                tmp_bin_file_path = bin_file_path.rstrip(".o") + "_tmp.o"
                link_cmd = ccec.build_aicore_link_to_relocatable_cmd(
                    [o_path, tmp_bin_file_path], bin_file_path)
                ccec.run_cmd(link_cmd, "link")
        if merge_bin_file:
            os.remove(tmp_bin_file_path)
    return kernel_list


def _update_fatbin_file_kernel_list(final_dict, merge_kernel_list, merge_bin_file, bin_file_path):
    # fuzzy compile
    from tbe.common.context import get_context
    context = get_context()
    if context and merge_kernel_list:
        kernel_list = []
        if context.get_build_type() == "fuzzily_build":
            kernel_list = _incremental(bin_file_path, merge_bin_file)
        jsons = context.get_build_json_result(None)
        for key in jsons.keys():
            if key == "kernelList":
                # incremental json
                if len(jsons["kernelList"]) != len(final_dict["kernelList"]):
                    raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                         "number of kernelList must same")
                for i in range(len(final_dict["kernelList"])):
                    jsons["kernelList"][i]["kernelName"] = final_dict["kernelList"][i]["kernelName"]
                kernel_list.extend(jsons["kernelList"])
                final_dict["kernelList"] = kernel_list
            else:
                final_dict[key] = jsons[key]


def _update_fatbin_file_json_list(final_dict, kernel_name):
    for key in final_dict.keys():
        if key == "jsonList":
            from te.platform import cce_params
            final_dict[cce_params.JSON_KEY_JSON_LIST] = \
                [{cce_params.JSON_KEY_CORE_TYPE: "CubeCore",
                  cce_params.JSON_KEY_JSON_FILE_NAME: kernel_name + "_mix_aic.json"},
                 {cce_params.JSON_KEY_CORE_TYPE: "VectorCore",
                  cce_params.JSON_KEY_JSON_FILE_NAME: kernel_name + "_mix_aiv.json"}]


def get_op_system_run_cfg() -> str:
    return 'struct OpSystemRunCfg {\n' \
           '  uint64_t l2Cacheoffset;\n' \
           '};\n' \
           '__gm__ struct OpSystemRunCfg g_opSystemRunCfg = {0};\n'


def link_relocatable_with_def_file(src_dir, dst_file, kernel_name=""):
    from tbe.common.buildcfg.buildcfg_mapping import dump_cce_code, save_temp_cce_file, tbe_debug_level
    from tbe.common.platform.platform_info import KernelName
    kernel_name_prefix = kernel_name if kernel_name != "" else KernelName.get_kernel_name()
    global_define_file_name = kernel_name_prefix + "_global_define"
    define_file_cce_path = os.path.join(src_dir, global_define_file_name + ".cce")
    define_file_o_path = os.path.join(src_dir, global_define_file_name + ".o")
    content = get_op_system_run_cfg()
    if ccec.current_build_config().get(dump_cce_code):
        print(content)
    try:
        with open(define_file_cce_path, "w") as f:
            f.write(content)
            f.close()
    except Exception as err:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE, ("open file error, reason:" + err))

    compile_cmd = ccec.build_compile_cmd_for_def(define_file_cce_path, os.path.realpath(define_file_o_path))
    ccec.run_cmd(compile_cmd, "compile", os.path.realpath(define_file_cce_path))
    # Only the owner and group have rights
    os.chmod(define_file_cce_path, stat.S_IRUSR + stat.S_IWUSR + stat.S_IRGRP)
    os.chmod(define_file_o_path, stat.S_IRUSR + stat.S_IWUSR + stat.S_IRGRP)

    ccec.link_from_relocatable_file_to_final([define_file_o_path, dst_file], dst_file, True)
    # delete temp cce if needed
    if not ccec.current_build_config().get(save_temp_cce_file) and \
            ccec.current_build_config().get(tbe_debug_level) == 0:
        os.remove(define_file_cce_path)


def link_fatbin_relocatable(src_dir, dst_file):
    from tbe.common.buildcfg.buildcfg_mapping import tbe_debug_level, enable_multicore_sync_with_atomic, \
        enable_deterministic_mode, duplicate_codes
    from tbe.common.platform.platform_info import get_soc_spec, ASCEND_910B
    from tbe.common.context import get_context
    context = get_context()
    if context and context.get_compile_info("is_need_relocating"):
        link_relocatable_with_def_file(src_dir, dst_file)
        return
    # after link global variable kernel, it's can't do any incremental link
    if (context and (context.get_compile_info("global_variable_link"))) or \
            ccec.current_build_config().get(tbe_debug_level) == 2 or \
            ccec.current_build_config().get(enable_multicore_sync_with_atomic) or \
            ccec.current_build_config().get(enable_deterministic_mode) or \
            (ccec.current_build_config().get(duplicate_codes) != 0 and
             get_soc_spec("SHORT_SOC_VERSION") == ASCEND_910B) or ccec.enable_sanitizer():
        ccec.link_from_relocatable_file_to_final(dst_file, dst_file)


def gen_fatbin_file(kernel_name, final_dict, merge_kernel_list: bool, merge_bin_file: bool):
    """
    Write json and link object file
    """
    if merge_bin_file:
        final_dict['kernelName'] = kernel_name
        final_dict['binFileName'] = kernel_name

    from tbe.common.platform.platform_info import KernelName
    from tbe.common.buildcfg.buildcfg_mapping import kernel_meta_parent_dir
    sub_path = os.path.join(ccec.current_build_config().get(kernel_meta_parent_dir), "kernel_meta",
                            KernelName.get_kernel_name())
    main_path = '/'.join(sub_path.split('/')[:-1])
    bin_file_path = ""
    if merge_bin_file:
        bin_file_path = os.path.join(main_path, kernel_name + '.o')
        ccec.compile_fatbin(sub_path, final_dict['kernelList'], bin_file_path)
    _update_fatbin_file_kernel_list(
        final_dict, merge_kernel_list, merge_bin_file, bin_file_path)
    _update_fatbin_file_json_list(final_dict, kernel_name)
    from tbe.common.context import get_context
    context = get_context()
    if merge_bin_file:
        link_fatbin_relocatable(sub_path, bin_file_path)
        try:
            with open(bin_file_path, 'rb') as nwe_file:
                # Only the owner and group have rights
                os.chmod(bin_file_path, stat.S_IRUSR +
                         stat.S_IWUSR + stat.S_IRGRP)
                sha256_hash = hashlib.sha256(nwe_file.read()).hexdigest()
        except IOError:
            raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                 "Open operator file failed.")
        final_dict['sha256'] = sha256_hash
        if merge_kernel_list and not merge_bin_file and "compileInfo" not in final_dict:
            final_dict['compileInfo'] = context.get_compile_info(None)
    write_code(final_dict, os.path.join(main_path, kernel_name + '.json'))


@register_func("tik.debug.float16_to_bits")
def float16_to_bits(half):
    """
    cast float16 to uint16, python api for tik1.5 debug vm
    Parameters
    ----------
    half: float16 value

    Returns
    -------
    the cast result of uint16
    """
    fp16 = np.float16(half)
    return fp16.view('uint16').item()


@register_func("tik.debug.bits_to_float16")
def bits_to_float16(bits):
    """
    cast uint16 to float16, python api for tik1.5 debug vm
    Parameters
    ----------
    bits: uint16 value

    Returns
    -------
    the cast result of float16
    """
    u16 = np.uint16(bits)
    return u16.view('float16').item()


@register_func
def set_build_config_cce_debug_mode():
    """
    Set enable_cce_debug_mode to True
    :return: None
    """
    from tbe.common.buildcfg import set_current_build_config
    set_current_build_config("enable_cce_debug_mode", True)


def tbe_workspace_size_list_length():
    if hasattr(TBE_WORKSPACE_SIZE_LIST, "local_list"):
        return len(TBE_WORKSPACE_SIZE_LIST.local_list)
    else:
        return 0
