#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
""" extended Operation for tensor."""
# pylint: disable=invalid-name

import tvm._ffi
from tvm.runtime import convert
import tvm.tir
from tvm.tir import expr as _expr
from tvm.tir.expr_extended import Sparse, SortExpr
from tvm.error_mgr import raise_tbe_python_err, TBE_DEFAULT_PYTHON_ERROR_CODE

int8 = "int8"
int32 = "int32"
int64 = "int64"
float32 = "float32"
handle = "handle"


def sparse_axis(dom, name="sv", thread_tag="", span=None):
    """Create a new IterVar for sparse loop var.

    Parameters
    ----------
    dom : Range
        The domain of iteration.

    name : str
        The name of the variable.

    thread_tag : Optional[str]
        The name of the thread_tag.

    span : Optional[Span]
        The location of this variable in the source.

    Returns
    -------
    axis : IterVar
        An iteration variable representing the value.
    """
    return tvm.tir.IterVar(dom, name, 0, thread_tag, span)


def sparse(expr, axis, out_of_bound_check=False, span=None):
    if not isinstance(expr, _expr.Select):
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             "Please use tvm.select in tvm.sparse")
    expr = convert(expr)
    axis = convert(axis if isinstance(axis, (list, tuple)) else [axis])
    is_none_false_value = isinstance(expr, _expr.Call) and \
                          expr.false_value.args[0] == "keep_old_value"
    default = None if is_none_false_value else expr.false_value
    return Sparse(expr.true_value, axis, expr.condition, out_of_bound_check, default, span)


def sort_axis(dom, name="sv", thread_tag="", span=None):
    """Create a new IterVar for sort loop var.

    Parameters
    ----------
    dom : Range
        The domain of iteration.

    name : str
        The name of the variable.

    thread_tag : Optional[str]
        The name of the thread_tag.

    span : Optional[Span]
        The location of this variable in the source.

    Returns
    -------
    axis : IterVar
        An iteration variable representing the value.
    """
    return tvm.tir.IterVar(dom, name, 9, thread_tag, span)


def sort(tensor, axis, index, order="ascend", output="value", span=None):
    """Construct a sort compute.

    Parameters
    ----------
    tensor : Expr
        sort tensor list

    axis : IterVar
        sort axis.

    index : Expr
        index axis

    order : str
        sort order, "ascend" means ascend and "descend"  means descend

    output: str
        output mode, "output_value" means output sort value
        "output_index" means output sort index

    span : Optional[Span]
        The location of this variable in the source.

    Returns
    -------
    node : Node
    The tvm.expr.SortExpr node
    """
    if order not in ["ascend", "descend"]:
        raise raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                   "sort mode only support ascend and descend")
    if output not in ["value", "index"]:
        raise raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                   "sort output only support output_value and output_index")
    order = True if order == "ascend" else False
    sort_type = SortExpr.INDEX_SORT if output == "index" else SortExpr.SORT
    axis = convert(axis if isinstance(axis, (list, tuple)) else [axis])
    if len(axis) != 1:
        raise ValueError("sort only support one sort axis")
    return SortExpr(tensor, axis, index, order, tvm.const(True, "bool"), sort_type, None, span)


def topk(tensor, axis, index, k, order="ascend", output="value", span=None):
    """Construct a merge sort compute.

    Parameters
    ----------
    tensor : Expr
        sort tensor list

    axis : IterVar
        sort axis.

    index : Expr
        index axis

    k : Expr
        top k number

    order : str
        sort order, "ascend" means ascend and "descend"  means descend

    output: str
        output mode, "output_value" means output sort value
        "output_index" means output sort index

    span : Optional[Span]
        The location of this variable in the source.

    Returns
    -------
    node : Node
    The tvm.expr.SortExpr node
    """
    if order not in ["ascend", "descend"]:
        raise raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                   "sort mode only support ascend and descend")
    if output not in ["value", "index"]:
        raise raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                                   "topk output only support output_value and output_index")
    sort_type = SortExpr.INDEX_SORT if output == "index" else SortExpr.TOPK
    order = True if order == "ascend" else False
    axis = convert(axis if isinstance(axis, (list, tuple)) else [axis])
    if len(axis) != 1:
        raise ValueError("topk only support one sort axis")
    return SortExpr(tensor, axis, index, order, tvm.const(True, "bool"), sort_type, k, span)