#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

import tvm._ffi
from tvm.runtime import Object
from tvm.ir import container
from tvm.tir import expr
from tvm.error_mgr import raise_tbe_python_err, TBE_DEFAULT_PYTHON_ERROR_CODE
from . import _ffi_api


def _convert_attr(attr):
    if isinstance(attr, expr.StringImm):
        return attr.value
    if isinstance(attr, container.Array):
        attr = [x for x in attr]
    return attr


def _value_to_attr(value):
    if isinstance(value, str):
        return expr.StringImm(value)
    elif isinstance(value, (list, tuple)):
        is_str = [isinstance(x, str) for x in value]
        if not all(x for x in is_str):
            raise_tbe_python_err(
                TBE_DEFAULT_PYTHON_ERROR_CODE, ("items must be str."))
        return value
    elif isinstance(value, expr.PrimExpr):
        return value
    else:
        raise_tbe_python_err(TBE_DEFAULT_PYTHON_ERROR_CODE,
                             ("not support value type."))


@tvm._ffi.register_object
class ExprAttr(Object):
    def __setitem__(self, k, v):
        _ffi_api.AttrSet(self, k, _value_to_attr(v))

    def __getitem__(self, k):
        return _convert_attr(_ffi_api.AttrGet(self, k))

    def __contains__(self, k):
        return k in self.keys()

    def __len__(self):
        return len(self.keys())

    def keys(self):
        return {x.value for x in _ffi_api.AttrKeys(self)}

    def dict(self):
        return {x.value: self.__getitem__(x.value) for x in _ffi_api.AttrKeys(self)}


def get_expr_annotation(e):
    """Get var annotation for var

    Parameters
    ----------
    e : expr
        A dimension of tensor shape

    returns
    -------
    annotation : dict
        the annotation of e
    """
    return _ffi_api.GetExprAnnotation(e).dict()


def expr_attr_keys(e):
    """Set attr for var

    Parameters
    ----------
    e : expr
        A dimension of tensor shape

    returns
    -------
    keys : set
        all the valid keys of e
    """
    return _ffi_api.GetExprAnnotation(e).keys()


def set_expr_attr(e, key, attr):
    """Set attr for var

    Parameters
    ----------
    e : expr
        A dimension of tensor shape

    key : str
        the attr name

    attr : (expr, list, str)
        the attr value
    """
    _ffi_api.GetExprAnnotation(e)[key] = attr


def get_expr_attr(e, key):
    """Get attr of var

    Parameters
    ----------
    e : expr
        A dimension of tensor shape

    key : str

    Returns
    -------
    value : tvm.Expr
        the attr
    """
    return _ffi_api.GetExprAnnotation(e)[key]


def clear_expr_attr():
    """Set attr for var

    Parameters
    ----------
    e : expr
        A dimension of tensor shape

    key : str
        the attr name

    attr : (expr, list, str)
        the attr value
    """
    _ffi_api.ClearExprAnnotation()
