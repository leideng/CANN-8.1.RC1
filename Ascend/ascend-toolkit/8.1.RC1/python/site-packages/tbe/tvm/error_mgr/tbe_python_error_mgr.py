# !/usr/bin/env python
# coding: utf-8
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

TBE_DEFAULT_PYTHON_ERROR_CODE = "EB0500"
TBE_DEFAULT_ERROR_CODE = "EB8000"
ERROR_CODE_MESSAGE = [
    {
        "ErrClass": "Inner Error",
        "ErrCode": "EB9000",
        "ErrMessage": "Inner Error",
        "suggestion": {
            "Possible Cause": "N/A",
            "Solution": "N/A"
        }
    },
    {
        "ErrClass": "Schedule Error",
        "ErrCode": "EB1000",
        "ErrMessage": "",
        "suggestion": {
            "Possible Cause": "N/A",
            "Solution": "N/A"
        }
    },
    {
        "ErrClass": "Storage Error",
        "ErrCode": "EB3000",
        "ErrMessage": "",
        "suggestion": {
            "Possible Cause": "N/A",
            "Solution": "N/A"
        }
    },
    {
        "ErrClass": "EmitInsn Error",
        "ErrCode": "EB4000",
        "ErrMessage": "",
        "suggestion": {
            "Possible Cause": "N/A",
            "Solution": "N/A"
        }
    }
]


class TBEPythonError(RuntimeError):
    """
    Create new Error CompileError when cce compile error
    """
    def __init__(self, errorinfo):
        super().__init__(self)
        self.args = (errorinfo["errCode"],  errorinfo["errClass"],
                     errorinfo["errPcause"], errorinfo["errSolution"], (errorinfo["message"]))
        self.errorinfo = errorinfo

    def __str__(self):
        if not isinstance(self.errorinfo, dict):
            return self.errorinfo
        out_str = ""
        if self.errorinfo.get("errClass") not in ("", " ", "N/A", None):
            out_str += "\n[errClass:{}]".format(self.errorinfo.get("errClass"))
        else:
            out_str += "\n[errClass:{}]".format("N/A")
        if self.errorinfo.get("errCode") not in ("", " ", "N/A", None):
            out_str += "\n[errCode:{}]".format(self.errorinfo.get("errCode"))
        else:
            out_str += "\n[errCode:{}]".format("N/A")
        if self.errorinfo.get("message") not in ("", " ", "N/A", None):
            out_str += "\n[message:{}]".format(self.errorinfo.get("message"))
        else:
            out_str += "\n[message:{}]".format("N/A")
        if self.errorinfo.get("errPcause") not in ("", " ", "N/A", None):
            out_str += "\n[errPcause:{}]".format(self.errorinfo.get("errPcause"))
        else:
            out_str += "\n[errPcause:{}]".format("N/A")
        if self.errorinfo.get("errSolution") not in ("", " ", "N/A", None):
            out_str += "\n[errSolution:{}]".format(self.errorinfo.get("errSolution"))
        else:
            out_str += "\n[errSolution:{}]".format("N/A")
        return out_str


def raise_tbe_python_err(err_code, msg):
    """
    packed tvm python error msg with errCode
    """
    if isinstance(msg, tuple) and len(msg) >= 2 and hasattr(msg[1], "errorinfo") and isinstance(
            msg[1].errorinfo, dict):
        msg = "{}\n{}".format(msg[0], msg[1].errorinfo.get("message"))
    args_dict = {
        "errCode": err_code,
        "message": msg,
        "errClass": "",
        "errPcause": "",
        "errSolution": "",
    }
    raise TBEPythonError(args_dict)
