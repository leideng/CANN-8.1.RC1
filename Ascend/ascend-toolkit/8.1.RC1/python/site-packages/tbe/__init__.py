# Copyright 2019-2020 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
from __future__ import absolute_import as _abs

import sys
import os

BASE_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, BASE_DIR)


def tbe_sysconfig():
    """
    set RLIMIT_NPROC and openblas thread number
    """
    try:
        import resource as res
        rlimit = res.getrlimit(res.RLIMIT_NPROC)
        te_nproc = 40960
        if rlimit[0] < te_nproc:
            nproc = te_nproc if te_nproc < rlimit[1] else rlimit[1]
            res.setrlimit(res.RLIMIT_NPROC, (nproc, rlimit[1]))

        # Not using openblas currently.
        os.environ["OPENBLAS_NUM_THREADS"] = "1"
    except:  # pylint: disable=bare-except
        pass


tbe_sysconfig()

import tvm
from tvm import _ffi, contrib
from tvm.te import hybrid

sys.path.pop(0)

from importlib.machinery import ModuleSpec
from importlib.abc import MetaPathFinder, Loader

class TBEMetaPathFinder(MetaPathFinder):
    """
    TBE MetaPathFinder
    """
    def __init__(self):
        pass

    def find_module(self, fullname, path=None):
        """
        find_module
        """
        if hasattr(self, 'find_spec'):
            found = self.find_spec(fullname, path)
            return found.loader if found is not None else None
        if fullname.startswith("tbe.tvm"):
            rname = fullname[4:]
            if rname in sys.modules:
                return TBEMetaPathLoader(rname)
        return None

    def find_spec(self, fullname, path=None, target=None):
        if fullname.startswith("tbe.tvm"):
            rname = fullname[4:]
            if rname in sys.modules:
                return ModuleSpec(fullname, TBEMetaPathLoader(rname))
        return None


class TBEMetaPathLoader():
    """
    TBE MetaPathLoader
    """

    def __init__(self, target_name):
        self.__target_module = sys.modules[target_name]

    def create_module(self, spec):
        return self.__target_module

    def exec_module(self, module):
        pass


sys.meta_path.insert(0, TBEMetaPathFinder())

from . import dsl
from . import common
from .common.platform import cce_buffer
