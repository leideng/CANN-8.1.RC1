#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#-------------------------------------------------------------------
# Copyright (c) 2024 Huawei Technologies Co., Ltd.
# This file is a part of the CANN Open Software.
# Licensed under CANN Open Software License Agreement Version 1.0 (the "License").
# Please refer to the License for details. You may not use this file except in compliance with the License.
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
# See LICENSE in the root of the software repository for the full text of the License.
# ======================================================================================================================

import os
import shutil
import re
from tbe.common.platform import get_soc_spec
from tbe.tikcpp import compile_op, get_code_channel, OpInfo
from tbe.tikcpp.compile_op import CommonUtility, AscendCLogLevel
from tbe.common.buildcfg import get_current_build_config


def camel_to_snake(camel_str):
    # 使用正则表达式匹配大写字母
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', camel_str)
    # 使用正则表达式匹配小写字母后跟大写字母的情况
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def get_shortsoc_compile_option(compile_option_list: list, shortsoc: str):
    compile_options = []
    if shortsoc in compile_option_list:
        compile_options.extend(compile_option_list[shortsoc])
    if '__ALLSOC__' in compile_option_list:
        compile_options.extend(compile_option_list['__ALLSOC__'])
    return compile_options


def _build_args(args_list, input_num, output_num):
    _inputs_ = []
    _outputs_ = []
    _origin_inputs_ = []
    _origin_outputs_ = []
    # 遍历args中的每个元素
    for i, arg in enumerate(args_list[:(input_num + output_num)]):
        if i < input_num:
            msg = "Processing input " + str(i) + ":" + str(arg)
            CommonUtility.print_compile_log("", msg, AscendCLogLevel.LOG_INFO)
            _origin_inputs_.append(arg)
            if arg is not None:
                if isinstance(arg, (list, tuple)):
                    if len(arg) == 0:
                        continue
                    _inputs_.append(arg[0])
                else:
                    _inputs_.append(arg)
            else:
                _inputs_.append(arg)
            _inputs_[-1]["param_name"] = "input" + str(i)
            shape = _inputs_[-1]["shape"]
            ori_shape = _inputs_[-1]["ori_shape"]
            _inputs_[-1]["shape"] = shape + (-1,)
            _inputs_[-1]["ori_shape"] = ori_shape + (-1,)
        else:
            msg = "Processing output " + str(i - input_num) + ":" + str(arg)
            CommonUtility.print_compile_log("", msg, AscendCLogLevel.LOG_INFO)
            _origin_outputs_.append(arg)
            if arg is not None:
                if isinstance(arg, (list, tuple)):
                    if len(arg) == 0:
                        continue
                    _outputs_.append(arg[0])
                else:
                    _outputs_.append(arg)
            else:
                _outputs_.append(arg)
            _outputs_[-1]["param_name"] = "output" + str(i - input_num)
            shape = _outputs_[-1]["shape"]
            ori_shape = _outputs_[-1]["ori_shape"]
            _outputs_[-1]["shape"] = shape + (-1,)
            _outputs_[-1]["ori_shape"] = ori_shape + (-1,)
    return _origin_inputs_, _origin_outputs_, _inputs_, _outputs_


def _build_options(temp_build_dir, impl_mode):
    options = ["-x", "cce"]
    bisheng = os.environ.get('BISHENG_REAL_PATH')
    if bisheng is None:
        bisheng = shutil.which("bisheng")
    if bisheng is not None:
        bisheng_path = os.path.dirname(bisheng)
        tikcpp_path = os.path.realpath(os.path.join(bisheng_path, "..", "..", "tikcpp"))
    else:
        tikcpp_path = os.path.realpath("/usr/local/Ascend/latest/compiler/tikcpp")
    options.append("-I" + tikcpp_path)
    options.append("-I" + os.path.join(tikcpp_path, "..", "..", "include"))
    options.append("-I" + os.path.join(tikcpp_path, "tikcfw"))
    options.append("-I" + os.path.join(tikcpp_path, "tikcfw", "impl"))
    options.append("-I" + os.path.join(tikcpp_path, "tikcfw", "interface"))
    options.append("-I" + os.path.join(temp_build_dir))
    if impl_mode == "high_performance":
        options.append("-DHIGH_PERFORMANCE=1")
    elif impl_mode == "high_precision":
        options.append("-DHIGH_PRECISION=1")
    if get_current_build_config("enable_deterministic_mode") == 1:
        options.append("-DDETERMINISTIC_MODE=1")
    else:
        options.append("-DDETERMINISTIC_MODE=0")

    custom_compile_options = {'_ALLSOC_': ['--cce-auto-sync=off', '-Wno-deprecated-declarations', '-Werror']},
    custom_all_compile_options = {},
    soc_short = get_soc_spec("SHORT_SOC_VERSION").lower()
    custom_compile_options_soc = get_shortsoc_compile_option(custom_compile_options[0], soc_short)
    custom_all_compile_options_soc = get_shortsoc_compile_option(custom_all_compile_options[0], soc_short)
    options += custom_all_compile_options_soc
    options += custom_compile_options_soc
    return options


def ascbc_kernel_compile(
    *args, 
    graph_name, 
    kernel_name, 
    input_num, 
    output_num, 
    temp_build_dir, 
    impl_mode,
    use_list_tensor_desc,
    enable_parallel_compile
):
    graph_name = camel_to_snake(graph_name)
    args_list = args[0]
    if use_list_tensor_desc:
        inputs = args_list[:input_num]
        outputs = args_list[input_num: input_num + output_num]
        args_list = [inputs, outputs]
        input_num = 1
        output_num = 1
        param_type = 'dynamic'
    else:
        param_type = 'required'

    _origin_inputs_, _origin_outputs_, _inputs_, _outputs_ = \
        _build_args(args_list, input_num=input_num, output_num=output_num)
    _options_ = _build_options(temp_build_dir, impl_mode)
    if enable_parallel_compile:
        _options_ += ['--cce-long-call=true']
        os.environ['ASCENDC_PAR_COMPILE_JOB'] = '1'

    origin_func_name = graph_name
    ascendc_src_file = graph_name + "_op_kernel.cpp"
    src = os.path.join(temp_build_dir, ascendc_src_file)
    msg = "start compile Acend C Operator Ascbc, kernel name is " + kernel_name
    CommonUtility.print_compile_log("", msg, AscendCLogLevel.LOG_INFO)
    code_channel = get_code_channel(src, kernel_name, "AscBc", _options_)

    msg = f"op info inputs num:{len(_inputs_)}, origin inputs num:{len(_origin_inputs_)}, "
    msg += f"output num:{len(_outputs_)}, origin outputs num:{len(_origin_outputs_)}"
    CommonUtility.print_compile_log("", msg, AscendCLogLevel.LOG_INFO)
    op_info = OpInfo(kernel_name=kernel_name, op_type="AscBc", inputs=_inputs_, outputs=_outputs_,
                     attrs=[], impl_mode=impl_mode, origin_inputs=_origin_inputs_, origin_outputs=_origin_outputs_,
                     param_type_dynamic=use_list_tensor_desc, mc2_ctx=[],
                     param_type_list=[param_type] * (input_num + output_num),
                     init_value_list=[], output_shape_depend_on_compute=[])
    extend_option = {}
    extend_option["enable_no_tiling_func_compile"] = "enable"
    compile_op(src, origin_func_name, op_info, _options_, code_channel, '{}', extend_option)
    kernel_bin_name = kernel_name + ".o"
    kernel_json_name = kernel_name + ".json"
    _kernel_bin_file_ = os.path.join(get_current_build_config("kernel_meta_parent_dir"), "kernel_meta",
                                     kernel_bin_name)
    _kernel_json_file_ = os.path.join(get_current_build_config("kernel_meta_parent_dir"), "kernel_meta",
                                      kernel_json_name)
    return _kernel_bin_file_, _kernel_json_file_
