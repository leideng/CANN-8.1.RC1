#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
auto search log util
"""
import inspect
import logging
import os
import sys
from datetime import datetime

from tbe.common.utils.AscendLog import LOGGER

SUB_MODULE = "AUTO_SEARCH"
RUN_LOG_MASK = 0x01000000
_IS_USE_SLOG = False if LOGGER.log is None else True

if not _IS_USE_SLOG:
    _logger = logging.getLogger(SUB_MODULE)
    if not _logger.handlers:
        _logger.setLevel(logging.INFO)
        _logger.propagate = False
        _stream_handler = logging.StreamHandler(stream=sys.stdout)
        _stream_handler.setLevel(logging.INFO)
        _stream_handler.setFormatter(logging.Formatter("[%(levelname)s][%(asctime)s]%(message)s"))
        _logger.addHandler(_stream_handler)


def info(msg, *args):
    """
    info log
    """
    if _IS_USE_SLOG:
        LOGGER.info(LOGGER.module.tune, f'{_get_sub_module()}{_get_log_location()}{msg}' % args)
    else:
        _logger.info(f'{_get_sub_module()}{_get_log_location()}{msg}', *args)


def debug(msg, *args):
    """
    debug log
    """
    if _IS_USE_SLOG:
        LOGGER.debug(LOGGER.module.tune, f'{_get_sub_module()}{_get_log_location()}{msg}' % args)
    else:
        _logger.debug(f'{_get_sub_module()}{_get_log_location()}{msg}', *args)


def warn(msg, *args):
    """
    warning log
    """
    if _IS_USE_SLOG:
        LOGGER.warn(LOGGER.module.tune, f'{_get_sub_module()}{_get_log_location()}{msg}' % args)
    else:
        _logger.warning(f'{_get_sub_module()}{_get_log_location()}{msg}', *args)


def error(msg, *args):
    """
    error log
    """
    if _IS_USE_SLOG:
        LOGGER.error(LOGGER.module.tune, f'{_get_sub_module()}{_get_log_location()}{msg}' % args)
    else:
        _logger.error(f'{_get_sub_module()}{_get_log_location()}{msg}', *args)


def event(msg, *args):
    """
    error log
    """
    if _IS_USE_SLOG:
        LOGGER.info(LOGGER.module.tune | RUN_LOG_MASK, f'{_get_sub_module()}{_get_log_location()}{msg}' % args)
    else:
        # logging does not have event log level, so we use print
        print(f'[INFO] TUNE:{datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")}',
              f'{_get_sub_module()}{_get_log_location()}{msg}' % args)


def _get_log_location():
    """
    get auto search log called location, contains the file name, line number and function name.
    warning: the correctness of the result depends on the structure of the package(root_package/utils/logger.py)
    """
    line_no = inspect.currentframe().f_back.f_back.f_lineno
    co_name = inspect.currentframe().f_back.f_back.f_code.co_name
    co_filename = inspect.currentframe().f_back.f_back.f_code.co_filename
    project_root_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir)
    filename = os.path.relpath(co_filename, project_root_path)

    return f'[{filename}:{line_no}][{co_name}]'


def _get_sub_module():
    """
    get sub module
    :return:
    """
    return f'[{SUB_MODULE}]'
