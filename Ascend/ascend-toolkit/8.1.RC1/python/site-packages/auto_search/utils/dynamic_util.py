#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
data classes
"""
from dataclasses import make_dataclass
from enum import Enum

DyncComputeInfo = make_dataclass(
    'DyncComputeInfo',
    ['dync_compute', 'tensor_list', 'op_context', 'compute_context', 'cheque_list_list', 'tune_info_list'])


TuneInfo = make_dataclass(
    'TuneInfo',
    ['cheque_id', 'covered_range', 'tiling_meta_info'])


TilingMetaInfo = make_dataclass(
    'TilingMetaInfo',
    ['block_split_info', 'ub_split_info_list'])


BlockSplitInfo = make_dataclass(
    'BlockSplitInfo',
    ['block_split_axis', 'bind_axes', 'block_factor_name', 'core_num', 'block_dim'])


UbSplitInfo = make_dataclass(
    'UbSplitInfo',
    ['stage_id', 'ub_split_axis', 'ub_calc_axes', 'ub_factor_name', 'ub_count'])


RangeExpression = make_dataclass(
        'RangeExpression',
        ['multiply_axis_list', 'compare_symbol', 'compare_num'])


RangeExpressionEnhance = make_dataclass(
        'RangeExpressionEnhance',
        ['axes_expression', 'compare_symbol', 'compare_num'])


InputVarLocation = make_dataclass('InputVarLocation', ['var', 'dim_index', 'input_index'])


InputShapeAndInputVars = make_dataclass('InputShapeAndInputVars', ['input_shape', 'input_vars'])
InputsAndOutputsDesc = make_dataclass('InputAndOutputDesc',
                                      ['inputs_shape', 'input_vars', 'inputs_vars_location', 'outputs_shape'])


class Relationship(Enum):
    """
    enum the relationship between dynamic axes with tiling, there are 4 kind of cases
    """
    # 1. dynamic axes only participate block_tiling
    ONLY_PARTICIPATE_BLOCK_TILING = 0
    # 2. dynamic axes only participate ub_tiling
    ONLY_PARTICIPATE_UB_TILING = 1
    # 3. dynamic axes participate ub_tiling and block_tiling
    PARTICIPATE_BLOCK_AND_UB_TILING = 2
    # 4. dynamic axes don't participate ub_tiling and block_tiling
    NOT_PARTICIPATE = 3


class CompareSymbol(Enum):
    """
    enum compare symbol in range expression
    """
    LESS_EQUAL = 0
    GREATER_EQUAL = 1
    EQUAL = 2
    NOT_EQUAL = 3
    LESS = 4
    GREATER = 5


COMPARE_SYMBOL_DICT = {
    0: '<=',
    1: '>=',
    2: '==',
    3: '!=',
    4: '<',
    5: '>',
}


COMPARE_SYMBOL_STR_TO_NUM = {
    '<=': 0,
    '>=': 1,
    '==': 2,
    '!=': 3,
    '<': 4,
    '>': 5,
}


INFER_RANGE_JUDGE_SYMBOL = {0: lambda x, y: True if x <= y else False,
                            1: lambda x, y: True if x >= y else False,
                            2: lambda x, y: True if x == y else False,
                            3: lambda x, y: True if x != y else False,
                            4: lambda x, y: True if x < y else False,
                            5: lambda x, y: True if x > y else False,
                            }


class CalculateSymbol(Enum):
    """
    enum axis calculate symbol
    """
    ADD = 0  # +
    SUB = 1  # -
    MUL = 2  # *
    DIV = 3  # /
    MOD = 4  # %


CALCULATE_SYMBOL_DICT = {
    0: '+',
    1: '-',
    2: '*',
    3: '/',
    4: '%',
}


CALCULATE_SYMBOL = {0: lambda x, y: x + y,
                    1: lambda x, y: x - y,
                    2: lambda x, y: x * y,
                    3: lambda x, y: x / y,
                    4: lambda x, y: x % y,
                    }
