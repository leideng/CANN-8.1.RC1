#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
soc cfg
"""
import os
from tbe.common.platform.platform_info import get_soc_spec
from tbe.common.buildcfg import GlobalInfoContainer


class SocVersion:
    """
    SocVersion
    """
    ASCEND910 = "Ascend910"
    ASCEND910A = "Ascend910A"
    ASCEND910B = "Ascend910B"
    ASCEND610 = "Ascend610"
    ASCEND310 = "Ascend310"
    ASCEND310B = "Ascend310B"
    ASCEND310P = "Ascend310P"
    ASCEND910P = "Ascend910ProA"
    HI3796CV300CS = "Hi3796CV300CS"
    HI3796CV300ES = "Hi3796CV300ES"
    SD3403 = "SD3403"
    BS9SX1A = "BS9SX1A"
    ASCEND910B2 = "Ascend910B2"

    def useless_func1(self):
        """
        useless_func1
        :return:
        """
        return self.ASCEND610

    def useless_func2(self):
        """
        useless_func2
        :return:
        """
        return self.ASCEND910


def get_soc_version():
    """

    :return:
    """
    return get_soc_spec("SOC_VERSION")


def get_full_soc_version():
    """

    :return:
    """
    return get_soc_spec("FULL_SOC_VERSION")


def get_ub_size():
    """

    :return:
    """
    return get_soc_spec("UB_SIZE")


def get_core_num():
    """

    :return:
    """
    return get_soc_spec("CORE_NUM")


def set_product_code():
    """
    gen set soc info code
    :return:
    """
    full_soc_version = get_soc_spec("FULL_SOC_VERSION")
    core_type = get_soc_spec("AICORE_TYPE")
    aicore_num = get_soc_spec("CORE_NUM")
    kmp_dir = kernel_meta_parent_dir()
    ret_code = "set_current_compile_soc_info('%s', core_type='%s', " \
               "aicore_num=%s)\n" \
               % (full_soc_version, core_type, aicore_num)
    ret_code = "%skmp_dir = '%s'" % (ret_code, kmp_dir)

    return ret_code


def kernel_meta_parent_dir():
    """
    :return:
    """
    base_dir = os.path.realpath(GlobalInfoContainer.global_info["kernel_meta_parent_dir"])
    return base_dir


def kernel_meta_dir():
    """
    :return:
    """
    return os.path.join(kernel_meta_parent_dir(), 'kernel_meta')


def get_cfg_val(src, dtype, default, drange=None):
    """
    """
    if dtype == 'bool':
        if str(src).strip().lower() == 'true':
            return True
        if str(src).strip().lower() == 'false':
            return False
        return default
    elif dtype == 'int':
        val = default
        if str(src).strip().isdigit():
            val = int(str(src).strip())
            if drange and val not in drange:
                val = default
        return val

    return default


def _get_all_versions():
    """
    :return:
    """
    all_versions = []
    for attr in dir(SocVersion):
        if not callable(getattr(SocVersion, attr)) and not attr.startswith("__"):
            all_versions.append(getattr(SocVersion, attr))
    return all_versions


ALL_SOC_VERSIONS = _get_all_versions()
