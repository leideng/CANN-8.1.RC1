#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
This search strategy will traverse the whole search space by dfs alg with mcts node
"""
import time
from auto_search.utils import logger
from auto_search.search_strategy.mcts_node import MCTSNode
from auto_search.solution_space.progress import Progress
from auto_search.search_strategy.searcher import strategy_register
from auto_search.solution_space.prepare_action.first_todo.first_todo_action import FirstTodoAction


@strategy_register('traversal')
def search(op_schedule_info):
    """
    traverse the whole search space by dfs alg with mcts node
    """
    count_total = 0
    count_done = 0

    start = time.time()

    progress = Progress(op_schedule_info, 0, FirstTodoAction(op_schedule_info.op_pattern))
    root = MCTSNode(progress)
    layer_nodes = [root]
    while layer_nodes:
        node = layer_nodes.pop()
        if node.is_dead():
            logger.warn('run into a dead node: %s', node)
            continue
        if node.is_done():
            _ = node.get_value()
            count_done += 1
            logger.info(f'count done: {count_done}, done node: {node}')
            continue
        actions = [i for i, v in enumerate(node.illegal_actions) if v == 0]
        for action in actions:
            new_progress = node.progress.get_next_progress(action)
            child = MCTSNode(new_progress, action, node)
            layer_nodes.append(child)
            count_total += 1
            logger.debug(f'count total: {count_total}, new node: {child}')
    logger.info("traversal search total time cost: %d(s)", (time.time() - start))
    return True
