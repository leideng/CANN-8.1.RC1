#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
This search strategy will traverse the whole search space by random alg.
This search strategy can not guarantee to traverse the whole search space,
however, this strategy can be used when the search space is large.
"""
import random

from auto_search.utils import logger
from auto_search.search_strategy.mcts_node import MCTSNode
from auto_search.solution_space.progress import Progress
from auto_search.search_strategy.searcher import strategy_register
from auto_search.solution_space.prepare_action.first_todo.first_todo_action import FirstTodoAction


@strategy_register('random')
def search(op_schedule_info):
    progress = Progress(op_schedule_info, 0, FirstTodoAction(op_schedule_info.op_pattern))
    root = MCTSNode(progress)
    layer_nodes = [root]
    while layer_nodes:
        node = layer_nodes.pop()
        if node.is_dead():
            logger.warn('run into a dead node: %s', node)
            break
        if node.is_done():
            node.get_value()
            logger.info('leaf node: %s', node)
            break

        actions = [i for i, v in enumerate(node.illegal_actions) if v == 0]
        action = random.choice(actions)
        new_progress = node.progress.get_next_progress(action)
        child = MCTSNode(new_progress, action, node)
        layer_nodes.append(child)
