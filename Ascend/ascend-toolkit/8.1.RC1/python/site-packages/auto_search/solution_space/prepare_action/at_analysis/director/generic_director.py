#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common director
"""
from auto_search.solution_space.action import director_register
from auto_search.solution_space.action import PrepareActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.cache_read.cache_read_action import CacheReadAction
from auto_search.solution_space.search_action.at_stage.at_stage_action import AtStageAction
from auto_search.solution_space.search_action.choose_cache_clone.choose_cache_clone_action import \
    ChooseCacheCloneAction
from auto_search.solution_space.search_action.align_pad.align_pad_action import AlignPadAction
from auto_search.compute_analysis import support_align_pad_search


def _direct_to_at_stage(pattern, stages_info):
    """
    direct to at stage
    :param pattern:
    :param stages_info:
    :return:
    """
    next_action = None
    for stage_index in range(len(stages_info) - 1, -1, -1):
        workspace_info = stages_info[stage_index].get('at_info', None)
        for consumer_id, consumer in enumerate(workspace_info.consumers):
            if len(consumer.at_candidates) > 1 and consumer.sampled_target is None:
                next_action = AtStageAction(pattern, stage_index, consumer_id)
                return next_action

    return next_action


@director_register(
    [ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.TRANSPOSE],
    PrepareActionType.AT_ANALYSIS)
def direct(progress):
    """
    common direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return


@director_register([ComputePattern.REDUCE, ComputePattern.TUPLE_REDUCE], PrepareActionType.AT_ANALYSIS)
def reduce_direct(progress):
    """
    reduce direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern

    next_action = _direct_to_at_stage(pattern, stages_info)
    if next_action:
        progress.todo = next_action
        return

    if support_align_pad_search(progress):
        next_action = AlignPadAction(pattern)
        progress.todo = next_action
        return
    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return


@director_register([ComputePattern.NORM], PrepareActionType.AT_ANALYSIS)
def norm_direct(progress):
    """
    norm direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern

    next_action = _direct_to_at_stage(pattern, stages_info)
    if next_action:
        progress.todo = next_action
        return

    for stage_index, _ in enumerate(stages_info):
        at_info = stages_info[stage_index].get('at_info', None)
        if at_info and at_info.is_fork() and \
                not {'placeholder', 'workspace', 'cache_clone'} & \
                    set(stages_info[stage_index].get('type', [])):
            progress.todo = ChooseCacheCloneAction(pattern, stage_index)
            return

    # if the last axis is not aligned, the next step is to sample align_pad
    if progress.op_schedule_info.compute_graph_info.align_pad_tensor_list:
        next_action = AlignPadAction(pattern)
        progress.todo = next_action
        return

    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return


@director_register([ComputePattern.POOLING], PrepareActionType.AT_ANALYSIS)
def pooling_direct(progress):
    """
    pooling direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern

    next_action = _direct_to_at_stage(pattern, stages_info)
    if next_action:
        progress.todo = next_action
        return

    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return
