#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
import importlib

from auto_search.utils import logger
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.utils import get_schedule_action_rules
from auto_search.solution_space.progress import Progress


@apply_action_register(
    [ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.REDUCE, ComputePattern.NORM,
     ComputePattern.TRANSPOSE, ComputePattern.POOLING, ComputePattern.TUPLE_REDUCE],
    ScheduleActionType.DOUBLE_BUFFER)
def apply(progress: Progress) -> bool:
    """
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    # is_open_db is set in search action
    logger.debug("op_schedule_info.is_open_db: %s", op_schedule_info.is_open_db)

    op_pattern = progress.op_schedule_info.op_pattern
    rules = get_schedule_action_rules(op_pattern, "proc_double_buffer")

    op_schedule_info = progress.op_schedule_info
    schedule_obj = op_schedule_info.schedule_obj

    logger.debug('Start to proc_double_buffer.')
    op_schedule_info.code_lines.extend(['# double_buffer code'])
    op_schedule_info.double_buffer_list = []
    for stage_index in range(len(schedule_obj.stages)):
        for rule in rules:
            rule_module = importlib.import_module(rule)
            rule_module.proc(op_schedule_info, stage_index)

    logger.debug("apply double buffer done.")
    return True
