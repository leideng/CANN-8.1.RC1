#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
get schedule action rules
"""
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_ELEMWISE
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_NORM
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_REDUCE
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_TUPLE_REDUCE
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_TRANSPOSE
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_BROADCAST
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_POOLING
from auto_search.solution_space.schedule_action.schedule_rules_cfg import T2C_CFG_ALL
from auto_search.compute_analysis import ComputePattern

pattern_t2c_cfg_map = {
    ComputePattern.ELEMENTWISE: T2C_CFG_ELEMWISE,
    ComputePattern.NORM: T2C_CFG_NORM,
    ComputePattern.BROADCAST: T2C_CFG_BROADCAST,
    ComputePattern.TRANSPOSE: T2C_CFG_TRANSPOSE,
    ComputePattern.REDUCE: T2C_CFG_REDUCE,
    ComputePattern.POOLING: T2C_CFG_POOLING,
    ComputePattern.TUPLE_REDUCE: T2C_CFG_TUPLE_REDUCE
}


def get_schedule_action_rules(op_pattern, proc_name):
    t2c_cfg = pattern_t2c_cfg_map.get(op_pattern, T2C_CFG_ALL)

    sch_action_name = proc_name.split('proc_')[-1].strip()
    sch_action_path = 'auto_search.solution_space.schedule_action'

    rules = []
    for proc_index, proc_cfg in sorted(t2c_cfg.items(), key=lambda x: x[0]):
        if proc_cfg.get('proc_name', '') == proc_name:
            for rule, rule_cfg in proc_cfg['rules'].items():
                whole_rule = f'{sch_action_path}.{sch_action_name}.apply_action.rules.{rule}'
                rules.append(whole_rule)
    return rules


def get_prepare_action_rules(op_pattern, proc_name):
    t2c_cfg = pattern_t2c_cfg_map.get(op_pattern, T2C_CFG_ALL)

    sch_action_name = proc_name.split('proc_')[-1].strip()
    sch_action_path = 'auto_search.solution_space.prepare_action'

    rules = []
    for proc_index, proc_cfg in sorted(t2c_cfg.items(), key=lambda x: x[0]):
        if proc_cfg.get('proc_name', '') == proc_name:
            rules = []
            for rule, rule_cfg in proc_cfg['rules'].items():
                whole_rule = f'{sch_action_path}.{sch_action_name}.apply_action.rules.{rule}'
                rules.append(whole_rule)
    return rules
