#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
rl schedule search, tss
"""
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.solution_space.tensor_cfg import INVALID_AT_AXIS
from auto_search.solution_space.schedule_action.at.apply_action.rules.comm import get_my_at_target
from auto_search.solution_space.schedule_action.at.apply_action.rules.comm import get_at_choices_from_axis_info
from auto_search.solution_space.schedule_action.at.apply_action.rules.comm import ensure_at
from auto_search.solution_space.schedule_action.at.apply_action.rules.comm import get_max_offset
from auto_search.solution_space.progress import Progress


def _ensure_at_axis(progress, reversed_stages, at_dict, at_targets):
    """

    :param progress:
    :param reversed_stages:
    :param at_dict:
    :param at_targets:
    :return:
    """
    stage_num = len(reversed_stages)
    axis_info_list = progress.op_schedule_info.axis_info_list
    for reverse_index in range(stage_num):
        stage_index = stage_num - reverse_index - 1
        clean_at = progress.action_tensor[stage_index][
            ActionTensorCfg.at_s]

        if clean_at == INVALID_AT_AXIS:
            at_targets[stage_index] = None
            continue

        at_choice_index = clean_at if clean_at != -1 else 0
        at_stage_index = at_dict[stage_index]
        my_at_choices = get_at_choices_from_axis_info(
            axis_info_list[at_stage_index])

        if at_choice_index > len(my_at_choices) - 1:
            at_choice_index = len(my_at_choices) - 1

        max_offset = get_max_offset(progress, my_at_choices, at_choice_index, at_targets, stage_index)

        at_choices = my_at_choices[at_choice_index][:max_offset + 1]

        at_targets[stage_index] = get_my_at_target(at_choices)


def proc(progress: Progress) -> bool:
    """
    get compute at axis
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    sch = op_schedule_info.schedule_obj
    at_dict = op_schedule_info.at_dict
    stage_num = len(op_schedule_info.feature_tensor)
    at_choices = []
    for _ in range(stage_num):
        at_choices.append([])

    at_targets = [None] * stage_num
    reversed_stages = list(sch.stages)
    reversed_stages.reverse()

    ensure_at(progress, reversed_stages, at_dict, at_targets)

    _ensure_at_axis(progress, reversed_stages, at_dict, at_targets)

    op_schedule_info.at_targets = at_targets
    return True
