#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
split a stage for pooling
"""
from typing import List
from typing import Tuple

from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.bank.cheque_generator import get_axis_cheque
from auto_search.solution_space.progress import Progress
from auto_search.solution_space.op_schedule_info import OpScheduleInfo

from .split_a_stage import SplitStageParam
from .split_a_stage import SplitAxisParam
from .split_a_stage import split_axis_proc


def split_axis(op_schedule_info: OpScheduleInfo, split_stage_param: SplitStageParam) -> int :
    """
    split_axis
    :param op_schedule_info:
    :param split_stage_param
    :return:
    """

    for axis_index, axis in enumerate(split_stage_param.stage_axis_obj):
        factor = split_stage_param.split_vector[axis_index]
        axis_name = f"{split_stage_param.stage_name}_{split_stage_param.axis_type}_{axis_index}"
        axis_len = axis.dom.extent.value
        split_axis_param = SplitAxisParam(factor, axis, axis_index, axis_name, axis_len)
        split_axis_proc(op_schedule_info, split_stage_param, split_axis_param)

    return split_stage_param.cut_axis_index


def split_a_stage_for_pooling(progress: Progress, stage_index: int) -> Tuple[List, List, int]:
    """
    split_a_stage
    :param progress:
    :param stage_index:
    :return:
    """
    code_lines = []
    stage_axis_info = []
    op_schedule_info = progress.op_schedule_info
    stage = op_schedule_info.schedule_obj.stages[stage_index]
    split_vector = progress.action_tensor[stage_index][
                   ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]
    stage_name = op_schedule_info.stages_info[stage_index]['name']
    cut_axis_index = 0

    axis_cheque_list = get_axis_cheque(op_schedule_info.schedule_obj.stages[stage_index], stage_index)
    op_schedule_info.cheque_list.extend(axis_cheque_list)

    code_lines.append(f'# split factor info: {list(split_vector)}')
    stage_info = op_schedule_info.stages_info[stage_index]
    stage_ordered_axes_obj = stage_info.get('stage_ordered_axes_obj')
    axis_type = "axis"
    if stage_ordered_axes_obj:
        axis_type = "reduce_axis"

    for idx, factor in enumerate(split_vector):
        if factor == 0:
            continue
        cut_axis_index = idx

    if axis_type == "reduce_axis":
        for axis_index, axis in enumerate(stage.op.axis):
            axis_name = f'{stage_name}_axis_{axis_index}'
            code_lines.append('%s = sch[%s].op.axis[%d]' % (axis_name, stage_name, axis_index))
            stage_axis_info.append(
                AxisInfo(axis_name,
                         stage.op.axis[axis_index].dom.extent.value,
                         'axis', axis_index, 'all', axis))

        stage_axis_obj = stage.op.reduce_axis
    else:
        stage_axis_obj = stage.op.axis

    split_stage_param = SplitStageParam(code_lines, stage_axis_info, stage_axis_obj, split_vector, stage,
                                        stage_index, stage_name, cut_axis_index, axis_type)

    split_axis(op_schedule_info, split_stage_param)

    return split_stage_param.code_lines, split_stage_param.stage_axis_info, split_stage_param.cut_axis_index
