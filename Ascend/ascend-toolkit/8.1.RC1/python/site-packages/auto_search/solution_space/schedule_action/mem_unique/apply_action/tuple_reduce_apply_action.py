#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
generic apply action
"""
from auto_search.utils import logger
from auto_search.bank.cheque_generator import get_mem_uniq_cheque
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.progress import Progress


@apply_action_register([ComputePattern.TUPLE_REDUCE], ScheduleActionType.MEM_UNIQUE)
def apply(progress: Progress):
    """
    when operator only have one input, do mem_unique for this stage
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    placeholder_index_list = []
    for stage_index, stage_info in enumerate(op_schedule_info.stages_info):
        if "CacheRead" in stage_info.get('type', []) and "mem_copy" in stage_info.get('tag', []):
            placeholder_index_list.append(stage_index)
    if len(placeholder_index_list) != 1:
        return
    placeholder_index = placeholder_index_list[0]
    # do mem_unique
    op_schedule_info.schedule_obj.stages[placeholder_index].mem_unique()
    # save mem_unique code lines
    stage_name = op_schedule_info.stages_info[placeholder_index]['name']
    code_lines = ['\n', '# mem_unique code']
    code_lines.append(f'sch[{stage_name}].mem_unique()')
    # gen mem_unique cheque
    for stage_index in placeholder_index_list:
        cheque = get_mem_uniq_cheque(stage_index)
        op_schedule_info.cheque_list.append(cheque)
    op_schedule_info.code_lines.extend(code_lines)
    logger.debug('apply mem_unique done!')
    return
