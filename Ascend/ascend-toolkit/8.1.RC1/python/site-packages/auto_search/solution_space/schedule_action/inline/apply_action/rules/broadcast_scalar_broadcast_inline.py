#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
inline rule
"""
from __future__ import absolute_import

from functools import reduce

from tbe.dsl.unify_schedule.constants import SUPPORT_SCALAR_INSNS
from auto_search.solution_space.schedule_action.inline.apply_action.rules. \
    comm import get_real_fanin_fanout
from auto_search.solution_space.progress import Progress


def get_dsl_insn(stage: object) -> str:
    """
    :param stage:
    :return:
    """
    tag = stage.op.tag
    if stage.op.tag.find("|") != -1:
        insn = tag.split("|")[0]
    else:
        insn = tag
    return insn


def support_scalar(stage:object) -> bool:
    """
    :param stage:
    :return:
    """
    return get_dsl_insn(stage) in SUPPORT_SCALAR_INSNS


def get_stage_axes_size(stage: object) -> int:
    """
    get_stage_axes_size
    :param stage:
    :return:
    """
    shape = []
    total_size = 1
    for axis in stage.op.axis:
        shape.append(int(axis.dom.extent.value))
        total_size = reduce(
            lambda x, y: x * y, shape)

    return total_size


def proc(progress: Progress, stage_index: int) -> bool:
    """
    scalar broadcast inline rule
    :param progress:
    :param stage_index:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    stage = op_schedule_info.schedule_obj.stages[stage_index]
    if stage.op.tag not in ['broadcast', 'unified_broadcast']:
        return False

    fanin_list, fanout_list = get_real_fanin_fanout(op_schedule_info.schedule_obj, stage_index)

    if len(fanin_list) != 0 and get_stage_axes_size(op_schedule_info.schedule_obj.stages[fanin_list[0]]) != 1:
        return False
    # output tensor no need inline
    if op_schedule_info.stages_info[stage_index].get('type') in ['leaf', 'inter_out']:
        return False
    # if the consumer node support scalar calc, this node can inline
    if all(support_scalar(op_schedule_info.schedule_obj.stages[output_stage_index])
           for output_stage_index in fanout_list):
        return True

    return False
