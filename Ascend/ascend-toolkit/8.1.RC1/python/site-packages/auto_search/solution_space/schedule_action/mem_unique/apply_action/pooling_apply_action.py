#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
from typing import NoReturn

from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.bank.cheque_generator import get_mem_uniq_cheque
from auto_search.solution_space.progress import Progress
from auto_search.utils import logger


@apply_action_register([ComputePattern.POOLING], ScheduleActionType.MEM_UNIQUE)
def apply(progress: Progress) -> NoReturn:
    """
    apply function
    :param progress:
    :return:
    """

    sch = progress.op_schedule_info.schedule_obj
    stages_info = progress.op_schedule_info.stages_info
    code_lines = ['\n', '# mem_unique code']
    if len(progress.op_schedule_info.input_info_list) == 1:
        for stage_index, stage in enumerate(sch.stages):
            if stage_index in progress.op_schedule_info.inlined_stages:
                continue
            if '.local.' not in stage.op.name:
                continue
            stage_name = stages_info[stage_index].get('name', '')
            code_lines.append('sch[%s].mem_unique()' % stage_name)
            stage.mem_unique()
            cheque = get_mem_uniq_cheque(stage_index)
            progress.op_schedule_info.cheque_list.append(cheque)
            break

    progress.op_schedule_info.code_lines.extend(code_lines)
    logger.debug("apply mem unique done.")
