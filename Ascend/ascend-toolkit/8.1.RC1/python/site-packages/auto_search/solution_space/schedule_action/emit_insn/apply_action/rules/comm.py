#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
comm
"""
from auto_search.utils import logger


EXTRA_SPACE_DEFAULT = 21632


def get_use_ub_size(op_schedule_info):
    """
    :param op_schedule_info:
    :return:
    """
    stage_index = op_schedule_info.stage_index
    current_stage_axes_info = op_schedule_info.axis_info_list[stage_index]
    axis_index_in_ub = False
    in_ub_size = 1
    for axis_index, axis_info in enumerate(current_stage_axes_info):
        if axis_info.name.endswith('_ii') or axis_info.name.endswith('_i'):
            axis_index_in_ub = True
        if axis_index_in_ub:
            in_ub_size = in_ub_size * axis_info.len

    return in_ub_size


def get_emit_insn_axis(stage, stage_index, axis_info_list, stage_info):
    """
    :param stage:
    :param stage_index:
    :param axis_info_list:
    :param stage_info:
    :return:
    """
    axis_num = 0
    curr_axis_info_list = axis_info_list[stage_index]

    # no split stage, emit_insn_axis is op.axis[0]
    if curr_axis_info_list is None:
        emit_insn_axis = "sch[%s].op.axis[%s]" % (stage_info["name"], 0)
        emit_insn_axis_obj = stage.op.axis[0]
        return axis_num, emit_insn_axis, emit_insn_axis_obj

    first_axis_info_not_endwith_o = None
    first_axis_info_endwith_i_ii = None
    axis_num_not_endwith_o = 0
    axis_num_endwith_i_ii = 0
    for i, axis_info in enumerate(curr_axis_info_list):
        axis_name = axis_info.name
        if first_axis_info_not_endwith_o is None and axis_name.split("_")[-1] not in ['o', 'io']:
            axis_num_not_endwith_o = i
            first_axis_info_not_endwith_o = axis_info
        if first_axis_info_endwith_i_ii is None and axis_name.split("_")[-1] in ['i', 'ii']:
            axis_num_endwith_i_ii = i
            first_axis_info_endwith_i_ii = axis_info
        if first_axis_info_not_endwith_o and first_axis_info_endwith_i_ii:
            break

    if first_axis_info_endwith_i_ii:
        axis_num = axis_num_endwith_i_ii
        emit_insn_axis = first_axis_info_endwith_i_ii.name
        emit_insn_axis_obj = first_axis_info_endwith_i_ii.body
    else:
        axis_num = axis_num_not_endwith_o
        emit_insn_axis = first_axis_info_not_endwith_o.name
        emit_insn_axis_obj = first_axis_info_not_endwith_o.body

    logger.debug('stage_name: %s, emit_insn_axis: %s', stage_info["name"], emit_insn_axis)
    return axis_num, emit_insn_axis, emit_insn_axis_obj


def get_reuse_index(op_schedule_info, reuse_stage_index):
    """
    get reuse index
    :param op_schedule_info:
    :param reuse_stage_index:
    :return:
    """
    stages_info = op_schedule_info.stages_info
    stage_name = stages_info[reuse_stage_index]["name"]
    if stage_name in op_schedule_info.reuse_stages:
        reuse_index = op_schedule_info.reuse_stages.index(stage_name) + 1
    else:
        reuse_index = len(op_schedule_info.reuse_stages)
        op_schedule_info.reuse_stages.append(stage_name)
    return reuse_index
