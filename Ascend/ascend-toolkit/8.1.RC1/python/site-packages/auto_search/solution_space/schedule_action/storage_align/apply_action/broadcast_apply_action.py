#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
from typing import List

from auto_search.utils import logger
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.progress import Progress
from .norm_apply_action import do_storage_align


def need_align_stage_proc(progress: Progress, stage_index: int, all_fanin_list: List) -> bool:
    """
    :param progress:
    :param stage_index:
    :param all_fanin_list:
    :return:
    """
    op_schedule_info = progress.op_schedule_info

    if 'CacheRead' not in op_schedule_info.stages_info[stage_index].get('type', []):
        return False

    if 'broadcast_remove_pad' in op_schedule_info.stages_info[stage_index].get('type', []):
        return False

    if stage_index not in all_fanin_list:
        return False

    return True


@apply_action_register([ComputePattern.BROADCAST], ScheduleActionType.STORAGE_ALIGN)
def apply_for_broadcast(progress):
    """
    apply for transpose
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    cache_read_index_list = []
    for stage_index, _ in enumerate(op_schedule_info.schedule_obj.stages):
        stage_type = op_schedule_info.stages_info[stage_index].get('type', [])
        if "broadcast_remove_pad" in stage_type:
            cache_read_index_list.append(stage_index)

    if not cache_read_index_list:
        # if don't have remove pad cache_read stage, need not do storage_align
        return
    all_fanin_set = set()
    for cache_read_index in cache_read_index_list:
        all_fanin_set = all_fanin_set | set(op_schedule_info.all_fanin_dict[cache_read_index])
    all_fanin_list = list(all_fanin_set)
    # need_align_stage_index_list
    need_align_stage_index = []
    for stage_index, _ in enumerate(progress.op_schedule_info.stages_info):
        if need_align_stage_proc(progress, stage_index, all_fanin_list):
            need_align_stage_index.append(stage_index)

    do_storage_align(progress, need_align_stage_index)

    logger.debug("apply broadcast storage_align done.")


@apply_action_register([ComputePattern.BROADCAST], ScheduleActionType.STORAGE_ALIGN)
def apply_for_whether_compute_align(progress):
    """
    When have done compute_align, must also do storage_align
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    if op_schedule_info.compute_align_index:
        do_storage_align(progress, op_schedule_info.compute_align_index)

        logger.debug("After broadcast compute_align, broadcast storage_align have done")
