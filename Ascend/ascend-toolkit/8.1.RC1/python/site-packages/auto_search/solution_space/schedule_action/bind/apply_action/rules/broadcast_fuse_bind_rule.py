#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
broadcast bind rule
"""
from tbe import tvm

from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.utils import logger
from auto_search.solution_space.t2c_util import MODE_RUNTIME
from auto_search.solution_space.progress import Progress
from auto_search.bank.cheque_generator import get_fuse_cheque
from auto_search.solution_space.schedule_action.bind.apply_action.rules.comm import get_block_factor_and_block_dim
from auto_search.config import soc_cfg
from auto_search.bank.cheque_generator import get_split_cheque
from auto_search.bank.cheque_generator import get_bind_cheque


def proc(progress: Progress) -> bool:
    """
    broadcast fuse all axis before ub_i to bind core
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info

    # only one stage bind core
    bind_stage, bind_stage_index = op_schedule_info.bind_stages[0]

    # if current stage has been proc, skip
    if op_schedule_info.proc_flag_dict.get(bind_stage_index, False):
        return True

    block_split_outer_name = op_schedule_info.ub_split_outer_name
    if block_split_outer_name == "":
        return True

    bind_stage_name = op_schedule_info.stages_info[bind_stage_index]['name']
    logger.debug("bind_stage: %s, bind_stage_index: %s, bind_stage_name: %s",
                 bind_stage, bind_stage_index, bind_stage_name)

    # fuse
    fuse_axis_name = '%s_axis_fused_o' % bind_stage_name
    fused_axes_obj_list = []
    fused_axes_name = []
    index_list = []
    fuse_len = 1
    axis_info_list = op_schedule_info.axis_info_list[bind_stage_index]
    for axis_index, axis in enumerate(axis_info_list):
        fused_axes_obj_list.append(axis.body)
        fused_axes_name.append(axis.name)
        index_list.append(axis_index)
        fuse_len *= axis.len
        if axis.name == block_split_outer_name:
            break

    code_line = f"{fuse_axis_name} = sch[{bind_stage_name}].fuse({', '.join(fused_axes_name)})"
    op_schedule_info.code_lines.append(code_line)
    fused_axis_obj = None
    if op_schedule_info.mode == MODE_RUNTIME:
        fused_axis_obj = bind_stage.fuse(*fused_axes_obj_list)

    # axis_info_list update
    del axis_info_list[index_list[0]: index_list[-1] + 1]
    axis_info_list.insert(index_list[0],
                          AxisInfo(fuse_axis_name, fuse_len,
                                   'fused_axis', index_list[0], 'o', fused_axis_obj))
    op_schedule_info.axis_info_list[bind_stage_index] = axis_info_list

    fuse_cheque = get_fuse_cheque(bind_stage_index, index_list)
    op_schedule_info.cheque_list.append(fuse_cheque)

    core_num = soc_cfg.get_core_num()
    block_dim, block_factor = get_block_factor_and_block_dim(core_num, fuse_len, 0, axis_info_list)
    op_schedule_info.code_lines.append(f'# block_dim={block_dim}')
    op_schedule_info.code_lines.append('{}_oo, {}_o = sch[{}].split({}, factor={})'.format(
        fuse_axis_name, fuse_axis_name, bind_stage.op.name, fuse_axis_name, block_factor))

    axis_obj_o, axis_obj_i = bind_stage.split(fused_axis_obj, factor=block_factor)

    op_schedule_info.stages_info[bind_stage_index]["block_factor"] = block_factor

    del axis_info_list[0]
    axis_info_list.insert(0, AxisInfo(f"{fuse_axis_name}_o", block_factor, 'axis', index_list[0], 'o', axis_obj_i))
    axis_info_list.insert(0, AxisInfo(f"{fuse_axis_name}_oo", block_dim, 'axis', index_list[0], 'oo', axis_obj_o))

    cheque = get_split_cheque(bind_stage_index, 0, block_factor, "split")
    op_schedule_info.cheque_list.append(cheque)

    op_schedule_info.code_lines.append("block = tvm.thread_axis('blockIdx.x')")
    op_schedule_info.code_lines.append(
        "sch[%s].bind(%s, block)" %
        (bind_stage_name, f"{fuse_axis_name}_oo"))

    if op_schedule_info.mode == MODE_RUNTIME:
        block = tvm.thread_axis('blockIdx.x')
        bind_stage.bind(axis_obj_o, block)

    cheque = get_bind_cheque(bind_stage_index)
    op_schedule_info.cheque_list.append(cheque)

    op_schedule_info.proc_flag_dict[bind_stage_index] = True
    return True
