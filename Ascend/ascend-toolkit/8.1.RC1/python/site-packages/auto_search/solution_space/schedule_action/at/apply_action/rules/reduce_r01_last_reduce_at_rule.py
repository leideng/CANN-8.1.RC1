#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
rl schedule search, tss
"""
from typing import List

from auto_search.utils import logger
from auto_search.solution_space.progress import Progress
from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.solution_space.schedule_action.at.apply_action.rules.reduce_atomic_r02_last_reduce_at_rule import \
    rfactor_in_curr_stage_at


def proc(progress: Progress) -> bool:
    """
    last reduce and ub split last reduce axis and do rfactor
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    if op_schedule_info.is_atomic:
        return False

    # Two bool variables must have one true and one false to enter
    if not (op_schedule_info.last_reduce_and_ub_split_last_reduce_axis ^
            op_schedule_info.last_reduce_and_ub_split_nlast_reduce_axis):
        return False

    stage_num = len(op_schedule_info.feature_tensor)
    at_dict = op_schedule_info.at_dict
    at_targets = [None] * stage_num

    for stage_index, stage in enumerate(op_schedule_info.schedule_obj.stages):
        if str(stage.op).startswith("placeholder"):
            continue
        at_target_stage_index = at_dict[stage_index]
        if at_target_stage_index is None:
            continue
        at_target_stage_type = op_schedule_info.stages_info[at_target_stage_index].get('type', [])
        curr_stage_type = op_schedule_info.stages_info[stage_index].get('type', [])
        if "reduce_rfactor" in at_target_stage_type:
            _rfactor_in_at_target_stage_at(op_schedule_info, at_target_stage_index, at_targets, stage_index)
        elif "reduce_rfactor" in curr_stage_type:
            rfactor_in_curr_stage_at(op_schedule_info, at_target_stage_index, at_targets, stage_index)
        else:
            _other_stage_at(op_schedule_info, at_target_stage_index, at_targets, stage_index)

    op_schedule_info.at_targets = at_targets
    logger.debug('reduce_r01_ub_split_last_reduce_axis_at_rule')
    return True


def _other_stage_at(op_schedule_info, at_target_stage_index, at_targets, stage_index):
    """
    other_stage_at
    :param op_schedule_info:
    :param at_target_stage_index:
    :param at_targets:
    :param stage_index:
    :return:
    """
    axis_info_list: List[List[AxisInfo]] = op_schedule_info.axis_info_list
    at_target_stage_axis_info = axis_info_list[at_target_stage_index]
    for stage_axis_info in at_target_stage_axis_info:
        if stage_axis_info.name.endswith('o'):
            at_targets[stage_index] = stage_axis_info


def _rfactor_in_at_target_stage_at(op_schedule_info, at_target_stage_index, at_targets, stage_index):
    """
    rfactor_in_at_target_stage_at
    :param op_schedule_info:
    :param at_target_stage_index:
    :param at_targets:
    :param stage_index:
    :return:
    """
    ub_split_last_reduce_axis = op_schedule_info.last_reduce_and_ub_split_last_reduce_axis
    ub_split_nlast_reduce_axis = op_schedule_info.last_reduce_and_ub_split_nlast_reduce_axis
    axis_info_list: List[List[AxisInfo]] = op_schedule_info.axis_info_list
    if ub_split_last_reduce_axis:
        at_target_stage_axis_info = axis_info_list[at_target_stage_index]
        for stage_axis_info in at_target_stage_axis_info:
            if stage_axis_info.type == "reduce_axis":
                at_targets[stage_index] = stage_axis_info
    elif ub_split_nlast_reduce_axis:
        at_target_stage_axis_info = axis_info_list[at_target_stage_index]
        for stage_axis_info in at_target_stage_axis_info:
            if stage_axis_info.type == "reduce_axis" and stage_axis_info.name.endswith('o'):
                at_targets[stage_index] = stage_axis_info
