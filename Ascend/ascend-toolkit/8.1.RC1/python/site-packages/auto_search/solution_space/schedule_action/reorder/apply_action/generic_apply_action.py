#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
import importlib
from typing import NoReturn

from auto_search.utils import logger
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.t2c_util import MODE_RUNTIME
from auto_search.solution_space import t2c_util
from auto_search.solution_space.schedule_action.utils import get_schedule_action_rules
from auto_search.bank.cheque_generator import get_axis_index
from auto_search.bank.cheque_generator import get_axis_cheque
from auto_search.bank.cheque_generator import get_reorder_cheque
from auto_search.solution_space.progress import Progress


def _need_reorder(leveled_axis):
    """

    :param leveled_axis:
    :return:
    """
    need_reorder = False
    for each_level in leveled_axis:
        if each_level:
            need_reorder = True
            break
    return need_reorder


def _gen_reorder_cheque(op_schedule_info, stage_index, new_stage_axis_list):
    """
    :param op_schedule_info:
    :param stage_index:
    :param new_stage_axis_list:
    :return:
    """
    order = []
    stage_axis_list = op_schedule_info.axis_info_list[stage_index]
    ori_order_axis_list = t2c_util.get_ori_order(stage_axis_list)
    for tmp_axis_info in new_stage_axis_list:
        axis_index = get_axis_index(ori_order_axis_list,
                                    tmp_axis_info.name)
        order.append(axis_index)
    cheque = get_reorder_cheque(stage_index, order)
    op_schedule_info.cheque_list.append(cheque)


@apply_action_register([ComputePattern.REDUCE, ComputePattern.NORM, ComputePattern.TRANSPOSE, ComputePattern.POOLING,
                        ComputePattern.TUPLE_REDUCE],
                       ScheduleActionType.REORDER)
def apply(progress: Progress) -> NoReturn:
    """
    reorder apply
    :param progress:
    :return:
    """
    op_pattern = progress.op_schedule_info.op_pattern
    rules = get_schedule_action_rules(op_pattern, "proc_reorder")

    op_schedule_info = progress.op_schedule_info
    stages_info = op_schedule_info.stages_info
    op_schedule_info.ori_axis_info_list = op_schedule_info.axis_info_list[:]

    code_lines = ['\n', '# reorder code']

    for rule in rules:
        module = importlib.import_module(rule)
        module.proc(progress)

    # reorder
    for stage_index, stage in enumerate(list(op_schedule_info.schedule_obj.stages)):
        if op_schedule_info.axis_info_list[stage_index] is None:
            continue

        # Skip the stage that does not have the reorder axis.
        leveled_axis = op_schedule_info.leveled_axis_for_reorder[stage_index]
        if not _need_reorder(leveled_axis):
            continue

        # reduce_write stage generate all axis cheque
        # enable_atomic_ra_bind scene: generate all axis cheque before split axis
        if not op_schedule_info.enable_atomic_ra_bind and \
                'reduce_atomic_write' in stages_info[stage_index].get('type', []) and \
                'CacheWrite' in stages_info[stage_index].get('type', []):
            axis_cheque_list = get_axis_cheque(op_schedule_info.schedule_obj.stages[stage_index], stage_index)
            op_schedule_info.cheque_list.extend(axis_cheque_list)

        code_line = ['sch[%s].reorder(' % stages_info[stage_index]['name']]

        new_stage_axis_list = leveled_axis[t2c_util.AXIS_LEVEL_OO_INDEX] + \
                              leveled_axis[t2c_util.AXIS_LEVEL_O_INDEX] + \
                              leveled_axis[t2c_util.AXIS_LEVEL_I_II_NORMAL_INDEX]

        for axis_info in new_stage_axis_list:
            code_line.append("%s, " % axis_info.name)

        code_line.append('%s' % ')')
        code_lines.append(''.join(code_line))
        op_schedule_info.axis_info_list[stage_index] = new_stage_axis_list

        if op_schedule_info.mode == MODE_RUNTIME:
            axis_reorder_list = [
                axis_info.body
                for axis_info in new_stage_axis_list
            ]
            stage.reorder(*axis_reorder_list)

        # generate reorder cheque
        _gen_reorder_cheque(op_schedule_info, stage_index, new_stage_axis_list)

    op_schedule_info.code_lines.extend(code_lines)
    logger.debug("apply reorder done.")
