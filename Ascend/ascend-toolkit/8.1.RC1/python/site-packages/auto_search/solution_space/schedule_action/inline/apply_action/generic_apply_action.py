#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
from typing import NoReturn
import importlib

from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.utils import get_schedule_action_rules
from auto_search.solution_space.schedule_action.inline.apply_action.rules.comm import is_special_stage
from auto_search.bank.cheque_generator import get_inline_cheque
from auto_search.solution_space.progress import Progress
from auto_search.utils import logger


@apply_action_register(
    [ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.REDUCE, ComputePattern.NORM,
     ComputePattern.TRANSPOSE, ComputePattern.POOLING, ComputePattern.TUPLE_REDUCE],
    ScheduleActionType.INLINE)
def apply(progress: Progress) -> NoReturn:
    """
    apply function
    :param progress:
    :return:
    """
    op_pattern = progress.op_schedule_info.op_pattern
    rules = get_schedule_action_rules(op_pattern, "proc_inline")

    sch = progress.op_schedule_info.schedule_obj
    stages_info = progress.op_schedule_info.stages_info
    code_lines = ['\n', '# compute_inline code']
    inlined_stages = []
    inlined_stages_ori_name = []

    for stage_index, stage in enumerate(sch.stages):
        if stage_index in progress.op_schedule_info.inlined_stages:
            continue
        if is_special_stage(progress.op_schedule_info, stage_index):
            continue
        stage_name = stages_info[stage_index].get('name', '')
        for rule in rules:
            module = importlib.import_module(rule)
            ret = module.proc(progress, stage_index)
            if not ret:
                continue
            code_lines.append('sch[%s].compute_inline()' % stage_name)
            stage.compute_inline()
            inlined_stages.append(stage_index)
            if 'CacheWrite' in stages_info[stage_index].get('type', []):
                # inlined_stages_ori_name is used for milan broadcast need remove pad or not
                inlined_stages_ori_name.append(stages_info[stage_index].get('ori_name', ''))
            cheque = get_inline_cheque(stage_index)
            progress.op_schedule_info.cheque_list.append(cheque)
            break

    progress.op_schedule_info.code_lines.extend(code_lines)
    progress.op_schedule_info.inlined_stages.extend(inlined_stages)
    progress.op_schedule_info.inlined_stages_ori_name = inlined_stages_ori_name

    logger.debug("apply inline done.")
