#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
broadcast inline rule
"""
from auto_search.solution_space.t2c_util import get_stage_broadcast_axis
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.utils import util
from auto_search.solution_space.progress import Progress


def proc(progress: Progress, stage_index: int) -> bool:
    """
    broadcast_to_tensor need inline
    :param progress:
    :param stage_index:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    stage = op_schedule_info.schedule_obj.stages[stage_index]
    if stage.op.tag in ['unknown_broadcast', 'unified_broadcast']:
        dynamic_flag = op_schedule_info.option.get('op_config').get('op_mode', '') in ['dynamic']
        if dynamic_flag:
            dynamic_compute_info = util.DYNC_COMPUTE_INFO
            broadcast_axis_list = dynamic_compute_info.broadcast_axis_list
        else:
            broadcast_axis_list = get_stage_broadcast_axis(stage)
        split_vector = progress.action_tensor[-1][
                       ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]
        # get split axis index
        for index, factor in enumerate(split_vector):
            if factor != 0:
                ub_split_axis = index
                break

        for broadcast_axis in broadcast_axis_list:
            if broadcast_axis >= ub_split_axis:
                return False

        return True

    return False
