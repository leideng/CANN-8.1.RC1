#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common director
"""
from typing import NoReturn

from auto_search.solution_space.action import director_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.prepare_action.update_progress.update_progress_action \
    import UpdateProgressAction
from auto_search.solution_space.schedule_action.mem_unique.mem_unique_action import MemUniqueAction
from auto_search.solution_space.progress import Progress
from auto_search.solution_space.schedule_action.split.split_action import SchSplitAction
from auto_search.solution_space.search_action.ub_transpose.ub_transpose_action import UbTransposeAction
from auto_search.compute_analysis.norm_compute_graph import is_support_ub_transpose_search


@director_register([ComputePattern.ELEMENTWISE, ComputePattern.REDUCE, ComputePattern.TRANSPOSE,
                    ComputePattern.TUPLE_REDUCE], ScheduleActionType.INLINE)
def direct(progress: Progress) -> NoReturn:
    """
    inline direct
    :param progress:
    :return:
    """
    pattern = progress.op_schedule_info.op_pattern
    next_action = UpdateProgressAction(pattern)
    progress.todo = next_action


@director_register(ComputePattern.POOLING, ScheduleActionType.INLINE)
def pooling_direct(progress: Progress):
    """
    pooling inline direct
    :param progress:
    :return:
    """
    pattern = progress.op_schedule_info.op_pattern
    next_action = MemUniqueAction(pattern)
    progress.todo = next_action


@director_register([ComputePattern.NORM], ScheduleActionType.INLINE)
def norm_direct(progress: Progress) -> NoReturn:
    """
    norm inline direct
    :param progress:
    :return:
    """
    pattern = progress.op_schedule_info.op_pattern

    # If the at_dict is empty, UpdateProgressAction has not been done
    at_dict = progress.op_schedule_info.at_dict
    if not at_dict:
        next_action = UpdateProgressAction(pattern)
    else:
        if is_support_ub_transpose_search(progress.op_schedule_info) and \
                not progress.op_schedule_info.is_align_pad and \
                not progress.op_schedule_info.is_remove_pad:
            next_action = UbTransposeAction(pattern)
        else:
            next_action = SchSplitAction(pattern)

    progress.todo = next_action

