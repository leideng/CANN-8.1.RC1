#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
reduce atomic bind rule
"""
import math
from typing import List
from typing import NoReturn

from tbe.tvm import Stage

from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.bank.cheque_generator import get_fuse_cheque
from auto_search.solution_space.op_schedule_info import OpScheduleInfo


def fuse_axis(last_fuse_axis_index: int,
              stage_axis_info: List,
              op_schedule_info: OpScheduleInfo,
              stage: Stage,
              stage_index: int
              ) -> NoReturn:
    """
    fuse axis for factor-split
    :param last_fuse_axis_index: the last axis index that need to fuse
    :param stage_axis_info:
    :param op_schedule_info:
    :param stage:
    :param stage_index:
    :return:
    """
    stage_name = stage.op.name
    axis_name = f'{stage_name}_axis_fused_o'
    fuse_code = f'{axis_name} = sch[{stage_name}].fuse('
    fuse_len = 1
    axis_obj_list = []
    index_list = []
    fuse_axis_name_list = []
    for i in range(last_fuse_axis_index + 1):
        fuse_code = f'{fuse_code}{stage_axis_info[0].name}, '
        fuse_axis_name_list.append(stage_axis_info[0].name)
        fuse_len *= stage_axis_info[0].len
        axis_obj_list.append(stage_axis_info[0].body)
        index_list.append(i)
        del stage_axis_info[0]
    op_schedule_info.code_lines.append(fuse_code + ")")

    fused_axis_obj = stage.fuse(*axis_obj_list)
    stage_axis_info.insert(
        0,
        AxisInfo(axis_name, fuse_len, 'axis', index_list, 'o',
                 fused_axis_obj))

    cheque = get_fuse_cheque(stage_index, index_list)
    op_schedule_info.cheque_list.append(cheque)


def get_block_factor_and_block_dim(core_num: int, fuse_len: int, axis_index: int, stage_axis_info: List) -> tuple:
    """
    :param core_num:
    :param fuse_len:
    :param axis_index:
    :param stage_axis_info:
    :return:
    """
    try:
        block_factor = math.ceil(
            stage_axis_info[axis_index].len / (core_num // (fuse_len / stage_axis_info[axis_index].len)))
    except ZeroDivisionError as exception:
        raise RuntimeError('block_factor calculate is invalid:%s' % str(exception)) from exception

    try:
        block_dim = int(
            math.ceil(stage_axis_info[axis_index].len / block_factor) * (fuse_len // stage_axis_info[axis_index].len))
    except ZeroDivisionError as exception:
        raise RuntimeError('block_dim calculate is invalid:%s' % str(exception)) from exception
    return block_dim, block_factor
