#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common director
"""
from math import factorial

from auto_search.solution_space.comm import get_split_sub_tree_depth
from auto_search.solution_space.action import director_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.cache_write.cache_write_action import CacheWriteAction
from auto_search.solution_space.schedule_action.inline.inline_action import InlineAction
from auto_search.solution_space.search_action.reorder.reorder_action import ReorderAction
from auto_search.solution_space.prepare_action.at_analysis.at_analysis_action import AtAnalysisAction
from auto_search.solution_space.prepare_action.update_progress.update_progress_action \
    import UpdateProgressAction


@director_register([ComputePattern.ELEMENTWISE], ScheduleActionType.CACHE_WRITE)
def direct(progress):
    """
    elementwise cache write direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        if not {'placeholder', 'virtual_leaf_out', 'src_cache_write'} & set(stage_info.get('type', [])) \
                and stage_info.get('scope', '') not in ['local.UB']:
            next_action = CacheWriteAction(pattern, stage_index)
            progress.todo = next_action
            return

    next_action = InlineAction(pattern)
    progress.todo = next_action


@director_register([ComputePattern.BROADCAST], ScheduleActionType.CACHE_WRITE)
def broadcast_direct(progress):
    """
    broadcast cache write direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        if not {'placeholder', 'virtual_leaf_out', 'src_cache_write'} & set(stage_info.get('type', [])) \
                and stage_info.get('scope', '') not in ['local.UB']:
            next_action = CacheWriteAction(pattern, stage_index)
            progress.todo = next_action
            return

    next_action = UpdateProgressAction(pattern)
    progress.todo = next_action


@director_register([ComputePattern.NORM], ScheduleActionType.CACHE_WRITE)
def norm_direct(progress):
    """
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        if not {'placeholder', 'virtual_leaf_out', 'src_cache_write'} & set(stage_info.get('type', [])) \
                and stage_info.get('scope', '') not in ['local.UB']:
            next_action = CacheWriteAction(pattern, stage_index)
            progress.todo = next_action
            return

    # remove_pad tensor do cache_write
    if progress.op_schedule_info.is_remove_pad:
        for stage_index, stage_info in enumerate(stages_info):
            if {'leaf'} & set(stage_info.get('type', [])) \
                    and 'src_remove_pad' not in stage_info.get('type', []):
                next_action = CacheWriteAction(pattern, stage_index)
                progress.todo = next_action
                return

    next_action = InlineAction(pattern)
    progress.todo = next_action


@director_register([ComputePattern.REDUCE, ComputePattern.TUPLE_REDUCE], ScheduleActionType.CACHE_WRITE)
def reduce_direct(progress):
    """
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        # reduce atomic stage not need do cache_write
        # after atomic rfactor than do cache_write
        if 'placeholder' not in stage_info.get('type', []) \
                and stage_info.get('scope', '') not in ['local.UB'] \
                and 'src_cache_write' not in stage_info.get('type', []) \
                and 'reduce_atomic' not in stage_info.get('type', []):
            next_action = CacheWriteAction(pattern, stage_index)
            progress.todo = next_action
            return

    # remove_pad tensor do cache_write
    if progress.op_schedule_info.is_remove_pad:
        for stage_index, stage_info in enumerate(stages_info):
            if {'leaf'} & set(stage_info.get('type', [])) \
                    and not {'virtual_leaf_out', 'src_remove_pad'} & set(stage_info.get('type', [])):
                next_action = CacheWriteAction(pattern, stage_index)
                progress.todo = next_action
                return

    next_action = InlineAction(pattern)
    progress.todo = next_action


@director_register([ComputePattern.TRANSPOSE], ScheduleActionType.CACHE_WRITE)
def transpose_direct(progress):
    """
    cache write direct
    :param progress:
    :return:
    """
    pattern = progress.op_schedule_info.op_pattern

    if len(progress.op_schedule_info.dma_reorder_list) < 2:
        # default: last_stage need to do dma reorder
        last_stage_index = progress.stage_num - 1
        nonzero_axes = progress.get_nonzero_axes(0)
        permutation_num = factorial(len(nonzero_axes))
        sub_tree_depth = get_split_sub_tree_depth(permutation_num)
        progress.todo = ReorderAction(pattern, last_stage_index, sub_tree_depth - 1)
    else:
        next_action = InlineAction(pattern)
        progress.todo = next_action


@director_register([ComputePattern.POOLING], ScheduleActionType.CACHE_WRITE)
def pooling_direct(progress):
    """
    elementwise cache write direct
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern
    for stage_index, stage_info in enumerate(stages_info):
        if 'at_info' not in stage_info.keys():
            progress.todo = AtAnalysisAction(pattern)
            return
        if not {'placeholder', 'virtual_leaf_out', 'src_cache_write'} & set(stage_info.get('type', [])) \
                and stage_info.get('scope', '') not in ['local.UB']:
            next_action = CacheWriteAction(pattern, stage_index)
            progress.todo = next_action
            return

    next_action = InlineAction(pattern)
    progress.todo = next_action
