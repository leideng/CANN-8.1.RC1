#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
import importlib

from auto_search.utils import logger
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.utils import get_schedule_action_rules


@apply_action_register(
    [ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.REDUCE, ComputePattern.NORM,
     ComputePattern.TRANSPOSE, ComputePattern.POOLING, ComputePattern.TUPLE_REDUCE],
    ScheduleActionType.EMIT_INSN)
def apply(progress):
    """
    :param progress:
    :return:
    """
    op_pattern = progress.op_schedule_info.op_pattern
    rules = get_schedule_action_rules(op_pattern, "proc_emit_insn")

    op_schedule_info = progress.op_schedule_info
    schedule_obj = op_schedule_info.schedule_obj
    inlined_stages = op_schedule_info.inlined_stages
    stages_info = op_schedule_info.stages_info

    op_schedule_info.code_lines.extend(['\n', '# emit_insn code'])
    logger.debug("begin of emit_insn")
    op_schedule_info.proc_flag_dict = {}
    for stage_index, stage in enumerate(schedule_obj.stages):
        # inlined_stages not do emit insn
        if stage_index in inlined_stages:
            continue
        # placeholder not do emit insn
        if 'placeholder' in stages_info[stage_index].get('type', []):
            continue
        op_schedule_info.stage_index = stage_index
        op_schedule_info.stage = stage
        op_schedule_info.stage_name = stages_info[stage_index]['name']
        for rule in rules:
            rule_module = importlib.import_module(rule)
            rule_module.proc(progress)

    logger.debug("apply emit insn done.")
