#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
"""
generic apply action
"""
from typing import NoReturn

from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.bank.cheque_generator import get_mem_uniq_cheque
from auto_search.solution_space.progress import Progress
from auto_search.utils import logger


@apply_action_register([ComputePattern.NORM], ScheduleActionType.MEM_UNIQUE)
def apply(progress: Progress) -> NoReturn:
    """
    apply function
    :param progress:
    :return:
    """

    sch = progress.op_schedule_info.schedule_obj
    stages_info = progress.op_schedule_info.stages_info
    code_lines = ['\n', '# mem_unique code']
    for stage_index, stage_info in enumerate(stages_info):
        if not stage_info.get("need_mem_unique", False):
            continue
        stage_name = stages_info[stage_index].get('name', '')
        code_lines.append('sch[%s].mem_unique()' % stage_name)
        sch.stages[stage_index].mem_unique()
        cheque = get_mem_uniq_cheque(stage_index)
        progress.op_schedule_info.cheque_list.append(cheque)


    progress.op_schedule_info.code_lines.extend(code_lines)
    logger.debug("apply mem unique done.")
