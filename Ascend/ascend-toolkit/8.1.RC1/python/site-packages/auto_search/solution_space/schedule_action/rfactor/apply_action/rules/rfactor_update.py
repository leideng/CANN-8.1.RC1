#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
norm rfactor update
"""
import numpy as np

from auto_search.utils import logger
from auto_search.solution_space.tensor_cfg import get_init_action_tensor_zero
from auto_search.solution_space import tvm_compute as tvm_compute_to_tensor


def update_stage_index_map(op_schedule_info, reduce_stage_index):
    """
    reduce_stage_index add 2ï¼Œupdate stage_index_map
    :param op_schedule_info:
    :param reduce_stage_index:
    :return:
    """
    stage_index_map = op_schedule_info.stage_index_map
    for key, value in stage_index_map.items():
        if value >= reduce_stage_index:
            stage_index_map[key] += 1

    return True


def update_feature(op_schedule_info):
    """
    stage num change, need update feature
    :param op_schedule_info:
    :return:
    """
    feature_tensor, reduce_axis_dict = \
        tvm_compute_to_tensor.proc(op_schedule_info.schedule_obj,
                                   op_schedule_info.stages_info,
                                   op_schedule_info.op_name)
    src_reduce_axis_dict = op_schedule_info.reduce_axis_dict
    op_schedule_info.src_reduce_axis_dict = src_reduce_axis_dict
    logger.debug("reduce_axis_dict: %s", reduce_axis_dict)
    op_schedule_info.feature_tensor = feature_tensor
    op_schedule_info.reduce_axis_dict = reduce_axis_dict
    logger.debug("stage_num: %s", len(op_schedule_info.feature_tensor))
    return True


def update_rfactor_actions(progress, rfactor_stage_index):
    """
    no split, set as init aciton
    :param progress:
    :param rfactor_stage_index:
    :return:
    """
    rfactor_action = get_init_action_tensor_zero(1)
    rfactor_action = rfactor_action.tolist()[0]

    progress.action_tensor = np.insert(progress.action_tensor, rfactor_stage_index, rfactor_action, 0)


def update_cleaned_actions(progress, reduce_stage_index):
    """
    :param progress:
    :param reduce_stage_index:
    :return:
    """
    rfactor_stage_index = reduce_stage_index - 2

    update_rfactor_actions(progress, rfactor_stage_index)

    logger.debug("stage_num: %s", len(progress.action_tensor))


def update_cut_axis_index(op_schedule_info, rfactor_stage_index):
    """
    :param op_schedule_info:
    :param rfactor_stage_index:
    :return:
    """
    cut_axis_index = op_schedule_info.cut_axis_index
    stages_num = len(op_schedule_info.stages_info)
    for i in range(stages_num-1, rfactor_stage_index, -1):
        cut_axis_index[i] = cut_axis_index[i-1]

    cut_axis_index[rfactor_stage_index] = 0


def update_inlined_stages(op_schedule_info, rfactor_stage_index):
    """
    :param op_schedule_info:
    :param rfactor_stage_index:
    :return:
    """
    inlined_stages = op_schedule_info.inlined_stages
    for idx, stage_index in enumerate(inlined_stages):
        if stage_index >= rfactor_stage_index:
            inlined_stages[idx] = stage_index + 1

    op_schedule_info.inlined_stages = list(inlined_stages)


def update_sampled_target(op_schedule_info):
    """
    :param op_schedule_info:
    :return:
    """
    stage_index_map = op_schedule_info.stage_index_map

    for stage_info in op_schedule_info.stages_info:
        if 'at_info' in stage_info:
            at_info = stage_info['at_info']
            for consumer in at_info.consumers:
                sampled_target = consumer.sampled_target
                updated_sampled_target = stage_index_map[sampled_target]
                consumer.set_updated_sampled_target(updated_sampled_target)


def do_update(progress, reduce_stage_index):
    """
    add a stage, need update something
    :param progress:
    :param reduce_stage_index:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    rfactor_stage_index = reduce_stage_index
    reduce_stage_index = reduce_stage_index + 1

    update_stage_index_map(op_schedule_info, reduce_stage_index)

    update_feature(op_schedule_info)

    update_cleaned_actions(progress, reduce_stage_index)

    update_cut_axis_index(op_schedule_info, rfactor_stage_index)

    update_inlined_stages(op_schedule_info, rfactor_stage_index)

    update_sampled_target(op_schedule_info)

    op_schedule_info.update_dependency_dict()
    op_schedule_info.update_at_dict()
    logger.debug('rfactor update done.')
