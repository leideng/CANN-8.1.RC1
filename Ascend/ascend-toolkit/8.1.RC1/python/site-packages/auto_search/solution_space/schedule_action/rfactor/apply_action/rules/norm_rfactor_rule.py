#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
norm rfactor rule
"""
import copy

from tbe import tvm
from tbe.common.platform import platform_info

from auto_search.utils import logger
from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.bank.cheque_generator import get_axis_cheque
from auto_search.bank.cheque_generator import get_rfactor_cheque
from auto_search.bank.cheque_generator import get_set_scope_cheque
from auto_search.solution_space.schedule_action.rfactor.apply_action.rules.rfactor_update import \
    do_update
from auto_search.solution_space.schedule_action.rfactor.apply_action.reduce_r05_block_tiling_rfactor_for_atomic import \
    get_reduce_tag


def rfactor_proc(op_schedule_info,
                 code_lines,
                 reduce_stage_index,
                 reduce_tensors,
                 rfactor_axis_info):
    """

    :param op_schedule_info:
    :param code_lines:
    :param reduce_stage_index:
    :param reduce_tensors:
    :param rfactor_axis_info:
    :return:
    """
    # get reduce tag before rfactor
    reduce_type, reduce_op_tag = \
        get_reduce_tag(op_schedule_info.schedule_obj.stages[reduce_stage_index])

    # rfactorçš„code_lines
    rfactor_axis_name, rfactor_axis_obj, rfactor_axis_index = rfactor_axis_info
    reduce_stage_name = op_schedule_info.stages_info[reduce_stage_index].get('name')
    rfactor_stage_name = f'{reduce_stage_name}_rfactor'
    rfactor_codes = f'sch.rfactor({reduce_stage_name}, {rfactor_axis_name}, factor_axis=-1)'
    if len(reduce_tensors) > 1:
        rfactor_codes = f'{rfactor_stage_name}, *_ = {rfactor_codes}'
    else:
        rfactor_codes = f'{rfactor_stage_name} = {rfactor_codes}'
    code_lines.append(rfactor_codes)
    code_lines.append(f"sch[{rfactor_stage_name}].set_scope('{platform_info.scope_ubuf}')")

    rfactor_tensor = op_schedule_info.schedule_obj.rfactor(reduce_tensors[0],
                                                 rfactor_axis_obj,
                                                 factor_axis=-1)
    logger.debug("rfactor_tensor: %s, %s", rfactor_tensor, type(rfactor_tensor))
    if not isinstance(rfactor_tensor, tvm.Tensor):
        rfactor_tensor = rfactor_tensor[0]
    op_schedule_info.schedule_obj[rfactor_tensor].set_scope(platform_info.scope_ubuf)

    # add a stage info after rfactor
    op_schedule_info.stages_info[reduce_stage_index]['op_tag'] = reduce_op_tag
    op_schedule_info.stages_info.insert(
        reduce_stage_index,
        {
            'name': rfactor_stage_name,
            'type': ['reduce_rfactor'],
            'scope': platform_info.scope_ubuf,
            'op_tag': reduce_op_tag,
            'reduce_type': reduce_type,
            'at_info':op_schedule_info.stages_info[reduce_stage_index].get('at_info')
        }
    )
    reduce_axis = copy.deepcopy(op_schedule_info.reduce_axis_dict[reduce_stage_index].get('axis', []))
    del reduce_axis[rfactor_axis_index]
    op_schedule_info.rfactor_axis_dict[reduce_stage_index] = {
        'reduce_axis': reduce_axis,
        'rfactor_axis': [-1]
    }


def get_axis_list(op_schedule_info, rfactor_stage_index, code_lines):
    """
    :param op_schedule_info:
    :param rfactor_stage_index:
    :param code_lines:
    :return:
    """
    stage_name = op_schedule_info.stages_info[rfactor_stage_index].get('name')
    stage = op_schedule_info.schedule_obj.stages[rfactor_stage_index]

    stage_axis_info = []
    for axis_index, axis in enumerate(stage.op.axis):
        axis_name = f'{stage_name}_axis_{axis_index}'
        code_lines.append(f'{axis_name} = sch[{stage_name}].op.axis[{axis_index}]')

        stage_axis_info.append(AxisInfo(axis_name,
                                        stage.op.axis[axis_index].dom.extent.value,
                                        'axis', axis_index, 'all', axis))

    for axis_index, axis in enumerate(stage.op.reduce_axis):
        axis_name = f'{stage_name}_reduce_axis_{axis_index}'

        code_lines.append(f'{axis_name} = sch[{stage_name}].op.reduce_axis[{axis_index}]')
        stage_axis_info.append(AxisInfo(axis_name,
                                        stage.op.reduce_axis[axis_index].dom.extent.value,
                                        'reduce_axis', axis_index, 'all', axis))

    return stage_axis_info


def do_rfactor(op_schedule_info,
               code_lines,
               reduce_stage_index,
               rfactor_axis,
               reduce_tensors):
    """
    :param op_schedule_info:
    :param code_lines:
    :param reduce_stage_index:
    :param rfactor_axis:
    :param reduce_tensors:
    :return:
    """
    # gen all axes cheque
    axis_cheque_list = get_axis_cheque(op_schedule_info.schedule_obj.stages[reduce_stage_index], reduce_stage_index)
    op_schedule_info.cheque_list.extend(axis_cheque_list)

    # do rfactor
    rfactor_proc(op_schedule_info, code_lines, reduce_stage_index,
                 reduce_tensors, rfactor_axis)

    stage_axis_info = get_axis_list(op_schedule_info, reduce_stage_index, code_lines)

    op_schedule_info.axis_info_list.insert(reduce_stage_index, stage_axis_info)

    # gen rfactor cheque
    cheque = get_rfactor_cheque(reduce_stage_index, -1, -1)
    op_schedule_info.cheque_list.append(cheque)

    # gen set_scope cheque
    cheque = get_set_scope_cheque(reduce_stage_index, platform_info.scope_ubuf)
    op_schedule_info.cheque_list.append(cheque)

    axis_cheque_list = get_axis_cheque(op_schedule_info.schedule_obj.stages[reduce_stage_index], reduce_stage_index)
    op_schedule_info.cheque_list.extend(axis_cheque_list)


def proc(progress):
    """
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    stages = list(op_schedule_info.schedule_obj.stages)
    reduce_axis_dict = op_schedule_info.reduce_axis_dict
    rfactor_tensors = {}
    op_schedule_info.rfactor_axis_dict = {}
    for reduce_stage_index in reduce_axis_dict:
        if reduce_axis_dict[reduce_stage_index].get('type') == 'nist':
            continue
        reduce_axis = reduce_axis_dict[reduce_stage_index].get('axis', [])
        if len(reduce_axis) < 2:
            continue

        # if at_target len bigger than 2, will split reduce stage, need not do rfactor
        at_target = op_schedule_info.at_dict.values()
        if len(set(at_target)) > 2:
            continue

        # if ub factor is 1, need not do rfactor
        at_stage_cut_axis = op_schedule_info.cut_axis_index[op_schedule_info.at_dict.get(reduce_stage_index)]
        at_stage_split_vector = progress.action_tensor[op_schedule_info.at_dict.get(reduce_stage_index)][
                   ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]
        if at_stage_cut_axis > reduce_axis[0] and at_stage_split_vector[at_stage_cut_axis] == 1:
            continue

        reduce_tensor_name = op_schedule_info.stages_info[reduce_stage_index].get('name')

        rfactor_axis_index = len(stages[reduce_stage_index].op.reduce_axis) - 1

        if op_schedule_info.axis_info_list[reduce_stage_index] is None:
            reduce_axis_name = f'{reduce_tensor_name}_reduce_axis_{rfactor_axis_index}'
            reduce_axis_obj = stages[reduce_stage_index].op.reduce_axis[rfactor_axis_index]
            code_line = '{}_reduce_axis_{} = sch[{}].op.reduce_axis[{}]'.format(
                reduce_tensor_name, len(reduce_axis) - 1, reduce_tensor_name, rfactor_axis_index)
            op_schedule_info.code_lines.append(code_line)
        else:
            reduce_axis_name, reduce_axis_obj = \
                _get_reduce_axis_name_and_obj(op_schedule_info, reduce_axis, reduce_stage_index)

        rfactor_tensors[reduce_tensor_name] = [reduce_axis_name, reduce_axis_obj, rfactor_axis_index]

    for reduce_tensor_name, rfactor_axis_info in rfactor_tensors.items():
        reduce_stage_index, reduce_tensors = _get_reduce_tensors(op_schedule_info, reduce_tensor_name)
        do_rfactor(op_schedule_info, op_schedule_info.code_lines, reduce_stage_index, rfactor_axis_info, reduce_tensors)

        # add a new stage, need update something
        do_update(progress, reduce_stage_index)


def _get_reduce_tensors(op_schedule_info, reduce_tensor_name):
    """
    :param op_schedule_info:
    :param reduce_tensor_name:
    :return:
    """
    reduce_tensors = []
    reduce_stage_index = None
    for idx, stage_info in enumerate(op_schedule_info.stages_info):
        if reduce_tensor_name == stage_info.get('name'):
            reduce_stage_index = idx
            stages = list(op_schedule_info.schedule_obj.stages)
            for index in range(stages[reduce_stage_index].op.num_outputs):
                tensor = stages[reduce_stage_index].origin_op.output(index)
                reduce_tensors.append(tensor)
    return reduce_stage_index, reduce_tensors


def _get_reduce_axis_name_and_obj(op_schedule_info, reduce_axis, reduce_stage_index):
    """
    :param op_schedule_info:
    :param reduce_axis:
    :param reduce_stage_index:
    :return:
    """
    reduce_axis_name = None
    reduce_axis_obj = None
    reduce_last_axis_idx = len(reduce_axis) - 1
    for axis_info in op_schedule_info.axis_info_list[reduce_stage_index]:
        if axis_info.type == 'reduce_axis' and \
                axis_info.index == reduce_last_axis_idx and \
                axis_info.attr in ['i', 'ub_in_axis']:
            reduce_axis_name = axis_info.name
            reduce_axis_obj = axis_info.body
    return reduce_axis_name, reduce_axis_obj
