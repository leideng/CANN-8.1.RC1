#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
auto search
"""
from auto_search.utils import logger
from auto_search.solution_space import t2c_util
from auto_search.solution_space.tensor_cfg import AxisInfo
from auto_search.solution_space.progress import Progress
from auto_search.bank.cheque_generator import get_axis_cheque


def get_axis_list(op_schedule_info, stage_index, code_lines):
    """
    :param op_schedule_info:
    :param rfactor_stage_index:
    :param code_lines:
    :return:
    """
    stage_name = op_schedule_info.stages_info[stage_index].get('name')
    stage = op_schedule_info.schedule_obj.stages[stage_index]

    stage_axis_info = []
    for axis_index, axis in enumerate(stage.op.axis):
        axis_name = f'{stage_name}_axis_{axis_index}'
        code_lines.append(f'{axis_name} = sch[{stage_name}].op.axis[{axis_index}]')

        stage_axis_info.append(AxisInfo(axis_name,
                                        stage.op.axis[axis_index].dom.extent.value,
                                        'axis', axis_index, 'all', axis))

    for axis_index, axis in enumerate(stage.op.reduce_axis):
        axis_name = f'{stage_name}_reduce_axis_{axis_index}'

        code_lines.append(f'{axis_name} = sch[{stage_name}].op.reduce_axis[{axis_index}]')
        stage_axis_info.append(AxisInfo(axis_name,
                                        stage.op.reduce_axis[axis_index].dom.extent.value,
                                        'reduce_axis', axis_index, 'all', axis))

    return stage_axis_info


def proc(progress: Progress):
    """
    reduce_rfactor reorder the reduce axis
    :param progress:
    :return:
    """
    op_schedule_info = progress.op_schedule_info
    leveled_axis_list = op_schedule_info.leveled_axis_for_reorder

    for stage_index, stage_axis_list in enumerate(op_schedule_info.axis_info_list):
        if stage_index not in op_schedule_info.reduce_axis_dict:
            continue
        leveled_axis_list[stage_index][t2c_util.AXIS_LEVEL_OO_INDEX] = []
        leveled_axis_list[stage_index][t2c_util.AXIS_LEVEL_O_INDEX] = []
        reduce_axis_index = op_schedule_info.reduce_axis_dict.get(stage_index).get("axis")
        if not stage_axis_list:
            stage_axis_list = get_axis_list(op_schedule_info, stage_index, op_schedule_info.code_lines)
            op_schedule_info.axis_info_list[stage_index] = stage_axis_list
            cheque = get_axis_cheque(op_schedule_info.schedule_obj.stages[stage_index], stage_index)
            op_schedule_info.cheque_list.extend(cheque)

        stage_reduce_axis = [
            x
            for x in stage_axis_list
            if '_reduce_axis_' in x.name
        ]
        stage_no_reduce_axis = [
            x
            for x in stage_axis_list
            if '_reduce_axis_' not in x.name
        ]

        if len(stage_reduce_axis) == 1:
            stage_no_reduce_axis.insert(reduce_axis_index[0] + 1, stage_reduce_axis[0])
        else:
            for r_axis in stage_reduce_axis:
                stage_no_reduce_axis.insert(-1, r_axis)

        leveled_axis_list[stage_index][t2c_util.AXIS_LEVEL_I_II_NORMAL_INDEX] = stage_no_reduce_axis
