#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
from typing import NoReturn
import importlib

from auto_search.utils import logger
from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import ScheduleActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.utils import get_schedule_action_rules
from auto_search.solution_space.progress import Progress


@apply_action_register(
    [ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.REDUCE, ComputePattern.NORM,
     ComputePattern.TRANSPOSE, ComputePattern.POOLING, ComputePattern.TUPLE_REDUCE],
    ScheduleActionType.BIND)
def apply(progress: Progress) -> NoReturn:
    """
    :param progress:
    :return:
    """
    op_pattern = progress.op_schedule_info.op_pattern
    op_schedule_info = progress.op_schedule_info
    sch = op_schedule_info.schedule_obj
    stages_info = op_schedule_info.stages_info
    stages = list(sch.stages)

    op_schedule_info.code_lines.extend(['\n', '# bind code'])

    if not op_schedule_info.proc_flag_dict:
        op_schedule_info.proc_flag_dict = {}

    if op_schedule_info.is_atomic:
        # reduce atomic need bind reduce_atomic_write stage
        for stage_index, stage in enumerate(stages):
            stage_info = stages_info[stage_index]
            special_stage = set(stage_info.get('type', [])) & {'reduce_atomic_write'}
            if special_stage:
                op_schedule_info.bind_stages.append((stage, stage_index))
                break
    else:
        # current only one stage can be bind
        for stage_index, stage in enumerate(stages):
            stage_info = stages_info[stage_index]
            special_stage = set(stage_info.get('type', [])) & {'leaf'}
            if special_stage:
                op_schedule_info.bind_stages.append((stage, stage_index))
                break

    rules = get_schedule_action_rules(op_pattern, "proc_bind")
    for rule in rules:
        rule_module = importlib.import_module(rule)
        rule_module.proc(progress)
    logger.debug('apply bind done, bind_stages: %s.', op_schedule_info.bind_stages)
