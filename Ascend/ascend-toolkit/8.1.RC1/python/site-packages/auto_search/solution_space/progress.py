#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
search progress/mcts node state
"""

import copy
import numpy as np
from auto_search.solution_space.tensor_cfg import get_init_action_tensor_zero


class Progress:
    """
    search progress/mcts node state
    """

    def __init__(self, op_schedule_info, step_n, todo=None):
        self.ori_op_schedule_info = op_schedule_info
        self.op_schedule_info = copy.deepcopy(op_schedule_info)
        self.axis_info_list = []
        self.step_n = step_n

        self.action_tensor = get_init_action_tensor_zero(self.stage_num)
        self.todo = todo

    def __deepcopy__(self, memo=None):
        new_progress = Progress(self.op_schedule_info, self.step_n, copy.deepcopy(self.todo))
        new_progress.op_schedule_info.schedule_obj = self.op_schedule_info.schedule_obj.copy()
        new_progress.op_schedule_info.axis_info_list = self.op_schedule_info.axis_info_list
        new_progress.op_schedule_info.special_tensor_dict = self.op_schedule_info.special_tensor_dict

        new_progress.action_tensor = copy.deepcopy(self.action_tensor)
        return new_progress

    @property
    def stage_num(self):
        return self.op_schedule_info.stage_num()

    def all_legal_actions(self):
        return self._mask()

    def get_next_progress(self, action_value):
        next_progress = copy.deepcopy(self)
        next_progress.step_n += 1
        next_progress.todo.action_value = action_value

        next_progress.action_apply(action_value)
        next_progress.action_direct()

        return next_progress

    def is_search_over(self):
        return self.todo is None

    def get_nonzero_axes(self, stage_index):
        return self.op_schedule_info.get_nonzero_axes(stage_index)

    def action_apply(self, action_value):
        """

        :param action_value:
        :return:
        """
        self.todo.apply(self, action_value)

    def action_direct(self):
        """

        :return:
        """
        self.todo.direct(self)

    def _mask(self):
        if self.todo is None:
            return np.array([0] * 8, dtype=int)

        return self.todo.mask(self)
