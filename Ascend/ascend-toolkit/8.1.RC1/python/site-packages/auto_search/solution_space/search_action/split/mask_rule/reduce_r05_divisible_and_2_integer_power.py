#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from auto_search.utils import logger
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.comm import get_limit_ub_size
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.compute_analysis import get_stage_ordered_axes_obj
from .broadcast_divisible_and_2_integer_power_for_big_axis import condition_check
from .broadcast_divisible_and_2_integer_power_for_big_axis import need_mask


@mask_rule_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE], SearchActionType.SPLIT)
def mask(progress, action_mask):
    """
    if axis len is so bigger, search space is so bigger, it too slow to search a best value,
    so only keep divisible factor or 2 power value in space
    :param progress:
    :param action_mask:
    :return:
    """
    if not condition_check(progress):
        return action_mask

    stage_index = progress.todo.stage_index
    axis_index = progress.todo.axis_index
    factor = progress.action_tensor[stage_index][axis_index]
    ordered_axes_obj = get_stage_ordered_axes_obj(progress.op_schedule_info, stage_index)
    curr_stage_nonzero_axes = ordered_axes_obj.get_origin_axis_dim()
    axis_len = curr_stage_nonzero_axes[axis_index]

    for idx in range(SEARCH_N):
        if need_mask(progress, axis_len, factor, idx):
            action_mask[idx] = 0

    logger.debug('reduce split r05 divisible_and_2_integer_power_rule: %s', action_mask)
    return action_mask
