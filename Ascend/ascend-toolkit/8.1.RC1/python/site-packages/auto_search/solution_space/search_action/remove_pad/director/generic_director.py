#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common director
"""
from auto_search.solution_space.action import director_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.cache_read.cache_read_action import \
    CacheReadAction
from auto_search.solution_space.schedule_action.cache_clone.cache_clone_action import \
    CacheCloneAction


@director_register([ComputePattern.NORM], SearchActionType.REMOVE_PAD)
def direct_for_norm(progress):
    """
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern

    # need do cache_clone
    for stage_index, stage_info in enumerate(stages_info):
        if {'cache_clone'} & set(stage_info.get('type', [])):
            next_action = CacheCloneAction(pattern, stage_index)
            progress.todo = next_action
            return

    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return


@director_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE], SearchActionType.REMOVE_PAD)
def direct(progress):
    """
    :param progress:
    :return:
    """
    stages_info = progress.op_schedule_info.stages_info
    pattern = progress.op_schedule_info.op_pattern

    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return
