#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from auto_search.utils import logger
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.compute_analysis import get_stage_ordered_axes_obj
from auto_search.compute_analysis.reduce_compute_graph import _calculate_r0_a0_factor


def _update_axis_len(progress, axis_len):
    """
    update axis_len for split inner_axis
    :param progress:
    :return:
    """
    if progress.op_schedule_info.enable_atomic_ra_bind and progress.todo.axis_index == 0:
        # r0a0r1a1 scene: choose split r0_inner, update axis_len
        r0_factor, _ = _calculate_r0_a0_factor(progress.op_schedule_info.compute_graph_info, 0, 1)
        axis_len = r0_factor
    return axis_len


@mask_rule_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE], SearchActionType.SPLIT)
def mask(progress, action_mask):
    """
    factor must less equal axis len
    :param progress:
    :param action_mask:
    :return:
    """
    stage_index = progress.todo.stage_index
    axis_index = progress.todo.axis_index

    ordered_axes_obj = get_stage_ordered_axes_obj(progress.op_schedule_info, stage_index)
    curr_stage_nonzero_axes = ordered_axes_obj.get_origin_axis_dim()

    factor_index = progress.todo.axis_index
    factor = progress.action_tensor[stage_index][factor_index]
    axis_len = curr_stage_nonzero_axes[axis_index]
    axis_len = _update_axis_len(progress, axis_len)
    sub_action_index = progress.todo.sub_action_index

    for i in range(SEARCH_N):
        next_factor = factor + pow(SEARCH_N, sub_action_index) * i
        if next_factor > axis_len:
            action_mask[i] = 0
    logger.debug("reduce split r01 factor smaller than axis, "
                 "axis_len:%s action_mask:%s", axis_len, action_mask)
