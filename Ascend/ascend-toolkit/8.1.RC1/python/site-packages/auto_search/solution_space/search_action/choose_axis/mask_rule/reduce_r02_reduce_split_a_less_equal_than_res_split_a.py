#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from auto_search.utils import logger
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.tensor_cfg import ActionTensorCfg


@mask_rule_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE], SearchActionType.CHOOSE_AXIS)
def mask(progress, action_mask):
    """
    if reduce stage split a axis, should less equal than res split axis
    :param progress:
    :param action_mask:
    :return:
    """
    if progress.op_schedule_info.is_atomic:
        return
    stage_index = progress.todo.stage_index
    # res split need not this rule
    if stage_index == len(progress.op_schedule_info.schedule_obj.stages) - 1:
        return
    res_ub_cut_axis = _res_ub_split_axis_index(progress)
    # reduce
    reduce_compute_graph = progress.op_schedule_info.compute_graph_info

    for idx in range(SEARCH_N - 1, -1, -1):
        if reduce_compute_graph.keep_dim:
            if idx in reduce_compute_graph.normal_axes_index \
                    and idx < res_ub_cut_axis:
                action_mask[idx] = 0
        else:
            if idx in reduce_compute_graph.normal_axes_index \
                    and reduce_compute_graph.normal_axes_index.index(idx) < res_ub_cut_axis:
                action_mask[idx] = 0
    logger.debug("reduce_r02_reduce_split_a_less_equal_than_res_split_a, action_mask:%s", action_mask)


def _res_ub_split_axis_index(progress):
    """
    :param progress:
    :return:
    """
    stages = progress.op_schedule_info.schedule_obj.stages
    res_stage_index = len(stages) - 1
    split_vector = \
        progress.action_tensor[res_stage_index][ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]
    # find ub split axis
    res_ub_cut_axis = 0
    for i, f in enumerate(split_vector):
        if f > 0:
            res_ub_cut_axis = i
            break

    return res_ub_cut_axis
