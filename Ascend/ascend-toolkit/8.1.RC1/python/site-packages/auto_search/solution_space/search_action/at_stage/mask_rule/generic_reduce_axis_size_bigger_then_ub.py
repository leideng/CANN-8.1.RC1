#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from tbe import tvm
from auto_search.utils import logger
from auto_search.solution_space.comm import get_limit_ub_size
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern


def is_reduce_stage(stage):
    """
    :param stage:
    :return:
    """
    if isinstance(stage.op, tvm.ComputeOp) and \
            len(stage.op.reduce_axis) > 0:
        return True
    return False


def get_total_reduce_axis_size(stages):
    """
    Description: return the product of all reduce axes' size
    :param stages:
    :return:
    """
    total_size = 1
    reduce_axes = []
    for stage in stages:
        if is_reduce_stage(stage):
            reduce_axes = stage.op.reduce_axis
            break

    for axis in reduce_axes:
        size = axis.dom.extent.value
        total_size *= size

    return total_size


@mask_rule_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE, ComputePattern.NORM],
                    SearchActionType.AT_STAGE)
def mask(progress, action_mask):
    """
    if the total size of reduce axes is bigger than UB size
    can't compute all stages at the last stage
    :param progress:
    :param action_mask:
    :return:
    """
    stages = progress.op_schedule_info.schedule_obj.stages
    stage_index = progress.todo.stage_index
    consumer_id = progress.todo.consumer_id
    at_info = progress.op_schedule_info.stages_info[stage_index]['at_info']
    consumer = at_info.consumers[consumer_id]
    total_reduce_size = get_total_reduce_axis_size(stages)
    ub_size_limit = get_limit_ub_size(progress.op_schedule_info, stage_index)

    for i, stg_idx in enumerate(consumer.at_candidates):
        stage = stages[stg_idx]
        if not is_reduce_stage(stage) and total_reduce_size >= ub_size_limit:
            action_mask[i] = 0
    if sum(action_mask) == 0:
        logger.warn('No need to mask, because no available at target.')
    logger.debug("reduce at_stage r01 done with action_mask:%s", action_mask)
    return action_mask
