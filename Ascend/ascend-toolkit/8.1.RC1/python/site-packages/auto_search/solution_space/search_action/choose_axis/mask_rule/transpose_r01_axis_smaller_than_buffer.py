#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from numpy import ndarray

from auto_search.utils import logger
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.comm import get_limit_ub_size
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.solution_space.progress import Progress


@mask_rule_register([ComputePattern.TRANSPOSE], SearchActionType.CHOOSE_AXIS)
def mask(progress: Progress, action_mask: ndarray):
    """
    choose axis rule: size prod after chosen axis is less than buffer size
    :param progress:
    :param action_mask:
    :return:
    """
    nonzero_axes = progress.get_nonzero_axes(progress.todo.stage_index)
    total_size = 1

    # for choose axis multi times
    stage_index = progress.todo.stage_index
    stage_info = progress.op_schedule_info.stages_info[stage_index]
    chosen_axes_index = sorted(set(stage_info.get("chosen_axes", [])))
    split_factor_list = progress.action_tensor[stage_index][
                        ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]

    limit_ub_size = get_limit_ub_size(progress.op_schedule_info, stage_index)

    for axis_index in chosen_axes_index:
        total_size *= split_factor_list[axis_index]

    for idx in range(SEARCH_N - 1, -1, -1):
        if idx >= len(nonzero_axes):
            action_mask[idx] = 0
            continue
        if nonzero_axes[idx] == 1:
            action_mask[idx] = 0
            continue
        if total_size >= limit_ub_size and \
                idx not in chosen_axes_index:
            action_mask[idx] = 0

    if sum(action_mask) == 0:
        action_mask[0] = 1
    logger.debug("transpose_r01_axis_smaller_than_buffer action_mask:%s", action_mask)
