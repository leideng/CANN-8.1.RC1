#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from functools import reduce as functools_reduce

from auto_search.utils import logger
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.utils import util
from auto_search.solution_space.tensor_cfg import AXIS_CNT
from auto_search.solution_space.tensor_cfg import ActionTensorCfg


@mask_rule_register([ComputePattern.TRANSPOSE], SearchActionType.SPLIT)
def mask(progress, action_mask):
    """
    if calculate ub_count by factor less than 32B, should be masked
    """
    stage_index = progress.todo.stage_index
    stage_info = progress.op_schedule_info.stages_info[stage_index]
    if 'leaf' not in stage_info.get('type', []):
        return

    # block_size
    stages = list(progress.op_schedule_info.schedule_obj.stages)
    stage = stages[stage_index]
    stage_dtype = stage.op.output(0).dtype
    block_size = util.get_block_num(stage_dtype)

    total_size = 1
    curr_stage_nonzero_axes = progress.get_nonzero_axes(stage_index)
    if progress.todo.axis_index != len(curr_stage_nonzero_axes) - 1:
        items = curr_stage_nonzero_axes[progress.todo.axis_index + 1:]
        total_size = functools_reduce(lambda x, y: x * y, items)

    if progress.todo.sub_action_index > 0:
        return

    factor_index = \
        ActionTensorCfg.split_factor_s + \
        progress.todo.cache_layer * AXIS_CNT + \
        progress.todo.axis_index
    factor = progress.action_tensor[stage_index][factor_index]
    for i in range(SEARCH_N):
        factor_size = factor + pow(SEARCH_N,
                                   progress.todo.sub_action_index) * i
        if (total_size * factor_size) < block_size:
            logger.debug("[mask]%s factor_size <= 32b, need mask %s [%s, %s].",
                         stage, stage, factor_index, factor_size)
            action_mask[i] = 0

    logger.debug("transpose_r01_factor_larger_than_32_byte action_mask:%s", action_mask)
