#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule
"""
from numpy import ndarray

from auto_search.utils import logger
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.comm import get_limit_ub_size
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.progress import Progress
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.solution_space.tensor_cfg import AXIS_CNT
from auto_search.solution_space.tensor_cfg import ActionTensorCfg


@mask_rule_register([ComputePattern.TRANSPOSE], SearchActionType.SPLIT)
def mask(progress: Progress, action_mask: ndarray):
    """
    if calculate ub_count by factor bigger than ub size, this factor need be masked
    :param progress: Progress
    :param action_mask: action mask
    :return: action mask
    """
    total_factor_size = 1
    stage_index = progress.todo.stage_index
    nonzero_axis = progress.get_nonzero_axes(stage_index)
    split_factor_list = progress.action_tensor[stage_index][
                        ActionTensorCfg.split_factor_s:ActionTensorCfg.split_factor_e + 1]

    stage_info = progress.op_schedule_info.stages_info[stage_index]
    if len(stage_info.get("chosen_axes", [])) < 2:
        return

    for index, factor in enumerate(split_factor_list[:len(nonzero_axis)]):
        if index == progress.todo.axis_index:
            continue
        total_factor_size *= factor

    factor_index = \
        ActionTensorCfg.split_factor_s + \
        progress.todo.cache_layer * AXIS_CNT + \
        progress.todo.axis_index
    factor = progress.action_tensor[progress.todo.stage_index][factor_index]

    trs_ub_size = get_limit_ub_size(progress.op_schedule_info, stage_index)

    for i in range(SEARCH_N):
        next_factor \
            = factor + pow(SEARCH_N, progress.todo.sub_action_index) * i
        if total_factor_size * next_factor > trs_ub_size:
            action_mask[i] = 0

    logger.debug("transpose_r03_factor_size_smaller_than_bound action_mask:%s", action_mask)
