#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

rl schedule search, tss
"""
from numpy import ndarray

from auto_search.utils import logger
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.comm import get_limit_ub_size
from auto_search.utils import util
from auto_search.compute_analysis import get_stage_ordered_axes_obj
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.progress import Progress


@mask_rule_register([ComputePattern.TUPLE_REDUCE, ComputePattern.REDUCE], SearchActionType.CHOOSE_AXIS)
def mask(progress: Progress, action_mask: ndarray):
    """
    rule: chose all possible normal and reduce axis, this rule is with the assumption
          that the reorder of the reduce stage is as following
          - nlast reduce : A..AR..RA
          - last reduce  : A..AR..R
          the size after the split axis shall be smaller than UB buffer size
    :param progress:
    :param action_mask:
    :return:
    """
    stage_index = progress.todo.stage_index
    stages = progress.op_schedule_info.schedule_obj.stages
    stage = stages[stage_index]
    ordered_axes_obj = get_stage_ordered_axes_obj(progress.op_schedule_info, stage_index)
    axes_dim = ordered_axes_obj.get_ordered_axis_dim()
    axes_origin_idx = ordered_axes_obj.get_ordered_axis_origin_idx()

    acc_size_exclude = 1
    acc_size_include = 1
    block_size = util.get_block_num(stage.op.output(0).dtype)
    # get ub size
    limit_ub_size = get_limit_ub_size(progress.op_schedule_info, stage_index)

    for idx in range(SEARCH_N - 1, -1, -1):
        # mask the axis not in the operator's axes
        if idx >= len(axes_dim):
            action_mask[idx] = 0
            continue

        acc_size_include *= axes_dim[idx]
        # do not choose the axis
        #  - with dim equal 1
        #  - with the axis size(exclude) after it bigger than UB buffer size
        #  - with the axis size(include) smaller than 32 Bytes
        if axes_dim[idx] == 1 or \
                acc_size_exclude > limit_ub_size or \
                acc_size_include < block_size:
            origin_idx = axes_origin_idx[idx]
            action_mask[origin_idx] = 0

        acc_size_exclude *= axes_dim[idx]
    if sum(action_mask) == 0:
        action_mask[0] = 1
    logger.debug(f"reduce choose axis r01 stage_index={stage_index} completed with action_mask={action_mask}")
    return action_mask
