#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
mask rule: tail_greater_than_32B
"""
from auto_search.utils import logger
from auto_search.solution_space.features import SEARCH_N
from auto_search.solution_space.tensor_cfg import AXIS_CNT
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.solution_space.comm import BLOCK_SIZE_BYTE
from auto_search.utils import util
from auto_search.solution_space.action import mask_rule_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern


@mask_rule_register([ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.NORM], SearchActionType.SPLIT)
def mask(progress, action_mask):
    """
    if calculate tail data size by factor less than 32B, should be masked
    :param progress:
    :param action_mask:
    :return:
    """
    ub_right_multi_size = 1
    stage_index = progress.todo.stage_index
    curr_stage_nonzero_axes = progress.get_nonzero_axes(stage_index)
    ub_cut_index = progress.todo.axis_index
    for idx in range(len(curr_stage_nonzero_axes) - 1, ub_cut_index, -1):
        ub_right_multi_size *= curr_stage_nonzero_axes[idx]

    # only sampling is over, than judge this rule
    if progress.todo.sub_action_index > 0:
        return

    # get factor
    factor_index = \
        ActionTensorCfg.split_factor_s + \
        progress.todo.cache_layer * AXIS_CNT + \
        progress.todo.axis_index
    factor = progress.action_tensor[progress.todo.stage_index][factor_index]

    stages = progress.op_schedule_info.schedule_obj.stages
    stage_dtype = stages[stage_index].op.output(0).dtype
    elemt_in_block = BLOCK_SIZE_BYTE // util.get_dtype_size(stage_dtype)

    for i in range(SEARCH_N):
        next_factor = factor + pow(SEARCH_N, progress.todo.sub_action_index) * i
        tail_size = (curr_stage_nonzero_axes[ub_cut_index] % next_factor) * ub_right_multi_size
        if 0 < tail_size < elemt_in_block:
            action_mask[i] = 0

    logger.debug("tail_bigger_than_32B action_mask:%s", action_mask)
    return
