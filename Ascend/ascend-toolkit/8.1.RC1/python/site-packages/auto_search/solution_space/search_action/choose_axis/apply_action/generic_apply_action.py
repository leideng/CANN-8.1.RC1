#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
from typing import NoReturn

from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.tensor_cfg import ActionTensorCfg
from auto_search.solution_space.progress import Progress


@apply_action_register([ComputePattern.ELEMENTWISE, ComputePattern.BROADCAST, ComputePattern.NORM,
                        ComputePattern.POOLING],
                       SearchActionType.CHOOSE_AXIS)
def apply(next_progress: Progress, action_value: int) -> NoReturn:
    """
    :param next_progress:
    :param action_value:
    :return:
    """
    stage_index = next_progress.todo.stage_index
    stage_info = next_progress.op_schedule_info.stages_info[stage_index]
    stage_index = next_progress.todo.stage_index
    # factor init 1
    next_progress.action_tensor[stage_index][action_value] = 1
    stage_info['choose_axis'] = action_value


@apply_action_register([ComputePattern.TRANSPOSE], SearchActionType.CHOOSE_AXIS)
def transpose_apply(next_progress: Progress, action_value: int) -> NoReturn:
    """
    :param next_progress:
    :param action_value:
    :return:
    """
    stage_index = next_progress.todo.stage_index
    start_factor_index = ActionTensorCfg.split_factor_s
    stage_info = next_progress.op_schedule_info.stages_info[stage_index]

    # factor init 1
    next_progress.action_tensor[stage_index][start_factor_index + action_value] = 1

    if 'chosen_axes' in stage_info.keys():
        stage_info['chosen_axes'].append(action_value)
    else:
        stage_info.setdefault('chosen_axes', [action_value])
