#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common apply action
"""
import copy

from auto_search.solution_space.action import apply_action_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.utils import logger


@apply_action_register([ComputePattern.REDUCE, ComputePattern.NORM, ComputePattern.POOLING,
                        ComputePattern.TUPLE_REDUCE], SearchActionType.AT_STAGE)
def apply(next_progress, action_value):
    """
    :param next_progress:
    :param action_value:
    :return:
    """
    cur_stage_index = next_progress.todo.stage_index
    cur_stage_info = copy.deepcopy(next_progress.op_schedule_info.stages_info[cur_stage_index])
    consumer_id = next_progress.todo.consumer_id
    at_info = cur_stage_info.get('at_info')
    consumer = at_info.consumers[consumer_id]
    consumer.set_sampled_target(consumer.at_candidates[action_value])
    new_stages_info = []
    for stage_info in next_progress.op_schedule_info.stages_info:
        no_need_type = {
            'CacheRead', 'reduce_atomic_rfactor',
            'reduce_atomic_write'
        }
        if not no_need_type & set(stage_info.get('type', [])):
            if stage_info['name'] == cur_stage_info['name']:
                new_stages_info.append(cur_stage_info)
            else:
                new_stages_info.append(copy.deepcopy(stage_info))
    next_progress.op_schedule_info.stages_info = new_stages_info

    logger.debug("apply at_stage done.")
