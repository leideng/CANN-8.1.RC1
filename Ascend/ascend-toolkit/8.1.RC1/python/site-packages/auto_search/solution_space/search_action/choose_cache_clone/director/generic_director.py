#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
common director
"""
from auto_search.solution_space.action import director_register
from auto_search.solution_space.action import SearchActionType
from auto_search.compute_analysis import ComputePattern
from auto_search.solution_space.schedule_action.cache_read.cache_read_action import CacheReadAction
from auto_search.solution_space.search_action.choose_cache_clone.choose_cache_clone_action import \
    ChooseCacheCloneAction
from auto_search.solution_space.search_action.align_pad.align_pad_action import AlignPadAction
from auto_search.solution_space.schedule_action.cache_clone.cache_clone_action import \
    CacheCloneAction


@director_register([ComputePattern.NORM], SearchActionType.CHOOSE_CACHE_CLONE)
def direct(progress):
    """
    :param progress:
    :return:
    """
    pattern = progress.op_schedule_info.op_pattern
    stages_info = progress.op_schedule_info.stages_info

    # Continue sampling of the cache_clone
    for stage_index, _ in enumerate(stages_info):
        at_info = stages_info[stage_index].get('at_info', None)
        if at_info and at_info.is_fork() and \
                not {'placeholder', 'workspace', 'cache_clone'} & \
                    set(stages_info[stage_index].get('type', [])):
            progress.todo = ChooseCacheCloneAction(pattern, stage_index)
            return

    # if the last axis is not aligned, the next step is to sample align_pad
    if progress.op_schedule_info.compute_graph_info.align_pad_tensor_list:
        next_action = AlignPadAction(pattern)
        progress.todo = next_action
        return

    for stage_index, stage_info in enumerate(stages_info):
        if {'cache_clone'} & set(stage_info.get('type', [])):
            next_action = CacheCloneAction(pattern, stage_index)
            progress.todo = next_action
            return

    # If the last axis is aligned,, the next step is to do cache_read
    for stage_index, stage_info in enumerate(stages_info):
        if {'placeholder', 'workspace'} & set(stage_info.get('type', [])) \
                and 'src_cache_read' not in stage_info.get('type', []):
            next_action = CacheReadAction(pattern, stage_index)
            progress.todo = next_action
            return
