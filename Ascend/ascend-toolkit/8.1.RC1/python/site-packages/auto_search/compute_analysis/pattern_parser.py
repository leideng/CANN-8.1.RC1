#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
auto_schedule template, if user call auto_schedule, this file will choose a
corresponding schedule template for user's compute
"""

from typing import Tuple

from tbe import tvm
from tbe.dsl.unify_schedule import util

from auto_search.compute_analysis.compute_pattern import COMPUTE_TYPE_INSN_MAPPING
from auto_search.compute_analysis.compute_pattern import ComputePattern
from auto_search.compute_analysis.compute_pattern import ComputeType
from auto_search.compute_analysis.pattern_manager import parse


def get_pattern(outs):
    """
    compute_type_size_map
    key: compute type, @see enum(ComputeType)
    value: size of the special compute type
    the "any" key means total of compute
    compute_type_tensor_map
    key: compute type, @see enum(ComputeType)
    value: the special compute type tensor
    :param outs:
    :return:
    """
    compute_type_size_map, compute_type_tensor_map = _dfs_compute(outs)

    pattern = parse(outs, compute_type_size_map, compute_type_tensor_map)
    if pattern is not None:
        return pattern

    return ComputePattern.OPAQUE


def _dfs_compute(outs) -> Tuple[dict, dict]:
    """
    :param outs:
    :return:
    """
    outs = list(outs) if isinstance(outs, (tuple, list)) else [outs]
    visited = set()
    compute_type_size_map = {}
    compute_type_tensor_map = {}
    for out in outs:
        _dfs_compute_inner(out, visited, compute_type_size_map, compute_type_tensor_map)
    return compute_type_size_map, compute_type_tensor_map


def _dfs_compute_inner(tensor: tvm.Tensor, visited: set,
                       compute_type_size_map: dict, compute_type_tensor_map: dict):
    """
    :param tensor:
    :param visited:
    :param compute_type_size_map:
    :param compute_type_tensor_map:
    :return:
    """
    if tensor in visited:
        return
    visited.add(tensor)

    compute_type = _get_compute_type(tensor)
    compute_type_size_map[compute_type] = compute_type_size_map.get(
        compute_type, 0) + 1
    if compute_type not in compute_type_tensor_map:
        compute_type_tensor_map[compute_type] = []
    compute_type_tensor_map[compute_type].append(tensor)

    compute_type_size_map[ComputeType.ANY] = compute_type_size_map.get(
        ComputeType.ANY, 0) + 1
    if ComputeType.ANY not in compute_type_tensor_map:
        compute_type_tensor_map[ComputeType.ANY] = []
    compute_type_tensor_map[ComputeType.ANY].append(tensor)

    for tensor_i in tensor.op.input_tensors:
        _dfs_compute_inner(tensor_i, visited, compute_type_size_map, compute_type_tensor_map)


def _get_compute_type(tensor: tvm.Tensor) -> ComputeType:
    """
    :param tensor:
    :return:
    """
    if isinstance(tensor.op, tvm.PlaceholderOp):
        return ComputeType.PLACEHOLDER

    tag = tensor.op.tag
    if tag is None:
        return ComputeType.UNKNOWN

    insn = util.get_dsl_insn(tensor)
    for compute_type, insns in COMPUTE_TYPE_INSN_MAPPING.items():
        if insn in insns:
            return compute_type

    return ComputeType.UNKNOWN
