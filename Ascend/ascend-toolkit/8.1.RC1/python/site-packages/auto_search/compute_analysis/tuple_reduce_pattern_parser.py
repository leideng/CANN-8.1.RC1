#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
tuple reduce pattern parser
"""

from typing import Dict
from typing import List
from typing import Set
from typing import Union

from tbe.tvm import Tensor
from auto_search.compute_analysis.compute_pattern import ComputeType
from auto_search.compute_analysis.compute_pattern import ComputePattern
from auto_search.compute_analysis.pattern_manager import PatternParser


class TupleReducePatternParser(PatternParser):
    """
    TupleReducePatternParser
    """
    def __init__(self, outs, compute_type_size_map, compute_type_tensor_map):
        # type: (Union[Tensor, List[Tensor]], Dict[ComputeType, int], Dict[ComputeType, List[Tensor]]) -> None
        super().__init__(outs, compute_type_size_map, compute_type_tensor_map)
        self.outs = self.outs

    @staticmethod
    def _poset(_tensor):
        # type: (Tensor) -> Set[Tensor]
        tensors = set(_tensor.op.input_tensors)
        queue = set(_tensor.op.input_tensors)
        while queue:
            tensor = queue.pop()
            tensors.update(tensor.op.input_tensors)
            queue.update(tensor.op.input_tensors)
        return tensors

    def match(self):
        """
        check whether compute graph matches the current pattern
        """
        if not isinstance(self.outs, List):
            self.outs = [self.outs]
        if ComputeType.REDUCE not in self.compute_type_tensor_map:
            return False
        reduce_tensors = self.compute_type_tensor_map.get(ComputeType.REDUCE)
        # check reduce tensor number
        if len(reduce_tensors) < 2:
            return False
        # check reduce tensors' shape
        reduce_tensor_shape = [tensor.shape for tensor in reduce_tensors]
        reduce_tensor_shape = set([tuple(map(str, _shape)) for _shape in reduce_tensor_shape])
        if len(reduce_tensor_shape) > 1:
            return False
        # check reduce axis
        reduce_axis = [axis.var for axis in reduce_tensors[0].op.body[0].axis]
        for tensor in reduce_tensors:
            axes = [axis.var for axis in tensor.op.body[0].axis]
            if not reduce_axis == axes:
                return False
        # check intermediate output, res tensor should not be any tensor's input tensors
        for tensor in self.compute_type_tensor_map[ComputeType.ANY]:
            if set(tensor.op.input_tensors).intersection(set(self.outs)):
                return False
        # check reduce node cannot be followed by any broadcast node
        # check broadcast node cannot be followed by any broadcast node
        if ComputeType.BROADCAST not in self.compute_type_tensor_map:
            return True
        broadcast_tensors = self.compute_type_tensor_map[ComputeType.BROADCAST]
        for tensor in broadcast_tensors:
            if set(reduce_tensors).intersection(self._poset(tensor)):
                return False

        return True

    def get_pattern(self):
        """
        return the current pattern
        """
        return ComputePattern.TUPLE_REDUCE
