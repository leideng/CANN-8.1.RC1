#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
slice pattern parser
"""

from typing import Dict
from typing import List
from typing import Union

from auto_search.compute_analysis.compute_pattern import ComputeType
from auto_search.compute_analysis.compute_pattern import ComputePattern
from auto_search.compute_analysis.pattern_manager import PatternParser
from tbe.tvm import Tensor


class SlicePatternParser(PatternParser):
    """
    SlicePatternParser
    """
    def __init__(self, outs, compute_type_size_map, compute_type_tensor_map):
        # type: (Union[Tensor, List[Tensor]], Dict[ComputeType, int], Dict[ComputeType, List[Tensor]]) -> None
        super().__init__(outs, compute_type_size_map, compute_type_tensor_map)

    def match(self):
        """
        check whether compute graph matches the current pattern
        """
        ph_size = self.compute_type_size_map.get(ComputeType.PLACEHOLDER, 0)
        slice_size = self.compute_type_size_map.get(ComputeType.SLICE, 0)
        total = self.compute_type_size_map.get(ComputeType.ANY, 0)

        if slice_size != 1:
            return False

        return ph_size + slice_size == total and slice_size == 1

    def get_pattern(self):
        """
        return the current pattern
        """
        return ComputePattern.SLICE
