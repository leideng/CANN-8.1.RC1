#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
"""
get id for cheque
"""
import json

from tbe.common.rl_bank.bank_cfg import INTRIN_MAP
from tbe.common.rl_bank.bank_cfg import SCOPE_DICT
from tbe.common.rl_bank.bank_cfg import PRIMITIVE_DICT
from tbe.common.utils import log


def get_primitive_id(primitive_name):
    '''
    get_primitive_id
    :param stage_name:
    :param sch_targets:
    :return:
    '''
    primitive_name = primitive_name.strip()
    for primitive_id in sorted(PRIMITIVE_DICT):
        if PRIMITIVE_DICT[primitive_id] == primitive_name:
            return primitive_id
    raise RuntimeError("no primitive_name named by ", primitive_name)


def get_scope_id(scope):
    '''
    get_scope_id
    :param stage_name:
    :param sch_targets:
    :return:
    '''
    scope = scope.strip()
    for scope_id in sorted(SCOPE_DICT):
        if SCOPE_DICT[scope_id] == scope:
            return scope_id
    raise RuntimeError("no scope named by ", scope)


def get_insn_id(insn_name):
    '''
    get_insn_id
    :param stage_name:
    :param sch_targets:
    :return:
    '''
    insn_name = insn_name.strip()
    for insn_id in sorted(INTRIN_MAP):
        if INTRIN_MAP[insn_id] == insn_name:
            return insn_id
    raise RuntimeError("no insn named by ", insn_name)


def gen_cheque_by_comments(code_line_list):
    '''
    gen_cheque_by_comments
    :param code_line_list:
    :return:
    '''
    # get cheque_list by comments of python file
    for code_line in code_line_list:
        if "# cheque_list: " in code_line:
            cheque_list_str = code_line.split("# cheque_list: ")[1].strip()
            comment_cheque = json.loads(cheque_list_str)
            return comment_cheque


def gen_cheque(code_line_list, kernel_name=""):
    """
    gen cheque
    :param code_line_list:
    :param kernel_name:
    :return:
    """
    comments_cheque_list = gen_cheque_by_comments(code_line_list)
    log.debug("gen cheque succ, kernel_name is %s", kernel_name)
    return comments_cheque_list
