#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for Conv2dBackpropInput
"""
from auto_tune.op_adapter.base_op import TYPE_DICT
from auto_tune.op_adapter.base_op import BaseOpType

DILATION_H_INDEX = 0
DILATION_W_INDEX = 2
#tbe compile para
PASS_PARAM_NUM = 17
#overhead opt flag
OVERHEAD_OPT_TUNE = True


class OpConv2dBackpropInput(BaseOpType):
    '''
    op conv2d_backprop_input implement base_op_type
    '''

    def __init__(self, op_type: str) -> None:
        super(OpConv2dBackpropInput, self).__init__(op_type)
        self.op_tag_encode = 1
        self.pass_param_num = PASS_PARAM_NUM
        self.overhead_opt_tune = OVERHEAD_OPT_TUNE

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        '''
        calc the M,N,K of op conv2d_backprop_input
        :param task: task
        :return: M,N,K
        '''
        # According the difference of pad, kh, k_w of dE/dX,
        # M is also computed differently
        # if pad is 0, kh, k_w are 1, the M is computed by the method
        if 'a_shape' in task.param:
            k_h = task.param.get("b_shape")[2]
            k_w = task.param.get("b_shape")[3]
            param_check = (task.param.get("pad")[2] or task.param.get("pad")[3] or
                           task.param.get("pad")[0] or task.param.get("pad")[1]) and (k_h == 1)
            if not param_check and (k_w == 1):
                m_axis = task.param.get("a_shape")[2] * task.param.get("a_shape")[3] \
                         * task.param.get("a_shape")[0]
            else:
                m_axis = task.param.get("a_shape")[2] * \
                         task.param.get("stride_expand")[0] * \
                         task.param.get("a_shape")[3] * \
                         task.param.get("stride_expand")[1] * \
                         task.param.get("a_shape")[0]

            n_axis = task.param.get("b_shape")[1] * task.param.get("b_shape")[4]
            k_axis = k_h * k_w * task.param.get("a_shape")[1] * task.param.get("a_shape")[4]
        else:
            k_h = task.param.get("B_shape")[2]
            k_w = task.param.get("B_shape")[3]
            param_check = (task.param.get("padu") or task.param.get("padd") or
                           task.param.get("padl") or task.param.get("padr"))
            if not param_check and (k_h == 1) and (k_w == 1):
                m_axis = task.param.get("A_shape")[2] * task.param.get("A_shape")[3] \
                         * task.param.get("A_shape")[0]
            else:
                m_axis = task.param.get("A_shape")[2] * \
                         task.param.get("strideH_expand") * \
                         task.param.get("A_shape")[3] * \
                         task.param.get("strideW_expand") * \
                         task.param.get("A_shape")[0]

            n_axis = task.param.get("B_shape")[1] * task.param.get("B_shape")[4]
            k_axis = k_h * k_w * task.param.get("A_shape")[1] * task.param.get("A_shape")[4]
        return m_axis, n_axis, k_axis

    @staticmethod
    def parse_case_for_atc(op_info_dict: dict) -> dict:
        """
        parse the input case by res_tencor

        Parameters
        ----------
        op_info_dict: dict

        """
        con2d_back_input = {}
        res_dict = {}
        shape_filter_format = op_info_dict.get("cube_ori_format_list")[0]
        shape_out_backprop_format = op_info_dict.get("cube_ori_format_list")[1]
        shape_filter = op_info_dict.get("cube_ori_shape_list")[0]
        shape_out_backprop = op_info_dict.get("cube_ori_shape_list")[1]

        if shape_filter_format == "NCHW":
            con2d_back_input['shape_filter'] = shape_filter
            con2d_back_input['strides'] = op_info_dict.get("all_agrs")[1][2:4]
        elif shape_filter_format == "NHWC":
            con2d_back_input['shape_filter'] = [shape_filter[0],
                                                shape_filter[3],
                                                shape_filter[1],
                                                shape_filter[2]]
            con2d_back_input['strides'] = op_info_dict.get("all_agrs")[1][1:3]
        elif shape_filter_format == "HWCN":
            con2d_back_input['shape_filter'] = [shape_filter[3],
                                                shape_filter[2],
                                                shape_filter[0],
                                                shape_filter[1]]
            con2d_back_input['strides'] = op_info_dict.get("all_agrs")[1][0:2]
        if shape_out_backprop_format == "NCHW":
            con2d_back_input['shape_out_backprop'] = shape_out_backprop
        elif shape_out_backprop_format == "NHWC":
            con2d_back_input['shape_out_backprop'] = [shape_out_backprop[0],
                                                      shape_out_backprop[3],
                                                      shape_out_backprop[1],
                                                      shape_out_backprop[2]]
        con2d_back_input['pads'] = op_info_dict.get("all_agrs")[2]
        con2d_back_input['dilations'] = op_info_dict.get("all_agrs")[3]
        con2d_back_input['filter_dtype'] = op_info_dict.get("cube_dtype_list")[0]
        con2d_back_input['out_backprop_dtype'] = op_info_dict.get("cube_dtype_list")[1]
        con2d_back_input['kernel_name'] = op_info_dict.get("fusion_op_name")
        res_dict['conv2d_backprop_input'] = con2d_back_input
        return res_dict

    @staticmethod
    def get_case_name_suffix(op_info_dict: dict) -> str:
        """
        get case name suffix
        :param task: op_info_dict
        :return: case_name_suffix
        """
        # get the shape info from op_info_dict
        input_params = op_info_dict.get("input_params").get('conv2d_backprop_input')
        shape_filter = input_params.get("shape_filter")
        shape_out_backprop = input_params.get("shape_out_backprop")
        filter_dtype = input_params.get("filter_dtype")
        out_backprop_dtype = input_params.get("out_backprop_dtype")
        strides = input_params.get("strides")
        pads = input_params.get("pads")
        dilations = input_params.get("dilations")
        if isinstance(dilations, int):
            dilations = (dilations, dilations, dilations, dilations)
        strideh, stridew = strides
        dlt_h = dilations[DILATION_H_INDEX]
        dlt_w = dilations[DILATION_W_INDEX]
        # contact the case_name_suffix
        case_name_suffix = \
            str(shape_filter[0]) + '_' + str(shape_filter[1]) + '_' + \
            str(shape_filter[2]) + '_' + str(shape_filter[3]) + '_' + \
            str(shape_out_backprop[0]) + '_' + str(shape_out_backprop[1]) + '_' + \
            str(shape_out_backprop[2]) + '_' + str(shape_out_backprop[3]) + '_' + \
            str(TYPE_DICT[filter_dtype]) + '_' + str(TYPE_DICT[out_backprop_dtype]) + '_' + \
            str(pads[0]) + '_' + str(pads[1]) + '_' + str(pads[2]) + '_' + str(pads[3]) + '_' + \
            str(strideh) + '_' + str(stridew) + '_' + str(dlt_h) + '_' + str(dlt_w)
        return case_name_suffix
