#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for Conv3d
"""

from collections import namedtuple
import math

from auto_tune.op_adapter.base_op import BaseOpType
from auto_tune.op_adapter.base_op import TYPE_DICT

Formatparams = namedtuple("Formatparams", ["formatx", "formatw", "shapex", "shapew", "strides", "dilations"])


class OpConvolution3d(BaseOpType):
    """
    convolution3D implement the base_op_type
    """
    def __init__(self, op_type: str) -> None:
        """
        init method
        :param op_type:op_type 'convolution'
        """
        super(OpConvolution3d, self).__init__(op_type)
        self.op_tag_encode = 8

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        """
        calculate the matric
        :param task: task
        :return: M,N,K
        """
        padu = task.param.get("pad")[2]
        padd = task.param.get("pad")[3]
        padl = task.param.get("pad")[4]
        padr = task.param.get("pad")[5]
        h_o = int(math.floor((task.param.get("a_shape")[3] + padu + \
                              padd - task.param.get("b_shape")[3]) /
                             task.param.get("stride")[1]) + 1)
        w_o = int(math.floor((task.param.get("a_shape")[4] + padl + \
                              padr - task.param.get("b_shape")[4]) /
                             task.param.get("stride")[2]) + 1)
        m_axis = h_o * w_o
        k_axis = task.param.get("a_shape")[2] * task.param.get("a_shape")[5] * \
            task.param.get("b_shape")[3] * task.param.get("b_shape")[4]
        n_axis = task.param.get("b_shape")[0]
        return m_axis, n_axis, k_axis

    @staticmethod
    def get_r(m_axis: int, k_axis: int, task: object) -> int:
        """
        calc the R
        :param M: M
        :param K: K
        :param task:task
        :return: R
        """
        rate = (m_axis * k_axis / (task.param.get("a_shape")[2] *
                                   task.param.get("a_shape")[5] *
                                   task.param.get("a_shape")[3] *
                                   task.param.get("a_shape")[4]))
        return rate

    @staticmethod
    def parse_case_for_atc(op_info_dict: dict) -> dict:
        """
        parse the input case by op_info_dict
        :param op_info_dict: dict
        :return: cases
        """
        cases = {}
        conv3d = {}
        conv3d["x"] = {}
        conv3d["filter"] = {}
        conv3d.get("x")["ori_shape"] = op_info_dict.get("cube_ori_shape_list")[0]
        conv3d.get("x")["dtype"] = op_info_dict.get("cube_dtype_list")[0]
        conv3d.get("x")["ori_format"] = op_info_dict.get("cube_ori_format_list")[0]
        conv3d.get("filter")["ori_shape"] = op_info_dict.get("cube_ori_shape_list")[1]
        conv3d.get("filter")["dtype"] = op_info_dict.get("cube_dtype_list")[1]
        conv3d.get("filter")["ori_format"] = op_info_dict.get("cube_ori_format_list")[1]
        conv3d["bias"] = {}
        if op_info_dict.get("cube_ori_shape_list")[2] is not None:
            conv3d.get("bias")["ori_shape"] = op_info_dict.get("cube_ori_shape_list")[2]
            conv3d.get("bias")["ori_format"] = op_info_dict.get("cube_ori_format_list")[2]
            conv3d.get("bias")["dtype"] = op_info_dict.get("cube_dtype_list")[2]
        else:
            conv3d["bias"] = None

        conv3d["stride"] = op_info_dict.get("all_agrs")[0]
        conv3d["pads"] = op_info_dict.get("all_agrs")[1]
        conv3d["dilations"] = op_info_dict.get("all_agrs")[3]
        conv3d["kernel_name"] = op_info_dict.get("fusion_op_name")
        cases["conv3d"] = conv3d
        return cases

    @staticmethod
    def format_normalize(format_params: Formatparams) -> tuple:
        """
        algorithm: unified format

        Parameters
        ----------
        fmp_format: The data format of the input feature.

        w_format: The data format of the input filter.

        fmp_shape: the shape of feature,
        a list/tuple of 'int' that has length `== 5`

        w_shape: the shape of filter, a list of 'int' that has length `== 5`

        strides: A list of `ints` that has length `== 5`.

        dilations: tuple/list of 5 integers.
        dilation on D/H/W, format sensitive,
        Dilations in the batch and depth dimensions must be 1.

        Returns
        -------
        shape_fm, shape_filter, stride_dhw, dilation_hw
        """
        if format_params.formatx == "NCDHW":
            shape_fm = list(format_params.shapex)
            stride_dhw = format_params.strides[2:]
            dilation_hw = format_params.dilations[3:]
        elif format_params.formatx == "NDHWC":
            shape_fm = [format_params.shapex[0], format_params.shapex[4], format_params.shapex[1],
                        format_params.shapex[2], format_params.shapex[3]]
            stride_dhw = format_params.strides[1:4]
            dilation_hw = format_params.dilations[2:4]
        else:
            dict_args = {
                'errCode': 'E60008',
                'param_name': 'input',
                'expected_format_list': '[{}, {}]'.format('NCDHW', 'NDHWC'),
                'format': format_params.formatx
            }
            raise RuntimeError(dict_args)

        if format_params.formatw == "NCDHW":
            shape_filter = list(format_params.shapew)
        elif format_params.formatw == "NDHWC":
            shape_filter = [format_params.shapew[0], format_params.shapew[4], format_params.shapew[1],
                            format_params.shapew[2], format_params.shapew[3]]
        elif format_params.formatw == "DHWCN":
            shape_filter = [format_params.shapew[4], format_params.shapew[3], format_params.shapew[0],
                            format_params.shapew[1], format_params.shapew[2]]
        else:
            dict_args = {
                'errCode': 'E60008',
                'param_name': 'weight',
                'expected_format_list': '[{}, {}, {}]'.format('NCDHW', 'NDHWC', 'DHWCN'),
                'format': format_params.formatw
            }
            raise RuntimeError(dict_args)
        return shape_fm, shape_filter, stride_dhw, dilation_hw

    def get_case_name_suffix(self, op_info_dict: dict) -> str:
        """
        parse the input case names by op_info_dict
        :param op_info_dict:
        :return: cases_names
        """
        inputs = op_info_dict.get("input_params").get("conv3d").get("x")
        shapex = inputs.get("ori_shape")
        formatx = inputs.get("ori_format")
        typex = inputs.get("dtype")
        weight = op_info_dict.get("input_params").get("conv3d").get("filter")
        shapew = weight.get("ori_shape")
        formatw = weight.get("ori_format")
        typew = weight.get("dtype")
        dilations = op_info_dict.get("input_params").get("conv3d").get("dilations")
        stride = op_info_dict.get("input_params").get("conv3d").get("stride")
        #normalized shape is NCDHW

        format_params = Formatparams(formatx, formatw, shapex, shapew, stride, dilations)
        shapex, shapew, stride_dhw, dilation_hw = self.format_normalize(format_params)
        pads = op_info_dict.get("input_params").get("conv3d").get("pads")
        cases_names  = str(shapex[0]) + '_' + \
                      str(shapex[1]) + '_' + \
                      str(shapex[2]) + '_' + \
                      str(shapex[3]) + '_' + \
                      str(shapex[4]) + '_' + \
                      str(shapew[0]) + '_' + \
                      str(shapew[1]) + '_' + \
                      str(shapew[2]) + '_' + \
                      str(shapew[3]) + '_' + \
                      str(shapew[4]) + '_' + \
                      str(TYPE_DICT[typex]) + '_' + \
                      str(TYPE_DICT[typew]) + '_' + \
                      str(pads[0]) + '_' + \
                      str(pads[1]) + '_' + \
                      str(pads[2]) + '_' + \
                      str(pads[3]) + '_' + \
                      str(pads[4]) + '_' + \
                      str(pads[5]) + '_' + \
                      str(stride_dhw[0]) + '_' + \
                      str(stride_dhw[1]) + '_' + \
                      str(stride_dhw[2]) + '_' + \
                      str(dilation_hw[0]) + '_' + \
                      str(dilation_hw[1])
        return cases_names
