#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for Conv2dBackpropFilter
"""

from auto_tune.op_adapter.base_op import BaseOpType
from auto_tune.op_adapter.base_op import TYPE_DICT

DILATION_H_INDEX = 0
DILATION_W_INDEX = 2
#tbe compile para
PASS_PARAM_NUM = 17
#overhead opt flag
OVERHEAD_OPT_TUNE = True


class OpConv2dBackpropFilter(BaseOpType):
    '''
    op of conv2d_backprop_filter implement base_op_type
    '''

    def __init__(self, op_type: str) -> None:
        super(OpConv2dBackpropFilter, self).__init__(op_type)
        self.op_tag_encode = 2
        self.pass_param_num = PASS_PARAM_NUM
        self.overhead_opt_tune = OVERHEAD_OPT_TUNE

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        '''
        clac the M,N,K of op  conv2d_backprop_filter
        :param task: task
        :return: M,N,K
        '''
        m_axis = task.param.get("A_shape")[1] * task.param.get("A_shape")[4]
        m_axis = task.param.get("C_shape")[2] * task.param.get("C_shape")[3] * \
            task.param.get("B_shape")[1] * task.param.get("B_shape")[4]
        k_axis = task.param.get("A_shape")[2] * task.param.get("A_shape")[3] * \
            task.param.get("A_shape")[0]
        return m_axis, m_axis, k_axis

    @staticmethod
    def parse_case_for_atc(op_info_dict: dict) -> dict:
        """
        parse the input case by res_tencor

        Parameters
        ----------
        op_info_dict: dict

        """
        con2d_back_filter = {}
        res_dict = {}
        shape_x_format = op_info_dict.get("cube_ori_format_list")[0]
        shape_out_backprop_format = op_info_dict.get("cube_ori_format_list")[1]
        shape_x = op_info_dict.get("cube_ori_shape_list")[0]
        shape_out_backprop = op_info_dict.get("cube_ori_shape_list")[1]
        if shape_x_format == "NCHW":
            con2d_back_filter['shape_x'] = shape_x
            con2d_back_filter['strides'] = op_info_dict.get("all_agrs")[2][2:4]
        elif shape_x_format == "NHWC":
            con2d_back_filter['shape_x'] = [shape_x[0], shape_x[3], shape_x[1], shape_x[2]]
            con2d_back_filter['strides'] = op_info_dict.get("all_agrs")[2][1:3]
        if shape_out_backprop_format == "NCHW":
            con2d_back_filter['shape_out_backprop'] = shape_out_backprop
        elif shape_out_backprop_format == "NHWC":
            con2d_back_filter['shape_out_backprop'] = [shape_out_backprop[0],
                                                       shape_out_backprop[3],
                                                       shape_out_backprop[1],
                                                       shape_out_backprop[2]]
        con2d_back_filter['pads'] = op_info_dict.get("all_agrs")[2]
        con2d_back_filter['dilations'] = op_info_dict.get("all_agrs")[3]
        con2d_back_filter['x_dtype'] = op_info_dict.get("cube_dtype_list")[0]
        con2d_back_filter['out_backprop_dtype'] = op_info_dict.get("cube_dtype_list")[1]
        con2d_back_filter['kernel_name'] = op_info_dict.get("fusion_op_name")
        res_dict['conv2d_backprop_filter'] = con2d_back_filter
        return res_dict

    @staticmethod
    def get_case_name_suffix(op_info_dict: dict) -> str:
        """
        get case name suffix
        :param task: op_info_dict
        :return: case_name_suffix
        """
        # get the shape info from op_info_dict
        input_params = op_info_dict.get("input_params").get('conv2d_backprop_filter')
        shape_x = input_params.get("shape_x")
        shape_out_backprop = input_params.get("shape_out_backprop")
        x_dtype = input_params.get("x_dtype")
        out_backprop_dtype = input_params.get("out_backprop_dtype")
        strides = input_params.get("strides")
        pads = input_params.get("pads")
        dilations = input_params.get("dilations")
        strideh, stridew = strides
        dlt_h = dilations[DILATION_H_INDEX]
        dlt_w = dilations[DILATION_W_INDEX]
        # contact the case_name_suffix
        case_name_suffix = str(shape_x[0]) + '_' + str(shape_x[1]) + '_' + \
            str(shape_x[2]) + '_' + str(shape_x[3]) + '_' + \
            str(shape_out_backprop[0]) + '_' + str(shape_out_backprop[1]) + '_' + \
            str(shape_out_backprop[2]) + '_' +  str(shape_out_backprop[3]) + '_' + \
            str(TYPE_DICT[x_dtype]) + '_' + str(TYPE_DICT[out_backprop_dtype]) + '_' + \
            str(pads[0]) + '_' +  str(pads[1]) + '_' + str(pads[2]) + '_' + str(pads[3]) + '_' + \
            str(strideh) + '_' + str(stridew) + '_' + str(dlt_h) + '_' + str(dlt_w)
        return case_name_suffix
