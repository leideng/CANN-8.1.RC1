#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for Conv3d backprop_input
"""

from auto_tune.op_adapter.base_op import BaseOpType

OP_TAG_CONV3D_BP_INPUT = 9


class OpConv3dBackpropInput(BaseOpType):
    """
    convolution implement the base_op_type
    """

    def __init__(self, op_type: str) -> None:
        """
        init method
        :param op_type:op_type 'convolution'
        """
        super(OpConv3dBackpropInput, self).__init__(op_type)
        self.op_tag_encode = OP_TAG_CONV3D_BP_INPUT

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        """
        calculate the matric
        :param task: task
        :return: M,N,K
        """
        h_o = task.param.get("a_shape")[3]
        w_o = task.param['a_shape'][4]

        m_axis = h_o * w_o
        n_axis = task.param.get("b_shape")[0]

        k_axis = task.param.get("a_shape")[2] * task.param.get("a_shape")[5] * \
                 task.param.get("b_shape")[3] * task.param.get("b_shape")[4]
        return m_axis, n_axis, k_axis

    @staticmethod
    def get_r(m_axis: int, k_axis: int, task: object) -> int:
        """
        calc the R
        :param m_axis: M
        :param k_axis: K
        :param task:task
        :return: R
        """
        rate = (m_axis * k_axis / (task.param.get("a_shape")[2] *
                                   task.param.get("a_shape")[5] *
                                   task.param.get("a_shape")[3] *
                                   task.param.get("a_shape")[4]))
        return rate
