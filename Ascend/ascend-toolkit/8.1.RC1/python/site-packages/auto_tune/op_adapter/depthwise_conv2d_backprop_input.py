#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for DepthwiseBpInput
"""
from auto_tune.op_adapter.base_op import BaseOpType
from auto_tune.op_adapter.base_op import TYPE_DICT


class OpDepthwiseBpInput(BaseOpType):
    '''
    op depthwise_conv2d_backprop_input implement base_op_type
    '''

    def __init__(self, op_type: str) -> None:
        super(OpDepthwiseBpInput, self).__init__(op_type)
        self.op_tag_encode = 4

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        '''
        calc the M,N,K of op conv2d_backprop_input
        :param task: task
        :return: M,N,K
        '''
        # According the difference of pad, kh, kw of dE/dX,
        # M is also computed differently
        # if pad is 0, kh, kw are 1, the M is computed by the method
        k_h = task.param.get("B_shape")[2]
        k_w = task.param.get("B_shape")[3]

        if not (task.param.get("padu") or task.param.get("padd") or \
            task.param.get("padl") or task.param.get("padr")) and (k_h == 1) and (k_w == 1):
            m_axis = task.param.get("A_shape")[2] * task.param.get("A_shape")[3] * task.param.get("A_shape")[0]
        else:
            m_axis = task.param.get("A_shape")[2] * \
                task.param.get("strideH_expand") * \
                task.param.get("A_shape")[3] * \
                task.param.get("strideW_expand") * task.param.get("A_shape")[0]
        n_axis = task.param.get("B_shape")[1] * task.param.get("B_shape")[4]
        k_axis = k_h * k_w * task.param.get("A_shape")[1] *  task.param.get("A_shape")[4]
        return m_axis, n_axis, k_axis

    @staticmethod
    def parse_case_for_atc(op_info_dict: dict) -> None:
        """
        parse the input case by op_info_dict

        Parameters
        ----------
        op_info_dict: dict

        """
        depthwise_bp_input = {}
        res_dict = {}

        filter_format = op_info_dict.get("cube_ori_format_list")[0]
        out_backprop_format = op_info_dict.get("cube_ori_format_list")[1]
        shape_filter = op_info_dict.get("cube_ori_shape_list")[0]
        shape_out = op_info_dict.get("cube_ori_shape_list")[1]

        depthwise_bp_input['filter'] = {}
        if filter_format == "NCHW":
            depthwise_bp_input.get('filter')['ori_shape'] = shape_filter
            depthwise_bp_input.get('filter')['ori_format'] = "NCHW"
        elif filter_format == "HWCK" or "HWCN":
            depthwise_bp_input.get('filter')['ori_shape'] = [shape_filter[3],
                                                         shape_filter[2],
                                                         shape_filter[0],
                                                         shape_filter[1]]
            depthwise_bp_input.get('filter')['ori_format'] = "NCHW"
        else:
            raise RuntimeError("only supported HWCK(HWCN)/NCHW")
        depthwise_bp_input.get('filter')['dtype'] = op_info_dict.get("cube_dtype_list")[0]

        depthwise_bp_input['out_backprop'] = {}
        if out_backprop_format == "NCHW":
            depthwise_bp_input.get("out_backprop")["ori_shape"] = shape_out
            depthwise_bp_input.get('out_backprop')['ori_format'] = "NCHW"
            depthwise_bp_input['strides'] = op_info_dict.get("all_agrs")[1]
            depthwise_bp_input['dilations'] = op_info_dict.get("all_agrs")[2]
            depthwise_bp_input['data_format'] = "NCHW"
        elif out_backprop_format == "NHWC":
            depthwise_bp_input.get('out_backprop')['ori_shape'] = [shape_out[0],
                                                               shape_out[3],
                                                               shape_out[1],
                                                               shape_out[2]]
            depthwise_bp_input.get('out_backprop')['ori_format'] = "NCHW"
            depthwise_bp_input['strides'] = [op_info_dict.get("all_agrs")[1][0],
                                             op_info_dict.get("all_agrs")[1][3],
                                             op_info_dict.get("all_agrs")[1][1],
                                             op_info_dict.get("all_agrs")[1][2]]
            depthwise_bp_input['dilations'] = [op_info_dict.get("all_agrs")[2][0],
                                               op_info_dict.get("all_agrs")[2][3],
                                               op_info_dict.get("all_agrs")[2][1],
                                               op_info_dict.get("all_agrs")[2][2]]
            depthwise_bp_input['data_format'] = "NCHW"
        else:
            raise RuntimeError("only supported NCHW and NHWC")
        depthwise_bp_input.get('out_backprop')['dtype'] = op_info_dict.get("cube_dtype_list")[1]


        depthwise_bp_input['pads'] = op_info_dict.get("all_agrs")[3]
        depthwise_bp_input['kernel_name'] = "depthwise_conv2d_backprop_input"
        res_dict['depthwise_bp_input'] = depthwise_bp_input
        return res_dict

    @staticmethod
    def get_case_name_suffix(op_info_dict: dict) -> str:
        """
        get case name suffix
        :param task: op_info_dict
        :return: case_name_suffix
        """
        # get the shape info from op_info_dict
        input_params = op_info_dict.get("input_params").get("depthwise_bp_input")
        shape_filter = input_params.get("filter").get("ori_shape")
        filter_dtype = input_params.get("filter").get("dtype")
        shape_out_backprop = input_params.get("out_backprop").get("ori_shape")
        out_backprop_dtype = input_params.get("out_backprop").get("dtype")
        pads = input_params.get("pads")

        _, _, strideh, stridew = input_params.get("strides")
        _, _, dlt_h, dlt_w = input_params.get("dilations")

        case_name_suffix = str(shape_filter[0]) + '_' + str(shape_filter[1]) + '_' + \
            str(shape_filter[2]) + '_' + str(shape_filter[3]) + '_' + \
            str(shape_out_backprop[0]) + '_' + str(shape_out_backprop[1]) + '_' + \
            str(shape_out_backprop[2]) + '_' + str(shape_out_backprop[3]) + '_' + \
            str(TYPE_DICT[filter_dtype]) + '_' + str(TYPE_DICT[out_backprop_dtype]) + '_' + \
            str(pads[0]) + '_' + str(pads[1]) + '_' + str(pads[2]) + '_' + str(pads[3]) + '_' + \
            str(strideh) + '_' + str(stridew) + '_' + str(dlt_h) + '_' + str(dlt_w)
        return case_name_suffix
