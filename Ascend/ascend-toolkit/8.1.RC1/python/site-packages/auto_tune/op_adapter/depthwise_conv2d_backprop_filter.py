#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the class for DepthwiseBpFilter
"""
from auto_tune.op_adapter.base_op import BaseOpType
from auto_tune.op_adapter.base_op import TYPE_DICT


class OpDepthwiseBpFilter(BaseOpType):
    '''
    op of depthwise_conv2d_backprop_filter implement base_op_type
    '''

    def __init__(self, op_type: str) -> None:
        super(OpDepthwiseBpFilter, self).__init__(op_type)
        self.op_tag_encode = 5

    @staticmethod
    def calc_matric_feature(task: object) -> tuple:
        '''
        clac the M,N,K of op  depthwise_conv2d_backprop_filter
        :param task: task
        :return: M,N,K
        '''
        m_axis = task.param.get("A_shape")[1] * task.param.get("A_shape")[4]
        n_axis = task.param.get("C_shape")[0] * task.param.get("C_shape")[1] * \
            task.param.get("B_shape")[1] * task.param.get("B_shape")[4]
        k_axis = task.param.get("A_shape")[2] * task.param.get("A_shape")[3] * \
            task.param.get("A_shape")[0]
        return m_axis, n_axis, k_axis

    @staticmethod
    def parse_case_for_atc(op_info_dict: dict) -> dict:
        """
        parse the input case by op_info_dict

        Parameters
        ----------
        op_info_dict: dict

        """
        depthwise_bp_filter = {}
        res_dict = {}

        input_format = op_info_dict.get("cube_ori_format_list")[0]
        out_backprop_format = op_info_dict.get("cube_ori_format_list")[1]
        shape_input = op_info_dict.get("cube_ori_shape_list")[0]
        shape_out = op_info_dict.get("cube_ori_shape_list")[1]

        depthwise_bp_filter['input'] = {}
        strides = op_info_dict.get("all_agrs")[1]
        dilations = op_info_dict.get("all_agrs")[2]
        if input_format == "NCHW":
            depthwise_bp_filter.get('input')['ori_shape'] = shape_input
            depthwise_bp_filter['strides'] = strides
            depthwise_bp_filter['dilations'] = dilations
        elif input_format == "NHWC":
            depthwise_bp_filter.get('input')['ori_shape'] = [shape_input[0], shape_input[3],
                                                             shape_input[1], shape_input[2]]
            depthwise_bp_filter['strides'] = [strides[0], strides[3], strides[1], strides[2]]
            depthwise_bp_filter['dilations'] = [dilations[0], dilations[3], dilations[1], dilations[2]]
        else:
            raise RuntimeError("only supported NHWC and NCHW")
        depthwise_bp_filter.get('input')['ori_format'] = "NCHW"
        depthwise_bp_filter['data_format'] = "NCHW"
        depthwise_bp_filter.get('input')['dtype'] = op_info_dict.get("cube_dtype_list")[0]

        depthwise_bp_filter['out_backprop'] = {}
        if out_backprop_format == "NCHW":
            depthwise_bp_filter.get('out_backprop')['ori_shape'] = shape_out
            depthwise_bp_filter.get('out_backprop')['ori_format'] = "NCHW"
        elif out_backprop_format == "NHWC":
            depthwise_bp_filter.get('out_backprop')['ori_shape'] = [shape_out[0], shape_out[3],
                                                                    shape_out[1], shape_out[2]]
            depthwise_bp_filter.get('out_backprop')['ori_format'] = "NCHW"
        else:
            raise RuntimeError("only supported NHWC and NCHW")
        depthwise_bp_filter.get('out_backprop')['dtype'] = op_info_dict.get("cube_dtype_list")[1]

        depthwise_bp_filter['pads'] = op_info_dict.get("all_agrs")[3]
        depthwise_bp_filter['kernel_name'] = "depthwise_conv2d_backprop_filter"
        res_dict['depthwise_bp_filter'] = depthwise_bp_filter
        return res_dict

    @staticmethod
    def get_case_name_suffix(op_info_dict: dict) -> str:
        """
        get case name suffix
        :param task: op_info_dict
        :return: case_name_suffix
        """
        # get the shape info from op_info_dict
        input_params = op_info_dict.get("input_params").get("depthwise_bp_filter")
        shape_input_fm = input_params.get('input').get("ori_shape")
        filter_dtype = input_params.get('input').get("dtype")
        shape_out_backprop = input_params.get('out_backprop').get("ori_shape")
        out_backprop_dtype = input_params.get('out_backprop').get("dtype")
        pads = input_params.get('pads')

        _, _, strideh, stridew = input_params.get("strides")
        _, _, dlt_h, dlt_w = input_params.get("dilations")

        case_name_suffix = str(shape_input_fm[0]) + '_' + str(shape_input_fm[1]) + '_' + \
            str(shape_input_fm[2]) + '_' + str(shape_input_fm[3]) + '_' + \
            str(shape_out_backprop[0]) + '_' + str(shape_out_backprop[1]) + '_' + \
            str(shape_out_backprop[2]) + '_' + str(shape_out_backprop[3]) + '_' + \
            str(TYPE_DICT[filter_dtype]) + '_' +  str(TYPE_DICT[out_backprop_dtype]) + '_' + \
            str(pads[0]) + '_' + str(pads[1]) + '_' + str(pads[2]) + '_' + str(pads[3]) + '_' + \
            str(strideh) + '_' + str(stridew) + '_' + str(dlt_h) + '_' + str(dlt_w)
        return case_name_suffix
