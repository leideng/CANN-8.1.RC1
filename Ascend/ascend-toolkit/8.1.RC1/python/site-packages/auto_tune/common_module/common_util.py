#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2022. Huawei Technologies Co., Ltd. All rights reserved.

Define the CommonUtil class
"""
import os
import time
from collections import namedtuple
from dataclasses import make_dataclass

from tbe.common.platform.platform_info import get_soc_spec

from auto_tune.estimate.python.util import check_device_id

SocVerInfo =  make_dataclass("SocVerInfo", ["soc_version", "full_soc_version", "aicore_num", "l1_size"])
TuneOpParam = namedtuple("TuneOpParam", ["already_in_repo", "tune_result_file", "time_stamp", "pass_param_num",
                                         "overhead_opt_tune", "option"])
TuneResReport = namedtuple("TuneResReport", ["before_cost", "after_cost", "update_flag", "exist_repository"])
BankFilePair = namedtuple("BankFilePair", ["json", "bin"])

GA_DIR_NAME = "cube"
ASCEND_DEVICE_ID = 'ASCEND_DEVICE_ID'

# define config
MAX_UINT64 = 18446744073709551615
MAX_UINT32 = 4294967295
MAX_UINT16 = 65535
MKN = "MKN"
CA0 = "CA0"
SPARSITY_FLAG = "4To2_structured_sparsity"
SPECIAL_MODE = "special_mode"
DEFAULT_COEFFICIENT = 1
EXCEPTIONAL_K_VALUE = 1

COST_MAX_VALUE = 1e17
DEFAULT_OM_RUN_THRESHOLD = 18446744073709551615
FIFTY_MICROSECONDS = 50000
THREE_HUNDRED_MICROSECONDS = 300000
FIVE_MILLISECONDS = 5000000

GA_SKIP_ROUND = -2
GA_SKIP_FLAG = "skip"


class MeasureResult:
    """
    Base class for record the result of tuner

    Parameters: tiling_point, cost
    ----------
    """
    def __init__(self, point: tuple, cost: int, verify: bool=True) -> None:
        self.point = point  # the index of tiling
        self.cost = cost  # runtime cost, total time (us)
        self.verify = verify # datacmp succ or not


def get_soc_info():
    """
    get info of soc version / full soc version / core num /l1 size
    """
    return SocVerInfo(get_soc_spec("SHORT_SOC_VERSION"),
               get_soc_spec("FULL_SOC_VERSION"),
               get_soc_spec("CORE_NUM"),
               get_soc_spec("L1_SIZE"))


def get_time_str() -> str:
    """
    transform "." in time str to "_"
    """
    return str(time.time()).replace(".", "_")[-9:]


def is_zero_tiling(tiling_dict: dict) -> bool:
    """
    judge whether the tiling is zero or not
    Parameters:
    ----------
    tiling_dict: tiling_dict
    """
    return bool(all(value == 0 for value in tiling_dict.get('AL0_matrix')))


def check_dir_access_valid(path_str: str, access_limit: object) -> bool:
    """
    check if the path is available for input access limit
    """
    path_str = os.path.realpath(path_str)
    if os.path.exists(path_str) and os.path.isdir(path_str) and os.access(path_str, access_limit):
        return True
    return False


def check_file_permission(file_path: str, access_limit: object) -> bool:
    """
    check the rw permission of the existing file
    """
    if not os.path.exists(os.path.realpath(file_path)):
        return True
    if os.access(file_path, access_limit):
        return True
    return False


def calc_costtime_upperbound(run_time_baseline: int) -> int:
    """
    Get threshold for om run
    """
    if run_time_baseline == DEFAULT_OM_RUN_THRESHOLD:
        return run_time_baseline
    if run_time_baseline <= FIFTY_MICROSECONDS:
        return run_time_baseline * 10
    if FIFTY_MICROSECONDS < run_time_baseline <= THREE_HUNDRED_MICROSECONDS:
        return run_time_baseline * 5
    if THREE_HUNDRED_MICROSECONDS < run_time_baseline <= FIVE_MILLISECONDS:
        return int(run_time_baseline * 3)
    return int(run_time_baseline * 3)


def report_tune_progress(tune_process_q: object,
                         cbkey: str,
                         cur_round: int = GA_SKIP_ROUND,
                         total_round: int = GA_SKIP_ROUND,
                         skip: bool = False) -> None:
    """
    report ga tune progress to tuneProgressThread
    """
    if tune_process_q and cbkey:
        tmp_tune_msg = {}
        tmp_tune_msg["GA"] = (cbkey, GA_SKIP_FLAG) if skip else (cbkey, cur_round, total_round)
        tune_process_q.put(tmp_tune_msg)
