#!/usr/bin/env python
# -*- coding:utf-8 -*-

"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.

Define the main function of auto_tune
"""
import inspect
import os
import logging
from te.utils.AscendLog import LOGGER

# Slog module name
MODULE_NAME = "auto_tune"
FILE_PATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
RUN_LOG_MASK = 0x01000000


class AutoTuneSLog:
    """
    auto tune log class
    """

    def __init__(self) -> None:
        self.logger = LOGGER

    @staticmethod
    def get_log_location() -> str:
        """
        get auto tune log called location, contains the lines and file name
        return: file name and line number and module name
        """
        line = inspect.currentframe().f_back.f_back.f_lineno
        co_filename = inspect.currentframe().f_back.f_back.f_code.co_filename
        filename = os.path.relpath(co_filename, FILE_PATH)
        log_str = '[%s:%d][%s] ' % (filename, line, MODULE_NAME)
        return log_str

    def info(self, msg: object, *args: object) -> None:
        """
        info msg
        :param msg:
        :param args:
        :return:
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        self.logger.info(LOGGER.module.tbe, log_all_msg)

    def debug(self, msg: object, *args: object) -> None:
        """
        debug msg
        :param msg:
        :param args:
        :return:
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        self.logger.debug(LOGGER.module.tbe, log_all_msg)

    def error(self, msg: object, *args: object) -> None:
        """
        error msg
        :param msg:
        :param args:
        :return:
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        self.logger.error(LOGGER.module.tbe, log_all_msg)


    def error_multi(self, separator: str, msg: object, *args: object) -> None:
        """
        if slog content is bigger than 955 bytes, Please use this function
        param:separator: a separator to divide the log content
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        single_content_list = log_all_msg.split(separator)
        for single_content in single_content_list:
            self.logger.error(LOGGER.module.tbe, single_content)


    def warning(self, msg: object, *args: object) -> None:
        """
        warning msg
        :param msg:
        :param args:
        :return:
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        self.logger.warn(LOGGER.module.tbe, log_all_msg)

    def event(self, msg: object, *args: object) -> None:
        """
        event msg
        :param msg:
        :param args:
        :return:
        """
        log_str = self.get_log_location()
        log_all_msg = "{}{}".format(log_str, str(msg) % args)
        self.logger.info(LOGGER.module.tbe | RUN_LOG_MASK, log_all_msg)

    def set_log_level(self, level: int = 1, event_enable: int = 0) -> None:
        """
        set slog level only in offline auto tune
        :param level:
        :param event_enable:
        :return:
        """
        self.logger.set_level(LOGGER.module.tbe, level, event_enable)


class AutoTuneProgress:
    """
    Logger for Auto tune progress, only for auto tune
    """

    def __init__(self) -> None:
        self.logger = logging.getLogger("auto_tune_log")
        self.logger.setLevel(logging.DEBUG)
        self.file_handler = None
        self.file_level = None
        self.console_handler = None
        self.console_level = None
        self.formatter = logging.Formatter(
            '[%(levelname)s] auto_tune[%(process)d] '
            '[%(asctime)s] : %(message)s')

        self.console_handler = logging.StreamHandler()
        self.console_level = logging.INFO
        self.console_handler.setLevel(logging.INFO)
        self.console_handler.setFormatter(self.formatter)
        self.logger.addHandler(self.console_handler)
        self.log_flag = True

    def info(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        Auto tune pregress info
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        if self.log_flag:
            self.logger.info(msg, *args, **kwargs)
        else:
            LOG_INSTANCE.info(msg, *args)

    def debug(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        debug msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        if self.log_flag:
            self.logger.debug(msg, *args, **kwargs)
        else:
            LOG_INSTANCE.debug(msg, *args)

    def error(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        error msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        if self.log_flag:
            self.logger.error(msg, *args, **kwargs)
        else:
            LOG_INSTANCE.error(msg, *args)

    def warning(self, msg: object, *args: object, **kwargs: object) -> None:
        """
        warning msg
        :param msg:
        :param args:
        :param kwargs:
        :return:
        """
        if self.log_flag:
            self.logger.warning(msg, *args, **kwargs)
        else:
            LOG_INSTANCE.warning(msg, *args)

    def set_log_flag(self, log_flag: bool) -> None:
        """
        set log flag
        :param log_flag:
        :return:
        """
        self.log_flag = log_flag

LOG_INSTANCE = AutoTuneSLog()
LOG_PROGRESS_INSTANCE = AutoTuneProgress()
