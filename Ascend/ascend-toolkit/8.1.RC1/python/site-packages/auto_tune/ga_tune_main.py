#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.

GA-TUNE
"""
import datetime
import json
import sys
import shutil
import os
import signal
import glob
from pathlib import Path

from tbe.common.context import op_context
from tbe.common.platform.platform_info import get_soc_spec
from tbe.common.platform import set_current_compile_soc_info
from tbe.common.buildcfg.compatible_interface import set_L1_info
from tbe.common.repository_manager import interface
from tbe.common.tiling.tiling_api import reset_repository
from te_fusion.parallel_compilation import init_multi_process_env
from te_fusion.parallel_compilation import deinit_multi_process_env

from auto_tune.te_fusion_json_keys import TeFusionJsonKeys
from auto_tune.te_fusion_json_keys import SocInfoKeys
from auto_tune.auto_tune_log import LOG_INSTANCE
from auto_tune.auto_tune_main import auto_tune_compile
from auto_tune.util_atc import OP_TAG_DICT


def sigint_handler(signum: object, frame: object) -> None: # pylint: disable=unused-argument
    """
    del_tmp_file when ctrl-c happened
    """
    del_tmp_files(True)
    os._exit(1) # pylint: disable=protected-access


def get_op_desc(tune_json: str) -> str:
    """
    get_io_desc from tune_json
    """
    op_desc = None
    with open(tune_json, 'r') as file_handler:
        try:
            op_desc_dict = json.load(file_handler)
            if get_op_tag(op_desc_dict):
                op_desc = json.dumps(op_desc_dict)
        except ValueError:
            LOG_INSTANCE.debug("Please check your json file %s", tune_json)
        finally:
            pass

    return op_desc


def get_op_tag(json_data: dict) -> str:
    """
    get op_tag from json

    Parameters
    ----------
    param: json_data, get the tag of op
    """
    op_tag = ""
    if "op_list" not in json_data:
        return op_tag
    for op_node in json_data.get("op_list", []):
        op_type = op_node.get("type", "")
        if op_type == "Data" or op_type not in OP_TAG_DICT:
            continue
        op_tag = op_type
        break
    return op_tag


def get_tune_list(dump_dir: str) -> list:
    """
    get GA files list
    """
    rl_json_list = []
    json_list = []
    dump_dir = os.path.realpath(dump_dir)
    for path in Path(dump_dir).glob('*.json'):
        path_str = os.fspath(path)
        json_list.append(path_str)
        if path_str.endswith(".tune_info.json"):
            rl_json_list.append(path_str)
            rl_name = path_str.split('.')[0]
            rl_json = '{}.json'.format(rl_name)
            rl_json_list.append(rl_json)
    tune_json_list = list(set(json_list).difference(set(rl_json_list)))
    return tune_json_list


def auto_tune_env_deinit() -> None:
    """
    auto_tune_env_deinit for auto tune
    """
    deinit_multi_process_env()
    interface.cann_kb_finalize()


def auto_tune_env_init(input_params: dict) -> None:
    """
    auto tune env init for auto tune:
    get some params for init_multi_proc_env
    Parameters
    ----------
    input_params: storage the operator case

    Returns
    -------
    """
    soc_info = input_params.get(TeFusionJsonKeys.SOC_INFO)
    soc_version = soc_info.get(SocInfoKeys.SOC_VERSION)
    l1_size = input_params.get(TeFusionJsonKeys.L1_SIZE)
    core_type = soc_info.get(SocInfoKeys.CORE_TYPE)
    core_num = soc_info.get(SocInfoKeys.CORE_NUM)
    l1_fusion_flag = soc_info.get(SocInfoKeys.L1_FUSION)
    l2_fusion_flag = soc_info.get(SocInfoKeys.L2_FUSION)
    l2_mode = soc_info.get(SocInfoKeys.L2_MODE)
    set_current_compile_soc_info(soc_version, core_type=core_type, aicore_num=core_num, l1_fusion=l1_fusion_flag)
    if l1_fusion_flag == "true" and int(l1_size) > 0:
        set_L1_info("op_L1_space", int(l1_size))
    # soc_env include socver, coretype, corenum, l1fusion, l2mode, l2fusion
    soc_env = [soc_version, core_type, core_num, l1_fusion_flag, l2_mode, l2_fusion_flag]
    init_multi_process_env(0, soc_env, "GA")
    LOG_INSTANCE.debug("get_param_soc: get l1_Size: %s", get_soc_spec("L1_SIZE"))
    interface.cann_kb_init({"soc_version": soc_version, "core_num": core_num}, {})


def ga_tune(dump_dir: str, pid_timestamp: str) -> tuple:
    """
    start ga_tune
    """
    sig_list = [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]
    for sig in sig_list:
        signal.signal(sig, sigint_handler)
    tune_json_list = get_tune_list(dump_dir)
    if not tune_json_list:
        LOG_INSTANCE.warning("No GA case found in %s!", dump_dir)
        return False, []
    final_ret = True
    ga_failed_cases = []
    for tune_json in tune_json_list:
        op_desc = get_op_desc(tune_json)
        if not op_desc:
            continue
        with op_context.OpContext("pre_static")as ctx:
            ctx.add_addition("master_pid", os.getpid())
            reset_repository()
            auto_tune_env_init(json.loads(op_desc))
            ret = auto_tune_compile(op_desc, time_stamp=pid_timestamp)
            auto_tune_env_deinit()
            final_ret = final_ret and ret
            if not ret:
                json_name = tune_json.rsplit(os.sep, 1)[1]
                ga_failed_cases.append(json_name)
    del_tmp_files(False)
    return final_ret, ga_failed_cases


def del_tmp_files(abnormal: bool) -> None:
    """
    del all tune_show_* dir in cur_path
    param:
    abnormal: if process stops unexpected
    """
    cur_path = os.path.realpath(os.getcwd())
    tune_show_dir_list = glob.glob(os.path.join(cur_path, "tune_show_*"))
    lock_file_name = "file.lock"
    lock_file = os.path.join(cur_path, lock_file_name)
    if os.path.isfile(lock_file):
        os.remove(lock_file)
    for tune_show_dir in tune_show_dir_list:
        if os.path.isdir(tune_show_dir):
            ga_in_use = os.path.join(tune_show_dir, "GA_in_use.flag")
            if os.path.isfile(ga_in_use):
                os.remove(ga_in_use)
            in_use_flag = glob.glob(os.path.join(tune_show_dir, "*_in_use.flag"))
            if abnormal or not in_use_flag:
                shutil.rmtree(tune_show_dir)


def main() -> int:
    """
    main entry
    """
    if len(sys.argv) < 2:
        LOG_INSTANCE.error("Params error! Please input 1 param at least: dump_dir")
        return 0

    pid_ts = ""
    for i in range(2, len(sys.argv)):
        if "--pid_ts" in sys.argv[i]:
            _, value = sys.argv[i].strip().replace("--", "").split("=")
            pid_ts = value
            break

    if not pid_ts:
        pid_str = os.getpid()
        time_str = datetime.datetime.utcnow().strftime('%Y%m%d_%H%M%S%f')[:-3]
        pid_ts = "{}_pid{}".format(time_str, pid_str)

    ret, ga_failed_cases = ga_tune(sys.argv[1], pid_ts)

    if not ret and ga_failed_cases:
        LOG_INSTANCE.warning("Some cases may not support ga tuning and "\
            "not be upgraded in custom repository. Please check the following cases.")
        for case in ga_failed_cases:
            LOG_INSTANCE.info("%s", case)
    return 0


if __name__ == '__main__':
    sys.exit(main())
