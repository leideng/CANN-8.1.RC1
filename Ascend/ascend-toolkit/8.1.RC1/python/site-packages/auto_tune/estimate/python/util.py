#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

util tools py file
"""
import os
import subprocess

from tbe.common.buildcfg import GlobalInfoContainer

from auto_tune.auto_tune_log import LOG_INSTANCE


ABNORMAL_RESULT_STATUS = 255
ABNORMAL_KERNEL_RES = 0


def run_cmd_comm(cmd: str, timeout: int = 60, print_output: bool = False) -> tuple:
    """
    run command using subprocess package, support python2 and python3.
    """
    cmd_run_list = cmd.split(" ")
    cmd_run = []
    for split_cmd in cmd_run_list:
        if not split_cmd:
            continue
        cmd_run.append(split_cmd)

    LOG_INSTANCE.debug("begin to run cmd in host: %s", cmd)
    try:
        out_bytes = subprocess.check_output(cmd_run, stderr=subprocess.PIPE, timeout=timeout)
    except subprocess.CalledProcessError as excp: # pragma pylint: disable=no-member
        fail_str = excp.stderr.decode('utf-8') # pragma pylint: disable=no-member
        LOG_INSTANCE.error("run cmd: %s fail!", cmd)
        output_str = excp.output.decode('utf-8') + fail_str
        if print_output:
            LOG_INSTANCE.error("output: %s, fail_str: %s",
                               excp.output.decode('utf-8'), fail_str)
        return False, output_str
    except subprocess.TimeoutExpired as excp: # pragma pylint: disable=no-member
        LOG_INSTANCE.error("run [%s] timeout! timeout:%d s", str(cmd), timeout)
        return False, 'timeout'
    except Exception as excp: # pragma pylint: disable=broad-except
        LOG_INSTANCE.error("run cmd: %s unknown exception: %s! ", cmd, str(excp))
        return False, 'unknown_err'
    finally:
        pass
    if print_output:
        LOG_INSTANCE.debug("output: %s", out_bytes.decode('utf-8'))
    return True, out_bytes.decode('utf-8')


def raise_device_id_err(device_id: int, device_cnt: int) -> None:
    """
    raise error code: type device_id
    """
    raise RuntimeError({"errCode": "EC0007",
                        "value": device_id,
                        "env": "ASCEND_DEVICE_ID",
                        "max_val": device_cnt
    })


def check_device_id(device_id: int) -> bool:
    '''
    check_device_id
    @param device_id: logic device id
    '''
    check_cmd = "lspci"
    ret, output = run_cmd_comm(check_cmd)
    if not ret:
        return True
    device_cnt = output.count('Processing accelerators')
    try:
        device_id = int(device_id)
    except (TypeError, ValueError):
        raise_device_id_err(device_id, device_cnt)
    if device_cnt != 0 and device_id >= device_cnt:
        LOG_INSTANCE.error("GA env check failed: host only have %s device, "
                "evb conf 'device_idx' item config fail!, disable ga tune now!", device_cnt)
        raise_device_id_err(device_id, device_cnt)
    return True


def get_kernel_meta_dir() -> str:
    '''
    get kernel_meta dir
    '''
    base_dir = GlobalInfoContainer.global_info["kernel_meta_parent_dir"]
    kernel_meta_dir = os.path.realpath(os.path.join(base_dir, "kernel_meta/"))
    return kernel_meta_dir
