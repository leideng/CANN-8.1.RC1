#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

translate weight to weight and weight index
"""
import os
import ctypes
from typing import List

from auto_tune.util_atc import FILE_FLAG
from auto_tune.util_atc import FILE_MODE_640


class CompressConfig(ctypes.Structure):
    """
    struct for weight
    """
    _fields_ = [("inputSize", ctypes.c_size_t),
                ("engineNum", ctypes.c_size_t),
                ("maxRatio", ctypes.c_size_t),
                ("channel", ctypes.c_size_t),
                ("fractalSize", ctypes.c_size_t),
                ("isTight", ctypes.c_bool),
                ("init_offset", ctypes.c_size_t),
                ]


class CompressOpConfig(ctypes.Structure):
    """
    struct for weight
    """
    _fields_ = [
        ("wShape", ctypes.c_int64 * 4),
        ("compressTilingK", ctypes.c_size_t),
        ("compressTilingN", ctypes.c_size_t),
        ("compressConfig", CompressConfig)
    ]


def compress_weights_conv2d(topi_args: dict, weight: List[int], json_params: dict, file_path: str) -> tuple:
    """
    weight_translate
    @param topi_args: topi_args
    @param weight: weight data
    @param json_params: compile kernel generated json
    """
    compress_op_so = ctypes.cdll.LoadLibrary('libcompressweight.so')
    compress_weights_conv2d_so = compress_op_so.CompressWeightsConv2D
    compress_weights_conv2d_so.argtypes = [ctypes.c_char_p,
                                        ctypes.c_char_p,
                                        ctypes.c_char_p,
                                        ctypes.POINTER(CompressOpConfig)]
    compress_weights_conv2d_so.restype = ctypes.c_int
    w_shape = (ctypes.c_int64 * 4)(*topi_args.get('cube_weight_fractal_z'))
    w_shape_size = 1
    for x_shape in w_shape:
        w_shape_size = w_shape_size * x_shape

    compress_config = CompressConfig()
    compress_op_config = CompressOpConfig()

    compress_config.fractalSize = json_params.get('compress_parameters')[0]
    info_size = json_params.get('compress_parameters')[1]
    compress_config.isTight = json_params.get('compress_parameters')[2]
    compress_config.engineNum = json_params.get('compress_parameters')[3]
    compress_config.channel = json_params.get('compress_parameters')[4]
    compress_config.maxRatio = json_params.get('compress_parameters')[5]
    compress_config.inputSize = len(weight)
    compress_config.init_offset = 0
    compress_op_config.wShape = w_shape
    compress_op_config.compressTilingK = json_params.get('compress_parameters')[6]
    compress_op_config.compressTilingN = json_params.get('compress_parameters')[7]
    compress_op_config.compressConfig = compress_config

    weight_input = (ctypes.c_char * compress_config.inputSize)(*weight)
    weight_zip = (ctypes.c_char * compress_config.inputSize)()
    weight_info = (ctypes.c_char * info_size)()
    compress_res = compress_weights_conv2d_so(weight_input, weight_zip, weight_info, ctypes.byref(compress_op_config))
    zip_filename = "%s_zip.bin" % (json_params.get('kernelName'))
    info_filename = "%s_info.bin" % (json_params.get('kernelName'))
    zip_file = os.path.join(file_path, zip_filename)
    info_file = os.path.join(file_path, info_filename)
    if compress_res == 0:
        with os.fdopen(os.open(zip_file, FILE_FLAG, FILE_MODE_640), "wb+") as f_handle:
            f_handle.write(weight_zip)
        with os.fdopen(os.open(info_file, FILE_FLAG, FILE_MODE_640), "wb+") as f_handle:
            f_handle.write(weight_info)
    return compress_res == 0, zip_filename, info_filename
