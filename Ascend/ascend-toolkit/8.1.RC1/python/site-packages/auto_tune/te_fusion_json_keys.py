#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.

Define public Class for te_fusion json keys
"""

from dataclasses import dataclass


@dataclass
class TeFusionJsonKeys(object):
    """
    class of AutoTuneParam
    """
    SOC_INFO : str = "SocInfo"  # soc info, see class SocInfoKeys
    FUSION_OP_NAME : str = "fusion_op_name"
    GRAPH_NODE : str = "graph_name"
    L1_SIZE : str = "l1_size"
    OP_LIST : str = "op_list"  # op node list,see class OpNodeKeys
    SCOPE_ID : str = "scope_id"


@dataclass
class SocInfoKeys(object):
    """
    class of SocInfoKeys
    """
    AUTO_TILING_MODE : str = 'autoTilingMode'
    CORE_NUM : str = 'coreNum'
    CORE_TYPE : str = 'coreType'
    L1_FUSION : str = 'l1Fusion'  # True: tool open L1_fusion, but op's L1_fusion depend on InputDescKeys.L1_FUSION_TYPE
    L2_FUSION : str = 'l2Fusion'
    L2_MODE : str = 'l2Mode'
    OP_DEBUG_LEVEL : str = 'op_debug_level'
    OP_IMPL_MODE : str = 'op_impl_mode'
    OP_IMPL_MODE_LIST : str = 'op_impl_mode_list'
    SOC_VERSION : str = 'socVersion'
    VECTOR_FP_CEILING : str = 'vector_fp_ceiling'


@dataclass
class OpNodeKeys(object):
    """
    class of OpNodeKeys
    """
    NAME : str = "name"
    ATTR_DESC : str = "attr_desc"
    FUNC_NAME : str = "func_name"  # op compute func name
    INPUT_DESC : str = "input_desc"  # input desc,see class InputDescKeys
    OUTPUT_DESC : str = "output_desc"  # output desc,see class OutputDescKeys
    TYPE : str = "type"  # op type
    ID : str = "id"
    INT64MODE : str = "int64mode"
    PY_MODULE_PATH : str = "py_module_path"
    MODULE_NAME : str = "module_name"
    ORI_NAME : str = "ori_name"
    PATTERN : str = "pattern"


@dataclass
class InputDescKeys(object):
    """
    class of InputDescKeys
    """
    L1_ADDR_FLAG : str = "L1_addr_flag"  # 1:L1 will be used for input data
    L1_ADDR_OFFSET : str = "L1_addr_offset"  # the offset of input data in L1
    L1_FUSION_TYPE : str = "L1_fusion_type"  # if op is l1Fusion, "L1_fusion_type"=0 or 1, else -1
    L1_VALID_SIZE : str = "L1_valid_size"  # input data's size
    L1_WORKSPACE_SIZE : str = "L1_workspace_size"
    ADDR_TYPE : str = "addr_type"  # input data's addr type, 0:ddr, 1:L1, 2:L2
    DATA_TYPE : str = "data_type"
    FORMAT : str = "format"
    NAME : str = "name"
    ORI_FORMAT : str = "ori_format"
    ORI_SHAPE : str = "ori_shape"
    SHAPE : str = "shape"  # the real shape of input data, used to calculate data's size
    SLICE_OFFSET : str = "slice_offset"
    TOTAL_SHAPE : str = "total_shape"  # origal shape, format is value of "format"
    VALID_SHAPE : str = "valid_shape"  # splited shape used when "L1_addr_flag"=1


@dataclass
class OutputDescKeys(object):
    """
    class of OutputDescKeys
    """
    L1_ADDR_FLAG : str = "L1_addr_flag"  # 1:L1 will be used for output data
    L1_ADDR_OFFSET : str = "L1_addr_offset"  # the offset of input data in L1
    L1_FUSION_TYPE : str = "L1_fusion_type"  # if op is l1Fusion, "L1_fusion_type"=0 or 1, else -1
    L1_VALID_SIZE : str = "L1_valid_size"  # input data's size
    L1_WORKSPACE_SIZE : str = "L1_workspace_size"
    ADDR_TYPE : str = "addr_type"  # output data's addr type, 0:ddr, 1:L1, 2:L2
    DATA_TYPE : str = "data_type"
    FORMAT : str = "format"
    NAME : str = "name"
    ORI_FORMAT : str = "ori_format"
    ORI_SHAPE : str = "ori_shape"
    SHAPE : str = "shape"  # the real shape of output data, used to calculate data's size
    SLICE_OFFSET : str = "slice_offset"
    TOTAL_SHAPE : str = "total_shape"  # origal shape, format is value of "format"
    VALID_SHAPE : str = "valid_shape"  # splited shape used when "L1_addr_flag"=1
    OUTPUT_INDEX : str = "output_index"
