#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2022. Huawei Technologies Co., Ltd. All rights reserved.

Define the TaskFeature class
"""
from auto_tune.config_module.task_config import TaskConfig


class TaskFeature:
    """
    Base class for tuner task

    Parameters
    ----------
    param: shape info of input.
    """
    def __init__(self, shape_args: dict, task_config: TaskConfig) -> None:
        #1.save avaliable
        self.shape_args = shape_args
        self.task_config = task_config
        self.feature_config = task_config.cfg
        self.common_args = task_config.common_args
        self.ga_args = task_config.cfg.ga_args
        self.feasibility = self.task_config.feasibility
        self.config_space = self.task_config.config_space
        self.is_sparse = self.task_config.is_sparse
        self.dims = self.task_config.dims
        self.param = self.task_config.param
        self.topi_args = shape_args.get('topi_args')
        if 'input_memory_type' not in self.topi_args:
            self.topi_args['input_memory_type'] = [0]
        if 'output_memory_type' not in self.topi_args:
            self.topi_args['output_memory_type'] = [0]

############################# public ###############################
    def entity2point(self, entity: list) -> tuple:
        """
        Transform entity of tiling into index

        Parameters
        ----------
        entity: the entity of tiling
        config_space: the config space of every feature of tiling
        dims:  the length of the config space of every feature of tiling

        Returns
        -------
        p: number
        the index of tiling
        """
        return self.task_config.entity2point(entity)

    def point2entity(self, point: tuple) -> list:
        """
        Transform the index of tiling into entity

        Parameters
        ----------
        point: the index of tiling
        dims: the length of the config space of every feature of tiling
        config_space: the config space of every feature of tiling

        Returns
        -------
        entity: list
        the entity of tiling
        """
        return self.task_config.point2entity(point)

    def record_history_data(self, genes: list, result: list) -> list:
        """
        Record the train data for generating cost model

        Parameters
        ----------
        genes: record the tiling info
        result: record the label and feature

        Returns
        -------
        data_base: the performance data base of tiling
        """
        return self.task_config.record_history_data(genes, result)

    def tiling_transform(self, tiling: list) -> dict:
        """
        transform the format of tiling
        tiling: tiling generated by optimization algorithm
        return: transformed tiling
        """
        if not tiling:
            return {}
        return self.task_config.tiling_transform(tiling)

    def get_b_dtype(self) -> int:
        """
        get b_dtype
        """
        return self.task_config.get_b_dtype()

    def convert_tiling(self, tiling_dict_in: dict) -> list:
        """
        transfer the tiling dict to list
        :param tiling_dict: tiling from already_in_repository
        :return:
        """
        if not tiling_dict_in:
            return []
        return self.task_config.convert_tiling(tiling_dict_in)

    def get_opshape_in_param(self) -> tuple:
        return self.task_config.get_opshape_in_param()
