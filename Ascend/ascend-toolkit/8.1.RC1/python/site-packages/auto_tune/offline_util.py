#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Copyright (C) 2019. Huawei Technologies Co., Ltd. All rights reserved.

Define the offline_util
"""

from typing import List

# define the type of memory
DDR_MEMORY = 0
L1_MEMORY = 1
L2_MEMORY = 2
EMPTY_MEMORY = 3


def trans_to_decimal(num_list: List[int], base: int = 10) -> int:
    """
    From arbitrary base to base 10
    """
    int_num = 0
    for idx, num in enumerate(num_list):
        int_num += int(str(num), base) * (3 ** idx)
    return int_num


def encode_memory_type(type_flag: str, memory_type_list: List[int]) -> int:
    """
    encode the input params to encode_value

    Parameters
    ----------
    memory_type_list: the input memory list

    Returns
    -------
    encode_value: encode value
    """
    # get the length of memory_type_list
    value_length = len(memory_type_list)
    # define the encode table
    encode_table = {EMPTY_MEMORY: 0, \
                    L1_MEMORY: 1,
                    L2_MEMORY: 2,
                    DDR_MEMORY: 3}
    # encode the encode_value
    encode_value = 0
    encode_index = 0
    while value_length:
        # if the type_flag is output, using ternary code
        if type_flag == "out":
            encode_value += encode_table.get(memory_type_list[encode_index]) * (4**encode_index)
        # if if the type_flag is input, using binary code
        elif type_flag == "in":
            encode_value += memory_type_list[encode_index] * (3**encode_index)
        else:
            raise ValueError("Input type_list is not support.")
        value_length -= 1
        encode_index += 1

    return encode_value
