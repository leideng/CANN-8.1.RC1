#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# ----------------------------------------------------------------------------
# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------

"""
op_compiler_tool
"""

import sys
import os

from tbe.common.utils import log as logger
from op_compiler_parse_args import OptionParser
from op_compiler_common import Parameter_Mapping
from op_compiler_common import PLATFORM_INFO
from op_compiler_common import judgment_option_exist
from op_compiler_common import parse_platform_config
from op_compiler_common import get_opp_path
from op_compiler_common import get_platform
from static_compile.static_compilation import static_kernel_compile
from debug_compile.debug_compilation import debug_kernel_compile


# 运行时禁止生成__pycache__/文件夹
sys.dont_write_bytecode = True


def _ini():
    flag, ascend_opp_path = get_opp_path()
    cann_path = os.path.dirname(ascend_opp_path)
    get_platform()
    parse_platform_config(f"{cann_path}/{PLATFORM_INFO['architecture']}-linux/data/platform_config")


def parse_args():
    """
    parse all arguments from use's input
    :return
    """
    opt_parser_temp = OptionParser()
    opt_parser_temp.define_options()
    exit_code = opt_parser_temp.get_options()
    return exit_code, opt_parser_temp


def _count_json_num(op_params_dir: str) -> int:
    if not os.path.exists(op_params_dir):
        logger.error(f"param [op_params_dir]: {op_params_dir} looks doesn`t exists")
        return 0
    count_local = 0
    for filename in os.listdir(op_params_dir):
        file_path = os.path.join(op_params_dir, filename)
        if os.path.isfile(file_path) and file_path.endswith('.json'):
            count_local += 1
    return count_local


if __name__ == '__main__':
    print("op compiler tool start working now, please wait for a moment ...")
    _ini()
    code, opt_parser = parse_args()
    if code is not None:
        sys.exit(code)

    OP_PARAMS_DIR_STATE = judgment_option_exist("op_params_dir", opt_parser.compiling_options)
    OP_DEBUG_CONFIG_STATE = judgment_option_exist("op_debug_config", opt_parser.compiling_options)
    KERNEL_NAME_STATE = judgment_option_exist("kernel_name", opt_parser.compiling_options)
    COUNT_STATE = judgment_option_exist("count", opt_parser.compiling_options)

    # 统计json文件数量
    if OP_PARAMS_DIR_STATE and COUNT_STATE:
        op_params_dir_path = opt_parser.full_options["--op_params_dir"].get_value()
        json_cnt = _count_json_num(op_params_dir_path)
        logger.info(f"param [op_params_dir]: {op_params_dir_path} json file number: {json_cnt}")
        print(f"json file numer: {json_cnt}")
        sys.exit(0)
    elif COUNT_STATE and not OP_PARAMS_DIR_STATE:
        logger.error("[--count] used with [-p/--op_params_dir]")
        sys.exit(1)

    # op_params_dir 和 kernel_name 只能使用其中一个
    if OP_PARAMS_DIR_STATE and KERNEL_NAME_STATE:
        logger.error("[-p/--op_params_dir] and [-k/--kernel_name] parameters cannot be used together.")
        sys.exit(1)
    elif not OP_PARAMS_DIR_STATE and not KERNEL_NAME_STATE:
        logger.error("[-p/--op_params_dir] or [-k/--kernel_name] parameters must be used.")
        sys.exit(1)

    if OP_DEBUG_CONFIG_STATE:
        print("debug kernel compile start")
        if not debug_kernel_compile(opt_parser):
            print("debug compiler fail")
            sys.exit(1)
        print("debug compiler success")
    else:
        if OP_PARAMS_DIR_STATE and not KERNEL_NAME_STATE:
            print("static kernel compile start")
            if not static_kernel_compile(opt_parser):
                print("static compiler fail")
            print("static compiler success")
        elif not OP_PARAMS_DIR_STATE and KERNEL_NAME_STATE:
            logger.error("[-k/--kernel_name] can be used only with [-d/--op_debug_config].")
            sys.exit(1)