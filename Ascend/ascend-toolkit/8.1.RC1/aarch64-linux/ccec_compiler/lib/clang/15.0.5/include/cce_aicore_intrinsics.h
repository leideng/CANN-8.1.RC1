// DONOT modify this file
// This is auto-generated by TableGen
#ifndef CCE_AICORE_INTRINSICS_TYPES
#define CCE_AICORE_INTRINSICS_TYPES
typedef enum {

  CRFMODE_NONE = 0,
  CRFMODE_DEQSCALE_VDEQ8 = 8,
  CRFMODE_DEQSCALE_DEQ8 = 9,
  CRFMODE_DEQSCALE_VDEQ16 = 10,
  CRFMODE_DEQSCALE_DEQ16 = 11,
  CRFMODE_DEQSCALE_VDEQS16 = 12,
  CRFMODE_DEQSCALE_DEQS16 = 13,
  CRFMODE_DEQSCALE_VDEQ2S16 = 14,
  CRFMODE_DEQSCALE_DEQ2S16 = 15,

} ConvReluFix_t;

typedef enum {

// CONV_RELU is only valid for the data moved between L0C/L0C16/L0C32/L0CSC16/L0CSC32/L0CDPF16/L0CDPF32 and UB
  CRMODE_NONE = 0,
  CRMODE_F32toF16_NONE = 1,
  CRMODE_F32toF16_RELU = 2,
  CRMODE_S32toF16_NONE = 3,
  CRMODE_F16toF32_NONE = 4,
  CRMODE_NONE_RELU     = 5,
  CRMODE_F16_MUL       = 6,
  CRMODE_S32toF16_DEQSCALE_SPR = 7,
  CRMODE_DEQSCALE_VDEQ8 = 8,
  CRMODE_DEQSCALE_DEQ8 = 9,
  CRMODE_DEQSCALE_VDEQ16 = 10,
  CRMODE_DEQSCALE_DEQ16 = 11,
  CRMODE_DEQSCALE_VDEQS16 = 12,
  CRMODE_DEQSCALE_DEQS16 = 13,

} ConvRelu_t;

typedef enum {
 // data conversion mode. Only valid when source is UB.
  NoConversion  = 0,
  CvtMode1 = 1,
  CvtMode2 = 2,

} CvtMode_t;

typedef enum {

  DI_featuremap = 0,
  DI_others = 1,

} DI_t;

typedef enum {
   // Special for dual output fix pipe instruction.
// only valid for L0C->{L1,UB,L1UB} data path
  DUAL_MODE0  = 0,     // dual output mode is disabled.
  DUAL_MODE1  = 1,
  DUAL_MODE2  = 2,     // only valid for DST={L1}
  DUAL_MODE3  = 3,     // only valid for DST={L1}
  DUAL_MODE4  = 4,     // only valid for DST={L1}

} DualMode_t;

typedef enum {
  // For VCMAX and VCMIN
    VALUE_INDEX = 0,
    INDEX_VALUE = 1,
    ONLY_VALUE = 2,
    ONLY_INDEX = 3,

} Order_t;

typedef enum {
   // Pooling mode after Winograd convolution operation.
// only valid for L0C->{L1,UB,L1UB} data path
  NoPooling  = 0,
  AVGPooling = 1,
  MAXPooling = 2,
  GAVGPooling = 3,

} Pool_t;

typedef enum {

  NoConv= 0,
  VQS162B8_POST = 1,
  QS162B8_POST = 2,
  VQF162B8_POST = 3,
  QF162B8_POST = 4,
  VQS162S4_POST = 5,
  QS162S4_POST = 6,
  VQF162S4_POST = 7,
  QF162S4_POST = 8,
  VQS162S16_POST = 9,
  QS162S16_POST = 10,
  VQF162S16_POST = 11,
  QF162S16_POST = 12,

} QuantMode_post;

typedef enum {

  NoQuant= 0,
#if (defined __DAV_C310__)
  VQF322HIF8_PRE = 2,
  QF322HIF8_PRE = 3,
  VQF322HIF8_PRE_STOCHASTIC = 4,
  QF322HIF8_PRE_STOCHASTIC = 5,
#endif
#if (defined __DAV_N350__)
  VREQ8 = 2,
  REQ8 = 3,
  VDEQF16 = 4,
  DEQF16 = 5,
  VREQ16 = 6,
  REQ16 = 7,
#else
  F322F16 = 1,
#if (!defined __DAV_M300__) && (!defined __DAV_L300__) && (!defined __DAV_L300_VEC__) && (!defined __DAV_T300__) && (!defined __DAV_C310__) && (!defined __DAV_L310__)
  AttachF16Mul = 6,
#endif // (!defined __DAV_M300__) && (!defined __DAV_L300__) && (!defined __DAV_L300_VEC__) && (!defined __DAV_T300__) && (!defined __DAV_C310__) && (!defined __DAV_L310__)
  VREQ8 = 8,
  REQ8 = 9,
  VDEQF16 = 10,
  DEQF16 = 11,
#if (!defined __DAV_C310__)
  VSHIFTS322S16 = 12,
  SHIFTS322S16 = 13,
#endif
  F322BF16 = 16,
#if (!defined __DAV_C310__)
  VQF162B8_PRE = 17,
  QF162B8_PRE = 18,
  VQF162S4_PRE = 19,
  QF162S4_PRE = 20,
#endif
  VREQ4 = 21,
  REQ4 = 22,
  VQF322B8_PRE = 23,
  QF322B8_PRE = 24,
  VQF322S4_PRE = 25,
  QF322S4_PRE = 26,
#if (!defined __DAV_C310__)
  VDEQS16 = 27,
  DEQS16 = 28,
  VQF162S16_PRE = 29,
  QF162S16_PRE = 30,
#endif
#endif // if (defined __DAV_N350__)

} QuantMode_t;

typedef enum {
   // Relu mode before element-wise operation on dav-n350 target
  NoRelu  = 0,
  NormalRelu = 1,
  ScalarRelu = 2,
  VectorRelu = 3,
  LUTActivation = 4,

} ReluMode_t;

typedef enum {
   // Relu mode before element-wise operation.
// only valid for L0C->{L1,UB,L1UB} data path
  NoRELU  = 0,
  NormalRELU = 1,
  LeakyRELU = 2,
  PRELU = 3,

} Relu_t;

typedef enum {
   // re-quantization mode.
// only valid for L0C->{L1,UB,L1UB} data path
  NoREQ  = 0,
  REQ = 1,  // re-quantization scalar mode.
  VREQ = 2, // re-quantization vector mode.

} Req_t;

typedef enum {

    MODE0 = 0,
    MODE1 = 1,
    MODE2 = 2,

} VSEL_mode_t;

typedef enum {

#if (defined __DAV_L300__) || (defined __DAV_L300_VEC__) || (defined __DAV_L310__)
  RPN_COR_IR = 19,
#endif // (defined __DAV_L300__) || (defined __DAV_L300_VEC__) || (defined __DAV_L310__)
  DATA_EXP_0 = 48,
  DATA_EXP_1 = 49,
  DATA_EXP_2 = 50,
  DATA_EXP_3 = 51,

} VSPR_t;

typedef enum {

  inc = 0,
  dec = 1,

} addr_cal_mode_t;

typedef enum {

  ATOMIC_SUM  = 0,
  // others: reserved

} atomic_op_t;

typedef enum {

  ATOMIC_NONE = 0,
  ATOMIC_F32 = 1,
  ATOMIC_F16 = 2,
  ATOMIC_S16 = 3,
  ATOMIC_S32 = 4,
  ATOMIC_S8 = 5,
  ATOMIC_BF16 = 6,

} atomic_type_t;

typedef enum {

  // the byte mode enable bit for UB->OUT
  BM_DISABLE = 0,
  BM_ENABLE = 1,

} bm_t;

typedef enum {

  SINGLE_CACHE_LINE = 0, // DCCI single cacheline entry in the data cache
  ENTIRE_DATA_CACHE,      // DCCI the entire data cache

} cache_line_t;

typedef enum {

  CSIZE0 = 0,
  CSIZE1 = 1,

} csize_t;

typedef enum {

  CACHELINE_ALL = 0, // ALL
  CACHELINE_UB,      // UB
  CACHELINE_OUT,     // OUT
#if (!defined __DAV_L300__) && (!defined __DAV_L300_VEC__) && (!defined __DAV_L310__)
  CACHELINE_ATOMIC,  // ATOMIC
#endif // (!defined __DAV_L300__) && (!defined __DAV_L300_VEC__) && (!defined __DAV_L310__)

} dcci_dst_t;

typedef enum {

  e0 = 0,
  e2 = 2,
  e4 = 4,
  e6 = 6,

} even0_7_t;

typedef enum {

  EVENT_ID0 = 0,
  EVENT_ID1,
  EVENT_ID2,
  EVENT_ID3,
#if __CCE_AICORE__ >= 200 // Available for V200 and V210
  EVENT_ID4,
  EVENT_ID5,
  EVENT_ID6,
  EVENT_ID7,
#endif

} event_t;

typedef enum {

  DSB_ALL = 0,   // Wait for all memory access instructions.
  DSB_DDR,       // Wait for DDR-access instructions.
  DSB_UB,        // Wait for DDR-access instructions.
  DSB_SEQ,       // Wait for Sequencer-access instrucitons (including Parameter Buffer).

} mem_dsb_t;

typedef enum {

  L1 = 0,
  L0A,
  L0B,
  L0C,
  UB,
  BT,

} mem_t;

typedef enum {

// PAD MODE is only valid for OUT->L1 data path
  PAD_NONE  = 0,
  PAD_MODE1 = 1,
  PAD_MODE2 = 2,
  PAD_MODE3 = 3,
  PAD_MODE4 = 4,
  PAD_MODE5 = 5,
  PAD_MODE6 = 6,
  PAD_MODE7 = 7,
  PAD_MODE8 = 8,

} pad_t;

typedef enum {

  PIPE_S = 0,  // Scalar Pipe
  PIPE_V,      // Vector Pipe, including{VectorOP write UB,  L0C->UB write}
  PIPE_M,      // Matrix Pipe, including{}
  PIPE_MTE1,   // L1->L0{A,B}
  PIPE_MTE2,   // OUT ->{L1, L0{A,B}, UB}
  PIPE_MTE3,   // UB ->{OUT,L1}
  PIPE_ALL,
#if __CCE_AICORE__ >= 200  // Available for V200 and V210
  PIPE_MTE4 = 7,   // MOV_UB_TO_OUT
  PIPE_MTE5 = 8,   // MOV_OUT_TO_UB
#if (!defined __DAV_M200_VEC__) && (((!defined __DAV_L210__) && (!defined __DAV_T210__)) && (!defined __DAV_M210_VEC__))
  PIPE_V2 = 9,     // Lower priority vector pipe,
               // includes data move between L0C and UB
#endif
#if __CCE_AICORE__ >= 210 // fixpipe Only available for V210 and V220
  PIPE_FIX = 10,     // {L0C} ->{L1,UB,L1UB}
#endif
#endif

} pipe_t;

typedef enum {

#if (defined __DAV_N350__)
  VAReg0 = 0,
  VAReg1,
  VAReg2,
  VAReg3,
#else
  VA0 = 0,
  VA1,
  VA2,
  VA3,
  VA4,
  VA5,
  VA6,
  VA7,
#endif

} ub_addr8_t;

typedef enum {

  UFMode0 = 0,   // unit-flag mechanism disabled.
  Reserved,      // reserved.
  UFMode2,       // unit-flag mechanism enabled, hardware checks the unit-flag but do not set unit-flag
  UFMode3,       // unit-flag mechanism enabled, hardware checks the unit-flag and set unit-flag

} unit_flag_t;

typedef enum {

  L128 = 0,
  H128,

} vpart_t;

typedef enum {

  b8  = 0,  // These values are also used as encoding in backend
  b16 = 1,
  b32 = 2,
  s8  = 3,
  s32 = 4,
  f16 = 5,
  fmix = 6,
  f32 = 7,

} vtype_t;

typedef enum {

  W_3 = 0,  // window size = 3
  W_5,      // window size = 5

} w_size_t;

#endif

